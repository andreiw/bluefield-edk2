#ifndef __REGS_RSH_DEF_H__
#define __REGS_RSH_DEF_H__

#ifdef __ASSEMBLER__
#define _64bit(x) x
#else /* __ASSEMBLER__ */
#ifdef __tile__
#define _64bit(x) x ## UL
#else /* __tile__ */
#define _64bit(x) x ## ULL
#endif /* __tile__ */
#endif /* __ASSEMBLER */



#ifndef __DOXYGEN__

/*
 * MMIO Address Space.
 * The MMIO physical address space for the rshim is described below.  This is
 * a general description of the MMIO space as opposed to a register
 * description
 */
#define RSH_MMIO_ADDRESS_SPACE__FIRST_WORD 0x0000
#define RSH_MMIO_ADDRESS_SPACE__LAST_WORD 0xfffffffff8
#define RSH_MMIO_ADDRESS_SPACE__LENGTH 0x10000000000
#define RSH_MMIO_ADDRESS_SPACE__STRIDE 0x0008

#define RSH_MMIO_ADDRESS_SPACE__OFFSET_SHIFT 0
#define RSH_MMIO_ADDRESS_SPACE__OFFSET_WIDTH 16
#define RSH_MMIO_ADDRESS_SPACE__OFFSET_RESET_VAL 0
#define RSH_MMIO_ADDRESS_SPACE__OFFSET_RMASK 0xffff
#define RSH_MMIO_ADDRESS_SPACE__OFFSET_MASK  0xffff
#define RSH_MMIO_ADDRESS_SPACE__OFFSET_FIELD 0,15

#define RSH_MMIO_ADDRESS_SPACE__PROT_SHIFT 16
#define RSH_MMIO_ADDRESS_SPACE__PROT_WIDTH 3
#define RSH_MMIO_ADDRESS_SPACE__PROT_RESET_VAL 0
#define RSH_MMIO_ADDRESS_SPACE__PROT_RMASK 0x7
#define RSH_MMIO_ADDRESS_SPACE__PROT_MASK  0x70000
#define RSH_MMIO_ADDRESS_SPACE__PROT_FIELD 16,18

#define RSH_MMIO_ADDRESS_SPACE__CHANNEL_SHIFT 23
#define RSH_MMIO_ADDRESS_SPACE__CHANNEL_WIDTH 4
#define RSH_MMIO_ADDRESS_SPACE__CHANNEL_RESET_VAL 0
#define RSH_MMIO_ADDRESS_SPACE__CHANNEL_RMASK 0xf
#define RSH_MMIO_ADDRESS_SPACE__CHANNEL_MASK  0x7800000
#define RSH_MMIO_ADDRESS_SPACE__CHANNEL_FIELD 23,26
#define RSH_MMIO_ADDRESS_SPACE__CHANNEL_VAL_BOOT 0x0
#define RSH_MMIO_ADDRESS_SPACE__CHANNEL_VAL_RSHIM 0x1
#define RSH_MMIO_ADDRESS_SPACE__CHANNEL_VAL_UART0 0x2
#define RSH_MMIO_ADDRESS_SPACE__CHANNEL_VAL_UART1 0x3
#define RSH_MMIO_ADDRESS_SPACE__CHANNEL_VAL_DIAG_UART 0x4
#define RSH_MMIO_ADDRESS_SPACE__CHANNEL_VAL_TYU 0x5
#define RSH_MMIO_ADDRESS_SPACE__CHANNEL_VAL_TYU_EXT1 0x6
#define RSH_MMIO_ADDRESS_SPACE__CHANNEL_VAL_TYU_EXT2 0x7
#define RSH_MMIO_ADDRESS_SPACE__CHANNEL_VAL_TYU_EXT3 0x8
#define RSH_MMIO_ADDRESS_SPACE__CHANNEL_VAL_TIMER 0x9
#define RSH_MMIO_ADDRESS_SPACE__CHANNEL_VAL_USB 0xa
#define RSH_MMIO_ADDRESS_SPACE__CHANNEL_VAL_GPIO 0xb
#define RSH_MMIO_ADDRESS_SPACE__CHANNEL_VAL_MMC 0xc
#define RSH_MMIO_ADDRESS_SPACE__CHANNEL_VAL_TIMER_EXT 0xd
#define RSH_MMIO_ADDRESS_SPACE__CHANNEL_VAL_WDOG_NS 0xe
#define RSH_MMIO_ADDRESS_SPACE__CHANNEL_VAL_WDOG_SEC 0xf


/*
 * Device Info.
 * This register provides general information about the device attached to
 * this port and channel.
 */
#define RSH_DEV_INFO 0x0000
#define RSH_DEV_INFO__LENGTH 0x0001

#define RSH_DEV_INFO__TYPE_SHIFT 0
#define RSH_DEV_INFO__TYPE_WIDTH 12
#define RSH_DEV_INFO__TYPE_RESET_VAL 33
#define RSH_DEV_INFO__TYPE_RMASK 0xfff
#define RSH_DEV_INFO__TYPE_MASK  0xfff
#define RSH_DEV_INFO__TYPE_FIELD 0,11
#define RSH_DEV_INFO__TYPE_VAL_PCIE 0x1
#define RSH_DEV_INFO__TYPE_VAL_GBE 0x10
#define RSH_DEV_INFO__TYPE_VAL_XGBE 0x11
#define RSH_DEV_INFO__TYPE_VAL_MPIPE 0x13
#define RSH_DEV_INFO__TYPE_VAL_TRIO 0x14
#define RSH_DEV_INFO__TYPE_VAL_CRYPTO 0x16
#define RSH_DEV_INFO__TYPE_VAL_COMPRESSION 0x18
#define RSH_DEV_INFO__TYPE_VAL_GPIO 0x20
#define RSH_DEV_INFO__TYPE_VAL_RSHIM 0x21
#define RSH_DEV_INFO__TYPE_VAL_SROM 0x22
#define RSH_DEV_INFO__TYPE_VAL_I2CM 0x25
#define RSH_DEV_INFO__TYPE_VAL_I2CS 0x26
#define RSH_DEV_INFO__TYPE_VAL_UART 0x28
#define RSH_DEV_INFO__TYPE_VAL_USBH 0x29
#define RSH_DEV_INFO__TYPE_VAL_USBS 0x2a
#define RSH_DEV_INFO__TYPE_VAL_USBHS 0x2b
#define RSH_DEV_INFO__TYPE_VAL_MMC 0x2c
#define RSH_DEV_INFO__TYPE_VAL_DDR2 0x40
#define RSH_DEV_INFO__TYPE_VAL_DDR3 0x42
#define RSH_DEV_INFO__TYPE_VAL_DDR4 0x44
#define RSH_DEV_INFO__TYPE_VAL_HMC 0x45
#define RSH_DEV_INFO__TYPE_VAL_MSS 0x46
#define RSH_DEV_INFO__TYPE_VAL_DIAG_SNP 0x80
#define RSH_DEV_INFO__TYPE_VAL_IPIC 0x81
#define RSH_DEV_INFO__TYPE_VAL_TILE 0x82
#define RSH_DEV_INFO__TYPE_VAL_TM 0x83
#define RSH_DEV_INFO__TYPE_VAL_TCAM 0x84
#define RSH_DEV_INFO__TYPE_VAL_SMMU 0x85
#define RSH_DEV_INFO__TYPE_VAL_GIC 0x86
#define RSH_DEV_INFO__TYPE_VAL_MPIPE_TX 0x87

#define RSH_DEV_INFO__DEVICE_REV_SHIFT 16
#define RSH_DEV_INFO__DEVICE_REV_WIDTH 8
#define RSH_DEV_INFO__DEVICE_REV_RMASK 0xff
#define RSH_DEV_INFO__DEVICE_REV_MASK  0xff0000
#define RSH_DEV_INFO__DEVICE_REV_FIELD 16,23

#define RSH_DEV_INFO__REGISTER_REV_SHIFT 24
#define RSH_DEV_INFO__REGISTER_REV_WIDTH 4
#define RSH_DEV_INFO__REGISTER_REV_RESET_VAL 0
#define RSH_DEV_INFO__REGISTER_REV_RMASK 0xf
#define RSH_DEV_INFO__REGISTER_REV_MASK  0xf000000
#define RSH_DEV_INFO__REGISTER_REV_FIELD 24,27

#define RSH_DEV_INFO__INSTANCE_SHIFT 32
#define RSH_DEV_INFO__INSTANCE_WIDTH 4
#define RSH_DEV_INFO__INSTANCE_RMASK 0xf
#define RSH_DEV_INFO__INSTANCE_MASK  _64bit(0xf00000000)
#define RSH_DEV_INFO__INSTANCE_FIELD 32,35


/*
 * Device Control.
 * This register provides general device control.
 */
#define RSH_DEV_CTL 0x0008
#define RSH_DEV_CTL__LENGTH 0x0001

#define RSH_DEV_CTL__NDN_ROUTE_ORDER_SHIFT 0
#define RSH_DEV_CTL__NDN_ROUTE_ORDER_WIDTH 1
#define RSH_DEV_CTL__NDN_ROUTE_ORDER_RESET_VAL 0
#define RSH_DEV_CTL__NDN_ROUTE_ORDER_RMASK 0x1
#define RSH_DEV_CTL__NDN_ROUTE_ORDER_MASK  0x1
#define RSH_DEV_CTL__NDN_ROUTE_ORDER_FIELD 0,0

#define RSH_DEV_CTL__CDN_ROUTE_ORDER_SHIFT 1
#define RSH_DEV_CTL__CDN_ROUTE_ORDER_WIDTH 1
#define RSH_DEV_CTL__CDN_ROUTE_ORDER_RESET_VAL 1
#define RSH_DEV_CTL__CDN_ROUTE_ORDER_RMASK 0x1
#define RSH_DEV_CTL__CDN_ROUTE_ORDER_MASK  0x2
#define RSH_DEV_CTL__CDN_ROUTE_ORDER_FIELD 1,1

#define RSH_DEV_CTL__DDN_ROUTE_ORDER_SHIFT 2
#define RSH_DEV_CTL__DDN_ROUTE_ORDER_WIDTH 1
#define RSH_DEV_CTL__DDN_ROUTE_ORDER_RESET_VAL 1
#define RSH_DEV_CTL__DDN_ROUTE_ORDER_RMASK 0x1
#define RSH_DEV_CTL__DDN_ROUTE_ORDER_MASK  0x4
#define RSH_DEV_CTL__DDN_ROUTE_ORDER_FIELD 2,2

#define RSH_DEV_CTL__DMA_RD_CA_ENA_SHIFT 3
#define RSH_DEV_CTL__DMA_RD_CA_ENA_WIDTH 1
#define RSH_DEV_CTL__DMA_RD_CA_ENA_RESET_VAL 1
#define RSH_DEV_CTL__DMA_RD_CA_ENA_RMASK 0x1
#define RSH_DEV_CTL__DMA_RD_CA_ENA_MASK  0x8
#define RSH_DEV_CTL__DMA_RD_CA_ENA_FIELD 3,3

#define RSH_DEV_CTL__L3_PROFILE_OVD_SHIFT 4
#define RSH_DEV_CTL__L3_PROFILE_OVD_WIDTH 1
#define RSH_DEV_CTL__L3_PROFILE_OVD_RESET_VAL 0
#define RSH_DEV_CTL__L3_PROFILE_OVD_RMASK 0x1
#define RSH_DEV_CTL__L3_PROFILE_OVD_MASK  0x10
#define RSH_DEV_CTL__L3_PROFILE_OVD_FIELD 4,4

#define RSH_DEV_CTL__L3_PROFILE_VAL_SHIFT 5
#define RSH_DEV_CTL__L3_PROFILE_VAL_WIDTH 4
#define RSH_DEV_CTL__L3_PROFILE_VAL_RESET_VAL 0
#define RSH_DEV_CTL__L3_PROFILE_VAL_RMASK 0xf
#define RSH_DEV_CTL__L3_PROFILE_VAL_MASK  0x1e0
#define RSH_DEV_CTL__L3_PROFILE_VAL_FIELD 5,8

#define RSH_DEV_CTL__WR_SLVERR_MAP_SHIFT 9
#define RSH_DEV_CTL__WR_SLVERR_MAP_WIDTH 2
#define RSH_DEV_CTL__WR_SLVERR_MAP_RESET_VAL 2
#define RSH_DEV_CTL__WR_SLVERR_MAP_RMASK 0x3
#define RSH_DEV_CTL__WR_SLVERR_MAP_MASK  0x600
#define RSH_DEV_CTL__WR_SLVERR_MAP_FIELD 9,10
#define RSH_DEV_CTL__WR_SLVERR_MAP_VAL_OKAY 0x0
#define RSH_DEV_CTL__WR_SLVERR_MAP_VAL_DATAERROR 0x2
#define RSH_DEV_CTL__WR_SLVERR_MAP_VAL_NONDATAERROR 0x3

#define RSH_DEV_CTL__WR_DECERR_MAP_SHIFT 11
#define RSH_DEV_CTL__WR_DECERR_MAP_WIDTH 2
#define RSH_DEV_CTL__WR_DECERR_MAP_RESET_VAL 3
#define RSH_DEV_CTL__WR_DECERR_MAP_RMASK 0x3
#define RSH_DEV_CTL__WR_DECERR_MAP_MASK  0x1800
#define RSH_DEV_CTL__WR_DECERR_MAP_FIELD 11,12
#define RSH_DEV_CTL__WR_DECERR_MAP_VAL_OKAY 0x0
#define RSH_DEV_CTL__WR_DECERR_MAP_VAL_DATAERROR 0x2
#define RSH_DEV_CTL__WR_DECERR_MAP_VAL_NONDATAERROR 0x3

#define RSH_DEV_CTL__RD_SLVERR_MAP_SHIFT 13
#define RSH_DEV_CTL__RD_SLVERR_MAP_WIDTH 2
#define RSH_DEV_CTL__RD_SLVERR_MAP_RESET_VAL 2
#define RSH_DEV_CTL__RD_SLVERR_MAP_RMASK 0x3
#define RSH_DEV_CTL__RD_SLVERR_MAP_MASK  0x6000
#define RSH_DEV_CTL__RD_SLVERR_MAP_FIELD 13,14
#define RSH_DEV_CTL__RD_SLVERR_MAP_VAL_OKAY 0x0
#define RSH_DEV_CTL__RD_SLVERR_MAP_VAL_DATAERROR 0x2
#define RSH_DEV_CTL__RD_SLVERR_MAP_VAL_NONDATAERROR 0x3

#define RSH_DEV_CTL__RD_DECERR_MAP_SHIFT 15
#define RSH_DEV_CTL__RD_DECERR_MAP_WIDTH 2
#define RSH_DEV_CTL__RD_DECERR_MAP_RESET_VAL 3
#define RSH_DEV_CTL__RD_DECERR_MAP_RMASK 0x3
#define RSH_DEV_CTL__RD_DECERR_MAP_MASK  0x18000
#define RSH_DEV_CTL__RD_DECERR_MAP_FIELD 15,16
#define RSH_DEV_CTL__RD_DECERR_MAP_VAL_OKAY 0x0
#define RSH_DEV_CTL__RD_DECERR_MAP_VAL_DATAERROR 0x2
#define RSH_DEV_CTL__RD_DECERR_MAP_VAL_NONDATAERROR 0x3

#define RSH_DEV_CTL__CDN_REQ_BUF_ENA_SHIFT 17
#define RSH_DEV_CTL__CDN_REQ_BUF_ENA_WIDTH 1
#define RSH_DEV_CTL__CDN_REQ_BUF_ENA_RESET_VAL 1
#define RSH_DEV_CTL__CDN_REQ_BUF_ENA_RMASK 0x1
#define RSH_DEV_CTL__CDN_REQ_BUF_ENA_MASK  0x20000
#define RSH_DEV_CTL__CDN_REQ_BUF_ENA_FIELD 17,17

#define RSH_DEV_CTL__DMA_WRQ_HWM_SHIFT 20
#define RSH_DEV_CTL__DMA_WRQ_HWM_WIDTH 8
#define RSH_DEV_CTL__DMA_WRQ_HWM_RESET_VAL 255
#define RSH_DEV_CTL__DMA_WRQ_HWM_RMASK 0xff
#define RSH_DEV_CTL__DMA_WRQ_HWM_MASK  0xff00000
#define RSH_DEV_CTL__DMA_WRQ_HWM_FIELD 20,27

#define RSH_DEV_CTL__GTHR_DELAY_ADJ_SHIFT 28
#define RSH_DEV_CTL__GTHR_DELAY_ADJ_WIDTH 4
#define RSH_DEV_CTL__GTHR_DELAY_ADJ_RESET_VAL 0
#define RSH_DEV_CTL__GTHR_DELAY_ADJ_RMASK 0xf
#define RSH_DEV_CTL__GTHR_DELAY_ADJ_MASK  0xf0000000
#define RSH_DEV_CTL__GTHR_DELAY_ADJ_FIELD 28,31


/* Scratchpad. */
#define RSH_SCRATCHPAD 0x0020
#define RSH_SCRATCHPAD__LENGTH 0x0001

#define RSH_SCRATCHPAD__SCRATCHPAD_SHIFT 0
#define RSH_SCRATCHPAD__SCRATCHPAD_WIDTH 64
#define RSH_SCRATCHPAD__SCRATCHPAD_RESET_VAL 0
#define RSH_SCRATCHPAD__SCRATCHPAD_RMASK _64bit(0xffffffffffffffff)
#define RSH_SCRATCHPAD__SCRATCHPAD_MASK  _64bit(0xffffffffffffffff)
#define RSH_SCRATCHPAD__SCRATCHPAD_FIELD 0,63


/*
 * Semaphore0.
 * Semaphore
 */
#define RSH_SEMAPHORE0 0x0028
#define RSH_SEMAPHORE0__LENGTH 0x0001

#define RSH_SEMAPHORE0__VAL_SHIFT 0
#define RSH_SEMAPHORE0__VAL_WIDTH 1
#define RSH_SEMAPHORE0__VAL_RESET_VAL 0
#define RSH_SEMAPHORE0__VAL_RMASK 0x1
#define RSH_SEMAPHORE0__VAL_MASK  0x1
#define RSH_SEMAPHORE0__VAL_FIELD 0,0


/*
 * DMA Status.
 * DMA status information for debug. Unused for devices that do not have DMA.
 */
#define RSH_DMA_STATUS 0x0030
#define RSH_DMA_STATUS__LENGTH 0x0001

#define RSH_DMA_STATUS__RDQ_INFL_COUNT_SHIFT 0
#define RSH_DMA_STATUS__RDQ_INFL_COUNT_WIDTH 9
#define RSH_DMA_STATUS__RDQ_INFL_COUNT_RESET_VAL 0
#define RSH_DMA_STATUS__RDQ_INFL_COUNT_RMASK 0x1ff
#define RSH_DMA_STATUS__RDQ_INFL_COUNT_MASK  0x1ff
#define RSH_DMA_STATUS__RDQ_INFL_COUNT_FIELD 0,8

#define RSH_DMA_STATUS__WRQ_INFL_COUNT_SHIFT 9
#define RSH_DMA_STATUS__WRQ_INFL_COUNT_WIDTH 9
#define RSH_DMA_STATUS__WRQ_INFL_COUNT_RESET_VAL 0
#define RSH_DMA_STATUS__WRQ_INFL_COUNT_RMASK 0x1ff
#define RSH_DMA_STATUS__WRQ_INFL_COUNT_MASK  0x3fe00
#define RSH_DMA_STATUS__WRQ_INFL_COUNT_FIELD 9,17

#define RSH_DMA_STATUS__WRQ_DIAG_VEC_SHIFT 25
#define RSH_DMA_STATUS__WRQ_DIAG_VEC_WIDTH 39
#define RSH_DMA_STATUS__WRQ_DIAG_VEC_RESET_VAL 0
#define RSH_DMA_STATUS__WRQ_DIAG_VEC_RMASK _64bit(0x7fffffffff)
#define RSH_DMA_STATUS__WRQ_DIAG_VEC_MASK  _64bit(0xfffffffffe000000)
#define RSH_DMA_STATUS__WRQ_DIAG_VEC_FIELD 25,63


/* Clock Count. */
#define RSH_CLOCK_COUNT 0x0038
#define RSH_CLOCK_COUNT__LENGTH 0x0001

#define RSH_CLOCK_COUNT__RUN_SHIFT 0
#define RSH_CLOCK_COUNT__RUN_WIDTH 1
#define RSH_CLOCK_COUNT__RUN_RESET_VAL 0
#define RSH_CLOCK_COUNT__RUN_RMASK 0x1
#define RSH_CLOCK_COUNT__RUN_MASK  0x1
#define RSH_CLOCK_COUNT__RUN_FIELD 0,0

#define RSH_CLOCK_COUNT__COUNT_SHIFT 1
#define RSH_CLOCK_COUNT__COUNT_WIDTH 15
#define RSH_CLOCK_COUNT__COUNT_RMASK 0x7fff
#define RSH_CLOCK_COUNT__COUNT_MASK  0xfffe
#define RSH_CLOCK_COUNT__COUNT_FIELD 1,15


/*
 * Interrupt Setup.
 * Configuration for device interrupts.
 */
#define RSH_INT_SETUP 0x0040
#define RSH_INT_SETUP__LENGTH 0x0001

#define RSH_INT_SETUP__GBL_ENA_SHIFT 0
#define RSH_INT_SETUP__GBL_ENA_WIDTH 1
#define RSH_INT_SETUP__GBL_ENA_RESET_VAL 0
#define RSH_INT_SETUP__GBL_ENA_RMASK 0x1
#define RSH_INT_SETUP__GBL_ENA_MASK  0x1
#define RSH_INT_SETUP__GBL_ENA_FIELD 0,0

#define RSH_INT_SETUP__BASE_INT_NUM_SHIFT 48
#define RSH_INT_SETUP__BASE_INT_NUM_WIDTH 16
#define RSH_INT_SETUP__BASE_INT_NUM_RMASK 0xffff
#define RSH_INT_SETUP__BASE_INT_NUM_MASK  _64bit(0xffff000000000000)
#define RSH_INT_SETUP__BASE_INT_NUM_FIELD 48,63


/*
 * Feature Control.
 * Device-specific feature controls.
 */
#define RSH_FEATURE_CTL 0x0048
#define RSH_FEATURE_CTL__LENGTH 0x0001

#define RSH_FEATURE_CTL__FEATURE_CTL_SHIFT 0
#define RSH_FEATURE_CTL__FEATURE_CTL_WIDTH 64
#define RSH_FEATURE_CTL__FEATURE_CTL_RESET_VAL 12297829382473034410
#define RSH_FEATURE_CTL__FEATURE_CTL_RMASK _64bit(0xffffffffffffffff)
#define RSH_FEATURE_CTL__FEATURE_CTL_MASK  _64bit(0xffffffffffffffff)
#define RSH_FEATURE_CTL__FEATURE_CTL_FIELD 0,63


/*
 * Credit Control.
 * Provides access to the request-credit counters that control end-to-end
 * flow control between the device and other nodes in the system.
 */
#define RSH_CRED_CTL 0x0050
#define RSH_CRED_CTL__LENGTH 0x0001

#define RSH_CRED_CTL__UPDATE_SHIFT 0
#define RSH_CRED_CTL__UPDATE_WIDTH 1
#define RSH_CRED_CTL__UPDATE_RESET_VAL 0
#define RSH_CRED_CTL__UPDATE_RMASK 0x1
#define RSH_CRED_CTL__UPDATE_MASK  0x1
#define RSH_CRED_CTL__UPDATE_FIELD 0,0

#define RSH_CRED_CTL__NODEID_SEL_SHIFT 1
#define RSH_CRED_CTL__NODEID_SEL_WIDTH 11
#define RSH_CRED_CTL__NODEID_SEL_RESET_VAL 0
#define RSH_CRED_CTL__NODEID_SEL_RMASK 0x7ff
#define RSH_CRED_CTL__NODEID_SEL_MASK  0xffe
#define RSH_CRED_CTL__NODEID_SEL_FIELD 1,11

#define RSH_CRED_CTL__TGT_SEL_SHIFT 12
#define RSH_CRED_CTL__TGT_SEL_WIDTH 2
#define RSH_CRED_CTL__TGT_SEL_RESET_VAL 0
#define RSH_CRED_CTL__TGT_SEL_RMASK 0x3
#define RSH_CRED_CTL__TGT_SEL_MASK  0x3000
#define RSH_CRED_CTL__TGT_SEL_FIELD 12,13
#define RSH_CRED_CTL__TGT_SEL_VAL_TX_REQ 0x0
#define RSH_CRED_CTL__TGT_SEL_VAL_RETRYQ 0x1
#define RSH_CRED_CTL__TGT_SEL_VAL_RING 0x2

#define RSH_CRED_CTL__CLIENT_SEL_SHIFT 14
#define RSH_CRED_CTL__CLIENT_SEL_WIDTH 2
#define RSH_CRED_CTL__CLIENT_SEL_RESET_VAL 0
#define RSH_CRED_CTL__CLIENT_SEL_RMASK 0x3
#define RSH_CRED_CTL__CLIENT_SEL_MASK  0xc000
#define RSH_CRED_CTL__CLIENT_SEL_FIELD 14,15

#define RSH_CRED_CTL__VAL_SHIFT 16
#define RSH_CRED_CTL__VAL_WIDTH 16
#define RSH_CRED_CTL__VAL_RESET_VAL 0
#define RSH_CRED_CTL__VAL_RMASK 0xffff
#define RSH_CRED_CTL__VAL_MASK  0xffff0000
#define RSH_CRED_CTL__VAL_FIELD 16,31


/*
 * SAM Control.
 * Provides access to SAM initialization.
 */
#define RSH_SAM_CTL 0x0058
#define RSH_SAM_CTL__LENGTH 0x0001

#define RSH_SAM_CTL__UPDATE_SHIFT 0
#define RSH_SAM_CTL__UPDATE_WIDTH 1
#define RSH_SAM_CTL__UPDATE_RESET_VAL 0
#define RSH_SAM_CTL__UPDATE_RMASK 0x1
#define RSH_SAM_CTL__UPDATE_MASK  0x1
#define RSH_SAM_CTL__UPDATE_FIELD 0,0

#define RSH_SAM_CTL__IDX_SHIFT 1
#define RSH_SAM_CTL__IDX_WIDTH 12
#define RSH_SAM_CTL__IDX_RESET_VAL 0
#define RSH_SAM_CTL__IDX_RMASK 0xfff
#define RSH_SAM_CTL__IDX_MASK  0x1ffe
#define RSH_SAM_CTL__IDX_FIELD 1,12
#define RSH_SAM_CTL__IDX_VAL_HNF_SIZE 0x7f7
#define RSH_SAM_CTL__IDX_VAL_LDR_SIZE 0x20

#define RSH_SAM_CTL__TBL_SEL_SHIFT 13
#define RSH_SAM_CTL__TBL_SEL_WIDTH 3
#define RSH_SAM_CTL__TBL_SEL_RESET_VAL 0
#define RSH_SAM_CTL__TBL_SEL_RMASK 0x7
#define RSH_SAM_CTL__TBL_SEL_MASK  0xe000
#define RSH_SAM_CTL__TBL_SEL_FIELD 13,15
#define RSH_SAM_CTL__TBL_SEL_VAL_LDR 0x0
#define RSH_SAM_CTL__TBL_SEL_VAL_HNF 0x1
#define RSH_SAM_CTL__TBL_SEL_VAL_PCI_NPF 0x2
#define RSH_SAM_CTL__TBL_SEL_VAL_PCI_PF 0x3
#define RSH_SAM_CTL__TBL_SEL_VAL_PCI_CFG 0x4

#define RSH_SAM_CTL__CLIENT_SEL_SHIFT 16
#define RSH_SAM_CTL__CLIENT_SEL_WIDTH 1
#define RSH_SAM_CTL__CLIENT_SEL_RESET_VAL 0
#define RSH_SAM_CTL__CLIENT_SEL_RMASK 0x1
#define RSH_SAM_CTL__CLIENT_SEL_MASK  0x10000
#define RSH_SAM_CTL__CLIENT_SEL_FIELD 16,16

#define RSH_SAM_CTL__READ_SHIFT 17
#define RSH_SAM_CTL__READ_WIDTH 1
#define RSH_SAM_CTL__READ_RESET_VAL 0
#define RSH_SAM_CTL__READ_RMASK 0x1
#define RSH_SAM_CTL__READ_MASK  0x20000
#define RSH_SAM_CTL__READ_FIELD 17,17

#define RSH_SAM_CTL__VAL_SHIFT 18
#define RSH_SAM_CTL__VAL_WIDTH 34
#define RSH_SAM_CTL__VAL_RESET_VAL 0
#define RSH_SAM_CTL__VAL_RMASK _64bit(0x3ffffffff)
#define RSH_SAM_CTL__VAL_MASK  _64bit(0xffffffffc0000)
#define RSH_SAM_CTL__VAL_FIELD 18,51


/*
 * DMA Read Pacer.
 * Control the behavior of dma read pacer
 */
#define RSH_DMA_READ_PACE 0x0060
#define RSH_DMA_READ_PACE__LENGTH 0x0001

#define RSH_DMA_READ_PACE__EN_SHIFT 0
#define RSH_DMA_READ_PACE__EN_WIDTH 1
#define RSH_DMA_READ_PACE__EN_RESET_VAL 0
#define RSH_DMA_READ_PACE__EN_RMASK 0x1
#define RSH_DMA_READ_PACE__EN_MASK  0x1
#define RSH_DMA_READ_PACE__EN_FIELD 0,0

#define RSH_DMA_READ_PACE__PER_READ_PENALTY_SHIFT 1
#define RSH_DMA_READ_PACE__PER_READ_PENALTY_WIDTH 3
#define RSH_DMA_READ_PACE__PER_READ_PENALTY_RESET_VAL 0
#define RSH_DMA_READ_PACE__PER_READ_PENALTY_RMASK 0x7
#define RSH_DMA_READ_PACE__PER_READ_PENALTY_MASK  0xe
#define RSH_DMA_READ_PACE__PER_READ_PENALTY_FIELD 1,3

#define RSH_DMA_READ_PACE__MAX_COUNT_SHIFT 4
#define RSH_DMA_READ_PACE__MAX_COUNT_WIDTH 9
#define RSH_DMA_READ_PACE__MAX_COUNT_RESET_VAL 32
#define RSH_DMA_READ_PACE__MAX_COUNT_RMASK 0x1ff
#define RSH_DMA_READ_PACE__MAX_COUNT_MASK  0x1ff0
#define RSH_DMA_READ_PACE__MAX_COUNT_FIELD 4,12

#define RSH_DMA_READ_PACE__PENALTY_FRACTION_SHIFT 13
#define RSH_DMA_READ_PACE__PENALTY_FRACTION_WIDTH 8
#define RSH_DMA_READ_PACE__PENALTY_FRACTION_RESET_VAL 0
#define RSH_DMA_READ_PACE__PENALTY_FRACTION_RMASK 0xff
#define RSH_DMA_READ_PACE__PENALTY_FRACTION_MASK  0x1fe000
#define RSH_DMA_READ_PACE__PENALTY_FRACTION_FIELD 13,20


/*
 * DMA Write Latency.
 * Provides random sample and record of DMA AXI4 write latency
 */
#define RSH_DMA_WR_LAT 0x0070
#define RSH_DMA_WR_LAT__LENGTH 0x0001

#define RSH_DMA_WR_LAT__MIN_LAT_SHIFT 0
#define RSH_DMA_WR_LAT__MIN_LAT_WIDTH 15
#define RSH_DMA_WR_LAT__MIN_LAT_RESET_VAL 0
#define RSH_DMA_WR_LAT__MIN_LAT_RMASK 0x7fff
#define RSH_DMA_WR_LAT__MIN_LAT_MASK  0x7fff
#define RSH_DMA_WR_LAT__MIN_LAT_FIELD 0,14

#define RSH_DMA_WR_LAT__MAX_LAT_SHIFT 16
#define RSH_DMA_WR_LAT__MAX_LAT_WIDTH 15
#define RSH_DMA_WR_LAT__MAX_LAT_RESET_VAL 0
#define RSH_DMA_WR_LAT__MAX_LAT_RMASK 0x7fff
#define RSH_DMA_WR_LAT__MAX_LAT_MASK  0x7fff0000
#define RSH_DMA_WR_LAT__MAX_LAT_FIELD 16,30

#define RSH_DMA_WR_LAT__CURR_LAT_SHIFT 32
#define RSH_DMA_WR_LAT__CURR_LAT_WIDTH 15
#define RSH_DMA_WR_LAT__CURR_LAT_RESET_VAL 0
#define RSH_DMA_WR_LAT__CURR_LAT_RMASK 0x7fff
#define RSH_DMA_WR_LAT__CURR_LAT_MASK  _64bit(0x7fff00000000)
#define RSH_DMA_WR_LAT__CURR_LAT_FIELD 32,46

#define RSH_DMA_WR_LAT__CLEAR_SHIFT 48
#define RSH_DMA_WR_LAT__CLEAR_WIDTH 1
#define RSH_DMA_WR_LAT__CLEAR_RESET_VAL 0
#define RSH_DMA_WR_LAT__CLEAR_RMASK 0x1
#define RSH_DMA_WR_LAT__CLEAR_MASK  _64bit(0x1000000000000)
#define RSH_DMA_WR_LAT__CLEAR_FIELD 48,48

#define RSH_DMA_WR_LAT__MAX_STND_REQS_SHIFT 49
#define RSH_DMA_WR_LAT__MAX_STND_REQS_WIDTH 12
#define RSH_DMA_WR_LAT__MAX_STND_REQS_RESET_VAL 0
#define RSH_DMA_WR_LAT__MAX_STND_REQS_RMASK 0xfff
#define RSH_DMA_WR_LAT__MAX_STND_REQS_MASK  _64bit(0x1ffe000000000000)
#define RSH_DMA_WR_LAT__MAX_STND_REQS_FIELD 49,60


/*
 * DMA Read Latency.
 * Provides random sample and record of DMA AXI4 read latency
 */
#define RSH_DMA_RD_LAT 0x0078
#define RSH_DMA_RD_LAT__LENGTH 0x0001

#define RSH_DMA_RD_LAT__MIN_LAT_SHIFT 0
#define RSH_DMA_RD_LAT__MIN_LAT_WIDTH 15
#define RSH_DMA_RD_LAT__MIN_LAT_RESET_VAL 0
#define RSH_DMA_RD_LAT__MIN_LAT_RMASK 0x7fff
#define RSH_DMA_RD_LAT__MIN_LAT_MASK  0x7fff
#define RSH_DMA_RD_LAT__MIN_LAT_FIELD 0,14

#define RSH_DMA_RD_LAT__MAX_LAT_SHIFT 16
#define RSH_DMA_RD_LAT__MAX_LAT_WIDTH 15
#define RSH_DMA_RD_LAT__MAX_LAT_RESET_VAL 0
#define RSH_DMA_RD_LAT__MAX_LAT_RMASK 0x7fff
#define RSH_DMA_RD_LAT__MAX_LAT_MASK  0x7fff0000
#define RSH_DMA_RD_LAT__MAX_LAT_FIELD 16,30

#define RSH_DMA_RD_LAT__CURR_LAT_SHIFT 32
#define RSH_DMA_RD_LAT__CURR_LAT_WIDTH 15
#define RSH_DMA_RD_LAT__CURR_LAT_RESET_VAL 0
#define RSH_DMA_RD_LAT__CURR_LAT_RMASK 0x7fff
#define RSH_DMA_RD_LAT__CURR_LAT_MASK  _64bit(0x7fff00000000)
#define RSH_DMA_RD_LAT__CURR_LAT_FIELD 32,46

#define RSH_DMA_RD_LAT__CLEAR_SHIFT 48
#define RSH_DMA_RD_LAT__CLEAR_WIDTH 1
#define RSH_DMA_RD_LAT__CLEAR_RESET_VAL 0
#define RSH_DMA_RD_LAT__CLEAR_RMASK 0x1
#define RSH_DMA_RD_LAT__CLEAR_MASK  _64bit(0x1000000000000)
#define RSH_DMA_RD_LAT__CLEAR_FIELD 48,48

#define RSH_DMA_RD_LAT__MAX_STND_REQS_SHIFT 49
#define RSH_DMA_RD_LAT__MAX_STND_REQS_WIDTH 12
#define RSH_DMA_RD_LAT__MAX_STND_REQS_RESET_VAL 0
#define RSH_DMA_RD_LAT__MAX_STND_REQS_RMASK 0xfff
#define RSH_DMA_RD_LAT__MAX_STND_REQS_MASK  _64bit(0x1ffe000000000000)
#define RSH_DMA_RD_LAT__MAX_STND_REQS_FIELD 49,60


/*
 * Bandwidth_Control.
 * Limit the bandwidth between the node and the mesh. There are four
 * bandwidth control registers, which respectively control WRITE-CDN,
 * WRITE-DDN, READ-CDN and READ-DDN channel
 */
#define RSH_BND_CTL__FIRST_WORD 0x0080
#define RSH_BND_CTL__LAST_WORD 0x0098
#define RSH_BND_CTL__LENGTH 0x0020
#define RSH_BND_CTL__STRIDE 0x0008

#define RSH_BND_CTL__EN_SHIFT 0
#define RSH_BND_CTL__EN_WIDTH 1
#define RSH_BND_CTL__EN_RESET_VAL 0
#define RSH_BND_CTL__EN_RMASK 0x1
#define RSH_BND_CTL__EN_MASK  0x1
#define RSH_BND_CTL__EN_FIELD 0,0

#define RSH_BND_CTL__MAX_COUNT_SHIFT 1
#define RSH_BND_CTL__MAX_COUNT_WIDTH 9
#define RSH_BND_CTL__MAX_COUNT_RESET_VAL 32
#define RSH_BND_CTL__MAX_COUNT_RMASK 0x1ff
#define RSH_BND_CTL__MAX_COUNT_MASK  0x3fe
#define RSH_BND_CTL__MAX_COUNT_FIELD 1,9

#define RSH_BND_CTL__TOKEN_NUM_SHIFT 20
#define RSH_BND_CTL__TOKEN_NUM_WIDTH 10
#define RSH_BND_CTL__TOKEN_NUM_RESET_VAL 1023
#define RSH_BND_CTL__TOKEN_NUM_RMASK 0x3ff
#define RSH_BND_CTL__TOKEN_NUM_MASK  0x3ff00000
#define RSH_BND_CTL__TOKEN_NUM_FIELD 20,29

#define RSH_BND_CTL__PENALTY_NUM_SHIFT 30
#define RSH_BND_CTL__PENALTY_NUM_WIDTH 3
#define RSH_BND_CTL__PENALTY_NUM_RESET_VAL 0
#define RSH_BND_CTL__PENALTY_NUM_RMASK 0x7
#define RSH_BND_CTL__PENALTY_NUM_MASK  _64bit(0x1c0000000)
#define RSH_BND_CTL__PENALTY_NUM_FIELD 30,32

#define RSH_BND_CTL__PENALTY_FRACTION_SHIFT 33
#define RSH_BND_CTL__PENALTY_FRACTION_WIDTH 8
#define RSH_BND_CTL__PENALTY_FRACTION_RESET_VAL 0
#define RSH_BND_CTL__PENALTY_FRACTION_RMASK 0xff
#define RSH_BND_CTL__PENALTY_FRACTION_MASK  _64bit(0x1fe00000000)
#define RSH_BND_CTL__PENALTY_FRACTION_FIELD 33,40


/*
 * Bandwidth_Control.
 * Limit the bandwidth between the node and the mesh. There are four
 * bandwidth control registers, which respectively control WRITE-CDN,
 * WRITE-DDN, READ-CDN and READ-DDN channel
 */
#define RSH_BND_CTL_1__FIRST_WORD 0x0088
#define RSH_BND_CTL_1__LAST_WORD 0x00a0
#define RSH_BND_CTL_1__LENGTH 0x0020
#define RSH_BND_CTL_1__STRIDE 0x0008

#define RSH_BND_CTL_1__EN_SHIFT 0
#define RSH_BND_CTL_1__EN_WIDTH 1
#define RSH_BND_CTL_1__EN_RESET_VAL 0
#define RSH_BND_CTL_1__EN_RMASK 0x1
#define RSH_BND_CTL_1__EN_MASK  0x1
#define RSH_BND_CTL_1__EN_FIELD 0,0

#define RSH_BND_CTL_1__MAX_COUNT_SHIFT 1
#define RSH_BND_CTL_1__MAX_COUNT_WIDTH 9
#define RSH_BND_CTL_1__MAX_COUNT_RESET_VAL 32
#define RSH_BND_CTL_1__MAX_COUNT_RMASK 0x1ff
#define RSH_BND_CTL_1__MAX_COUNT_MASK  0x3fe
#define RSH_BND_CTL_1__MAX_COUNT_FIELD 1,9

#define RSH_BND_CTL_1__TOKEN_NUM_SHIFT 20
#define RSH_BND_CTL_1__TOKEN_NUM_WIDTH 10
#define RSH_BND_CTL_1__TOKEN_NUM_RESET_VAL 1023
#define RSH_BND_CTL_1__TOKEN_NUM_RMASK 0x3ff
#define RSH_BND_CTL_1__TOKEN_NUM_MASK  0x3ff00000
#define RSH_BND_CTL_1__TOKEN_NUM_FIELD 20,29

#define RSH_BND_CTL_1__PENALTY_NUM_SHIFT 30
#define RSH_BND_CTL_1__PENALTY_NUM_WIDTH 3
#define RSH_BND_CTL_1__PENALTY_NUM_RESET_VAL 0
#define RSH_BND_CTL_1__PENALTY_NUM_RMASK 0x7
#define RSH_BND_CTL_1__PENALTY_NUM_MASK  _64bit(0x1c0000000)
#define RSH_BND_CTL_1__PENALTY_NUM_FIELD 30,32

#define RSH_BND_CTL_1__PENALTY_FRACTION_SHIFT 33
#define RSH_BND_CTL_1__PENALTY_FRACTION_WIDTH 8
#define RSH_BND_CTL_1__PENALTY_FRACTION_RESET_VAL 0
#define RSH_BND_CTL_1__PENALTY_FRACTION_RMASK 0xff
#define RSH_BND_CTL_1__PENALTY_FRACTION_MASK  _64bit(0x1fe00000000)
#define RSH_BND_CTL_1__PENALTY_FRACTION_FIELD 33,40


/*
 * Bandwidth_Control.
 * Limit the bandwidth between the node and the mesh. There are four
 * bandwidth control registers, which respectively control WRITE-CDN,
 * WRITE-DDN, READ-CDN and READ-DDN channel
 */
#define RSH_BND_CTL_2__FIRST_WORD 0x0090
#define RSH_BND_CTL_2__LAST_WORD 0x00a8
#define RSH_BND_CTL_2__LENGTH 0x0020
#define RSH_BND_CTL_2__STRIDE 0x0008

#define RSH_BND_CTL_2__EN_SHIFT 0
#define RSH_BND_CTL_2__EN_WIDTH 1
#define RSH_BND_CTL_2__EN_RESET_VAL 0
#define RSH_BND_CTL_2__EN_RMASK 0x1
#define RSH_BND_CTL_2__EN_MASK  0x1
#define RSH_BND_CTL_2__EN_FIELD 0,0

#define RSH_BND_CTL_2__MAX_COUNT_SHIFT 1
#define RSH_BND_CTL_2__MAX_COUNT_WIDTH 9
#define RSH_BND_CTL_2__MAX_COUNT_RESET_VAL 32
#define RSH_BND_CTL_2__MAX_COUNT_RMASK 0x1ff
#define RSH_BND_CTL_2__MAX_COUNT_MASK  0x3fe
#define RSH_BND_CTL_2__MAX_COUNT_FIELD 1,9

#define RSH_BND_CTL_2__TOKEN_NUM_SHIFT 20
#define RSH_BND_CTL_2__TOKEN_NUM_WIDTH 10
#define RSH_BND_CTL_2__TOKEN_NUM_RESET_VAL 1023
#define RSH_BND_CTL_2__TOKEN_NUM_RMASK 0x3ff
#define RSH_BND_CTL_2__TOKEN_NUM_MASK  0x3ff00000
#define RSH_BND_CTL_2__TOKEN_NUM_FIELD 20,29

#define RSH_BND_CTL_2__PENALTY_NUM_SHIFT 30
#define RSH_BND_CTL_2__PENALTY_NUM_WIDTH 3
#define RSH_BND_CTL_2__PENALTY_NUM_RESET_VAL 0
#define RSH_BND_CTL_2__PENALTY_NUM_RMASK 0x7
#define RSH_BND_CTL_2__PENALTY_NUM_MASK  _64bit(0x1c0000000)
#define RSH_BND_CTL_2__PENALTY_NUM_FIELD 30,32

#define RSH_BND_CTL_2__PENALTY_FRACTION_SHIFT 33
#define RSH_BND_CTL_2__PENALTY_FRACTION_WIDTH 8
#define RSH_BND_CTL_2__PENALTY_FRACTION_RESET_VAL 0
#define RSH_BND_CTL_2__PENALTY_FRACTION_RMASK 0xff
#define RSH_BND_CTL_2__PENALTY_FRACTION_MASK  _64bit(0x1fe00000000)
#define RSH_BND_CTL_2__PENALTY_FRACTION_FIELD 33,40


/*
 * Bandwidth_Control.
 * Limit the bandwidth between the node and the mesh. There are four
 * bandwidth control registers, which respectively control WRITE-CDN,
 * WRITE-DDN, READ-CDN and READ-DDN channel
 */
#define RSH_BND_CTL_3__FIRST_WORD 0x0098
#define RSH_BND_CTL_3__LAST_WORD 0x00b0
#define RSH_BND_CTL_3__LENGTH 0x0020
#define RSH_BND_CTL_3__STRIDE 0x0008

#define RSH_BND_CTL_3__EN_SHIFT 0
#define RSH_BND_CTL_3__EN_WIDTH 1
#define RSH_BND_CTL_3__EN_RESET_VAL 0
#define RSH_BND_CTL_3__EN_RMASK 0x1
#define RSH_BND_CTL_3__EN_MASK  0x1
#define RSH_BND_CTL_3__EN_FIELD 0,0

#define RSH_BND_CTL_3__MAX_COUNT_SHIFT 1
#define RSH_BND_CTL_3__MAX_COUNT_WIDTH 9
#define RSH_BND_CTL_3__MAX_COUNT_RESET_VAL 32
#define RSH_BND_CTL_3__MAX_COUNT_RMASK 0x1ff
#define RSH_BND_CTL_3__MAX_COUNT_MASK  0x3fe
#define RSH_BND_CTL_3__MAX_COUNT_FIELD 1,9

#define RSH_BND_CTL_3__TOKEN_NUM_SHIFT 20
#define RSH_BND_CTL_3__TOKEN_NUM_WIDTH 10
#define RSH_BND_CTL_3__TOKEN_NUM_RESET_VAL 1023
#define RSH_BND_CTL_3__TOKEN_NUM_RMASK 0x3ff
#define RSH_BND_CTL_3__TOKEN_NUM_MASK  0x3ff00000
#define RSH_BND_CTL_3__TOKEN_NUM_FIELD 20,29

#define RSH_BND_CTL_3__PENALTY_NUM_SHIFT 30
#define RSH_BND_CTL_3__PENALTY_NUM_WIDTH 3
#define RSH_BND_CTL_3__PENALTY_NUM_RESET_VAL 0
#define RSH_BND_CTL_3__PENALTY_NUM_RMASK 0x7
#define RSH_BND_CTL_3__PENALTY_NUM_MASK  _64bit(0x1c0000000)
#define RSH_BND_CTL_3__PENALTY_NUM_FIELD 30,32

#define RSH_BND_CTL_3__PENALTY_FRACTION_SHIFT 33
#define RSH_BND_CTL_3__PENALTY_FRACTION_WIDTH 8
#define RSH_BND_CTL_3__PENALTY_FRACTION_RESET_VAL 0
#define RSH_BND_CTL_3__PENALTY_FRACTION_RMASK 0xff
#define RSH_BND_CTL_3__PENALTY_FRACTION_MASK  _64bit(0x1fe00000000)
#define RSH_BND_CTL_3__PENALTY_FRACTION_FIELD 33,40


/*
 * BandWidth Throttle Control.
 * Control Bandwidth throttle algorithm behavior.There are four bandwidth
 * throttle control registers, which respectively control WRITE-CDN,
 * WRITE-DDN, READ-CDN and READ-DDN channel
 */
#define RSH_BND_THRT_CTL__FIRST_WORD 0x00a0
#define RSH_BND_THRT_CTL__LAST_WORD 0x00b8
#define RSH_BND_THRT_CTL__LENGTH 0x0020
#define RSH_BND_THRT_CTL__STRIDE 0x0008

#define RSH_BND_THRT_CTL__EN_SHIFT 0
#define RSH_BND_THRT_CTL__EN_WIDTH 1
#define RSH_BND_THRT_CTL__EN_RESET_VAL 0
#define RSH_BND_THRT_CTL__EN_RMASK 0x1
#define RSH_BND_THRT_CTL__EN_MASK  0x1
#define RSH_BND_THRT_CTL__EN_FIELD 0,0

#define RSH_BND_THRT_CTL__CONG_THRES_SHIFT 1
#define RSH_BND_THRT_CTL__CONG_THRES_WIDTH 15
#define RSH_BND_THRT_CTL__CONG_THRES_RESET_VAL 256
#define RSH_BND_THRT_CTL__CONG_THRES_RMASK 0x7fff
#define RSH_BND_THRT_CTL__CONG_THRES_MASK  0xfffe
#define RSH_BND_THRT_CTL__CONG_THRES_FIELD 1,15

#define RSH_BND_THRT_CTL__MAX_SHIFT 16
#define RSH_BND_THRT_CTL__MAX_WIDTH 10
#define RSH_BND_THRT_CTL__MAX_RESET_VAL 1023
#define RSH_BND_THRT_CTL__MAX_RMASK 0x3ff
#define RSH_BND_THRT_CTL__MAX_MASK  0x3ff0000
#define RSH_BND_THRT_CTL__MAX_FIELD 16,25

#define RSH_BND_THRT_CTL__MIN_SHIFT 26
#define RSH_BND_THRT_CTL__MIN_WIDTH 10
#define RSH_BND_THRT_CTL__MIN_RESET_VAL 1
#define RSH_BND_THRT_CTL__MIN_RMASK 0x3ff
#define RSH_BND_THRT_CTL__MIN_MASK  _64bit(0xffc000000)
#define RSH_BND_THRT_CTL__MIN_FIELD 26,35

#define RSH_BND_THRT_CTL__DEC_PER_SHIFT 36
#define RSH_BND_THRT_CTL__DEC_PER_WIDTH 5
#define RSH_BND_THRT_CTL__DEC_PER_RESET_VAL 4
#define RSH_BND_THRT_CTL__DEC_PER_RMASK 0x1f
#define RSH_BND_THRT_CTL__DEC_PER_MASK  _64bit(0x1f000000000)
#define RSH_BND_THRT_CTL__DEC_PER_FIELD 36,40

#define RSH_BND_THRT_CTL__INC_PER_SHIFT 41
#define RSH_BND_THRT_CTL__INC_PER_WIDTH 5
#define RSH_BND_THRT_CTL__INC_PER_RESET_VAL 5
#define RSH_BND_THRT_CTL__INC_PER_RMASK 0x1f
#define RSH_BND_THRT_CTL__INC_PER_MASK  _64bit(0x3e0000000000)
#define RSH_BND_THRT_CTL__INC_PER_FIELD 41,45

#define RSH_BND_THRT_CTL__WIN_LEN_SHIFT 46
#define RSH_BND_THRT_CTL__WIN_LEN_WIDTH 18
#define RSH_BND_THRT_CTL__WIN_LEN_RESET_VAL 1000
#define RSH_BND_THRT_CTL__WIN_LEN_RMASK 0x3ffff
#define RSH_BND_THRT_CTL__WIN_LEN_MASK  _64bit(0xffffc00000000000)
#define RSH_BND_THRT_CTL__WIN_LEN_FIELD 46,63


/*
 * BandWidth Throttle Control.
 * Control Bandwidth throttle algorithm behavior.There are four bandwidth
 * throttle control registers, which respectively control WRITE-CDN,
 * WRITE-DDN, READ-CDN and READ-DDN channel
 */
#define RSH_BND_THRT_CTL_1__FIRST_WORD 0x00a8
#define RSH_BND_THRT_CTL_1__LAST_WORD 0x00c0
#define RSH_BND_THRT_CTL_1__LENGTH 0x0020
#define RSH_BND_THRT_CTL_1__STRIDE 0x0008

#define RSH_BND_THRT_CTL_1__EN_SHIFT 0
#define RSH_BND_THRT_CTL_1__EN_WIDTH 1
#define RSH_BND_THRT_CTL_1__EN_RESET_VAL 0
#define RSH_BND_THRT_CTL_1__EN_RMASK 0x1
#define RSH_BND_THRT_CTL_1__EN_MASK  0x1
#define RSH_BND_THRT_CTL_1__EN_FIELD 0,0

#define RSH_BND_THRT_CTL_1__CONG_THRES_SHIFT 1
#define RSH_BND_THRT_CTL_1__CONG_THRES_WIDTH 15
#define RSH_BND_THRT_CTL_1__CONG_THRES_RESET_VAL 256
#define RSH_BND_THRT_CTL_1__CONG_THRES_RMASK 0x7fff
#define RSH_BND_THRT_CTL_1__CONG_THRES_MASK  0xfffe
#define RSH_BND_THRT_CTL_1__CONG_THRES_FIELD 1,15

#define RSH_BND_THRT_CTL_1__MAX_SHIFT 16
#define RSH_BND_THRT_CTL_1__MAX_WIDTH 10
#define RSH_BND_THRT_CTL_1__MAX_RESET_VAL 1023
#define RSH_BND_THRT_CTL_1__MAX_RMASK 0x3ff
#define RSH_BND_THRT_CTL_1__MAX_MASK  0x3ff0000
#define RSH_BND_THRT_CTL_1__MAX_FIELD 16,25

#define RSH_BND_THRT_CTL_1__MIN_SHIFT 26
#define RSH_BND_THRT_CTL_1__MIN_WIDTH 10
#define RSH_BND_THRT_CTL_1__MIN_RESET_VAL 1
#define RSH_BND_THRT_CTL_1__MIN_RMASK 0x3ff
#define RSH_BND_THRT_CTL_1__MIN_MASK  _64bit(0xffc000000)
#define RSH_BND_THRT_CTL_1__MIN_FIELD 26,35

#define RSH_BND_THRT_CTL_1__DEC_PER_SHIFT 36
#define RSH_BND_THRT_CTL_1__DEC_PER_WIDTH 5
#define RSH_BND_THRT_CTL_1__DEC_PER_RESET_VAL 4
#define RSH_BND_THRT_CTL_1__DEC_PER_RMASK 0x1f
#define RSH_BND_THRT_CTL_1__DEC_PER_MASK  _64bit(0x1f000000000)
#define RSH_BND_THRT_CTL_1__DEC_PER_FIELD 36,40

#define RSH_BND_THRT_CTL_1__INC_PER_SHIFT 41
#define RSH_BND_THRT_CTL_1__INC_PER_WIDTH 5
#define RSH_BND_THRT_CTL_1__INC_PER_RESET_VAL 5
#define RSH_BND_THRT_CTL_1__INC_PER_RMASK 0x1f
#define RSH_BND_THRT_CTL_1__INC_PER_MASK  _64bit(0x3e0000000000)
#define RSH_BND_THRT_CTL_1__INC_PER_FIELD 41,45

#define RSH_BND_THRT_CTL_1__WIN_LEN_SHIFT 46
#define RSH_BND_THRT_CTL_1__WIN_LEN_WIDTH 18
#define RSH_BND_THRT_CTL_1__WIN_LEN_RESET_VAL 1000
#define RSH_BND_THRT_CTL_1__WIN_LEN_RMASK 0x3ffff
#define RSH_BND_THRT_CTL_1__WIN_LEN_MASK  _64bit(0xffffc00000000000)
#define RSH_BND_THRT_CTL_1__WIN_LEN_FIELD 46,63


/*
 * BandWidth Throttle Control.
 * Control Bandwidth throttle algorithm behavior.There are four bandwidth
 * throttle control registers, which respectively control WRITE-CDN,
 * WRITE-DDN, READ-CDN and READ-DDN channel
 */
#define RSH_BND_THRT_CTL_2__FIRST_WORD 0x00b0
#define RSH_BND_THRT_CTL_2__LAST_WORD 0x00c8
#define RSH_BND_THRT_CTL_2__LENGTH 0x0020
#define RSH_BND_THRT_CTL_2__STRIDE 0x0008

#define RSH_BND_THRT_CTL_2__EN_SHIFT 0
#define RSH_BND_THRT_CTL_2__EN_WIDTH 1
#define RSH_BND_THRT_CTL_2__EN_RESET_VAL 0
#define RSH_BND_THRT_CTL_2__EN_RMASK 0x1
#define RSH_BND_THRT_CTL_2__EN_MASK  0x1
#define RSH_BND_THRT_CTL_2__EN_FIELD 0,0

#define RSH_BND_THRT_CTL_2__CONG_THRES_SHIFT 1
#define RSH_BND_THRT_CTL_2__CONG_THRES_WIDTH 15
#define RSH_BND_THRT_CTL_2__CONG_THRES_RESET_VAL 256
#define RSH_BND_THRT_CTL_2__CONG_THRES_RMASK 0x7fff
#define RSH_BND_THRT_CTL_2__CONG_THRES_MASK  0xfffe
#define RSH_BND_THRT_CTL_2__CONG_THRES_FIELD 1,15

#define RSH_BND_THRT_CTL_2__MAX_SHIFT 16
#define RSH_BND_THRT_CTL_2__MAX_WIDTH 10
#define RSH_BND_THRT_CTL_2__MAX_RESET_VAL 1023
#define RSH_BND_THRT_CTL_2__MAX_RMASK 0x3ff
#define RSH_BND_THRT_CTL_2__MAX_MASK  0x3ff0000
#define RSH_BND_THRT_CTL_2__MAX_FIELD 16,25

#define RSH_BND_THRT_CTL_2__MIN_SHIFT 26
#define RSH_BND_THRT_CTL_2__MIN_WIDTH 10
#define RSH_BND_THRT_CTL_2__MIN_RESET_VAL 1
#define RSH_BND_THRT_CTL_2__MIN_RMASK 0x3ff
#define RSH_BND_THRT_CTL_2__MIN_MASK  _64bit(0xffc000000)
#define RSH_BND_THRT_CTL_2__MIN_FIELD 26,35

#define RSH_BND_THRT_CTL_2__DEC_PER_SHIFT 36
#define RSH_BND_THRT_CTL_2__DEC_PER_WIDTH 5
#define RSH_BND_THRT_CTL_2__DEC_PER_RESET_VAL 4
#define RSH_BND_THRT_CTL_2__DEC_PER_RMASK 0x1f
#define RSH_BND_THRT_CTL_2__DEC_PER_MASK  _64bit(0x1f000000000)
#define RSH_BND_THRT_CTL_2__DEC_PER_FIELD 36,40

#define RSH_BND_THRT_CTL_2__INC_PER_SHIFT 41
#define RSH_BND_THRT_CTL_2__INC_PER_WIDTH 5
#define RSH_BND_THRT_CTL_2__INC_PER_RESET_VAL 5
#define RSH_BND_THRT_CTL_2__INC_PER_RMASK 0x1f
#define RSH_BND_THRT_CTL_2__INC_PER_MASK  _64bit(0x3e0000000000)
#define RSH_BND_THRT_CTL_2__INC_PER_FIELD 41,45

#define RSH_BND_THRT_CTL_2__WIN_LEN_SHIFT 46
#define RSH_BND_THRT_CTL_2__WIN_LEN_WIDTH 18
#define RSH_BND_THRT_CTL_2__WIN_LEN_RESET_VAL 1000
#define RSH_BND_THRT_CTL_2__WIN_LEN_RMASK 0x3ffff
#define RSH_BND_THRT_CTL_2__WIN_LEN_MASK  _64bit(0xffffc00000000000)
#define RSH_BND_THRT_CTL_2__WIN_LEN_FIELD 46,63


/*
 * BandWidth Throttle Control.
 * Control Bandwidth throttle algorithm behavior.There are four bandwidth
 * throttle control registers, which respectively control WRITE-CDN,
 * WRITE-DDN, READ-CDN and READ-DDN channel
 */
#define RSH_BND_THRT_CTL_3__FIRST_WORD 0x00b8
#define RSH_BND_THRT_CTL_3__LAST_WORD 0x00d0
#define RSH_BND_THRT_CTL_3__LENGTH 0x0020
#define RSH_BND_THRT_CTL_3__STRIDE 0x0008

#define RSH_BND_THRT_CTL_3__EN_SHIFT 0
#define RSH_BND_THRT_CTL_3__EN_WIDTH 1
#define RSH_BND_THRT_CTL_3__EN_RESET_VAL 0
#define RSH_BND_THRT_CTL_3__EN_RMASK 0x1
#define RSH_BND_THRT_CTL_3__EN_MASK  0x1
#define RSH_BND_THRT_CTL_3__EN_FIELD 0,0

#define RSH_BND_THRT_CTL_3__CONG_THRES_SHIFT 1
#define RSH_BND_THRT_CTL_3__CONG_THRES_WIDTH 15
#define RSH_BND_THRT_CTL_3__CONG_THRES_RESET_VAL 256
#define RSH_BND_THRT_CTL_3__CONG_THRES_RMASK 0x7fff
#define RSH_BND_THRT_CTL_3__CONG_THRES_MASK  0xfffe
#define RSH_BND_THRT_CTL_3__CONG_THRES_FIELD 1,15

#define RSH_BND_THRT_CTL_3__MAX_SHIFT 16
#define RSH_BND_THRT_CTL_3__MAX_WIDTH 10
#define RSH_BND_THRT_CTL_3__MAX_RESET_VAL 1023
#define RSH_BND_THRT_CTL_3__MAX_RMASK 0x3ff
#define RSH_BND_THRT_CTL_3__MAX_MASK  0x3ff0000
#define RSH_BND_THRT_CTL_3__MAX_FIELD 16,25

#define RSH_BND_THRT_CTL_3__MIN_SHIFT 26
#define RSH_BND_THRT_CTL_3__MIN_WIDTH 10
#define RSH_BND_THRT_CTL_3__MIN_RESET_VAL 1
#define RSH_BND_THRT_CTL_3__MIN_RMASK 0x3ff
#define RSH_BND_THRT_CTL_3__MIN_MASK  _64bit(0xffc000000)
#define RSH_BND_THRT_CTL_3__MIN_FIELD 26,35

#define RSH_BND_THRT_CTL_3__DEC_PER_SHIFT 36
#define RSH_BND_THRT_CTL_3__DEC_PER_WIDTH 5
#define RSH_BND_THRT_CTL_3__DEC_PER_RESET_VAL 4
#define RSH_BND_THRT_CTL_3__DEC_PER_RMASK 0x1f
#define RSH_BND_THRT_CTL_3__DEC_PER_MASK  _64bit(0x1f000000000)
#define RSH_BND_THRT_CTL_3__DEC_PER_FIELD 36,40

#define RSH_BND_THRT_CTL_3__INC_PER_SHIFT 41
#define RSH_BND_THRT_CTL_3__INC_PER_WIDTH 5
#define RSH_BND_THRT_CTL_3__INC_PER_RESET_VAL 5
#define RSH_BND_THRT_CTL_3__INC_PER_RMASK 0x1f
#define RSH_BND_THRT_CTL_3__INC_PER_MASK  _64bit(0x3e0000000000)
#define RSH_BND_THRT_CTL_3__INC_PER_FIELD 41,45

#define RSH_BND_THRT_CTL_3__WIN_LEN_SHIFT 46
#define RSH_BND_THRT_CTL_3__WIN_LEN_WIDTH 18
#define RSH_BND_THRT_CTL_3__WIN_LEN_RESET_VAL 1000
#define RSH_BND_THRT_CTL_3__WIN_LEN_RMASK 0x3ffff
#define RSH_BND_THRT_CTL_3__WIN_LEN_MASK  _64bit(0xffffc00000000000)
#define RSH_BND_THRT_CTL_3__WIN_LEN_FIELD 46,63


/*
 * Generic performance module configuration register.
 * Set up the configuration of generic performance module
 */
#define RSH_GEN_PERFMON_CONFIG__FIRST_WORD 0x00c0
#define RSH_GEN_PERFMON_CONFIG__LAST_WORD 0x00d8
#define RSH_GEN_PERFMON_CONFIG__LENGTH 0x0020
#define RSH_GEN_PERFMON_CONFIG__STRIDE 0x0008

#define RSH_GEN_PERFMON_CONFIG__WR_RD_B_SHIFT 0
#define RSH_GEN_PERFMON_CONFIG__WR_RD_B_WIDTH 1
#define RSH_GEN_PERFMON_CONFIG__WR_RD_B_RESET_VAL 0
#define RSH_GEN_PERFMON_CONFIG__WR_RD_B_RMASK 0x1
#define RSH_GEN_PERFMON_CONFIG__WR_RD_B_MASK  0x1
#define RSH_GEN_PERFMON_CONFIG__WR_RD_B_FIELD 0,0

#define RSH_GEN_PERFMON_CONFIG__STROBE_SHIFT 1
#define RSH_GEN_PERFMON_CONFIG__STROBE_WIDTH 1
#define RSH_GEN_PERFMON_CONFIG__STROBE_RESET_VAL 0
#define RSH_GEN_PERFMON_CONFIG__STROBE_RMASK 0x1
#define RSH_GEN_PERFMON_CONFIG__STROBE_MASK  0x2
#define RSH_GEN_PERFMON_CONFIG__STROBE_FIELD 1,1

#define RSH_GEN_PERFMON_CONFIG__ADDR_SHIFT 2
#define RSH_GEN_PERFMON_CONFIG__ADDR_WIDTH 3
#define RSH_GEN_PERFMON_CONFIG__ADDR_RESET_VAL 0
#define RSH_GEN_PERFMON_CONFIG__ADDR_RMASK 0x7
#define RSH_GEN_PERFMON_CONFIG__ADDR_MASK  0x1c
#define RSH_GEN_PERFMON_CONFIG__ADDR_FIELD 2,4

#define RSH_GEN_PERFMON_CONFIG__WDATA_SHIFT 5
#define RSH_GEN_PERFMON_CONFIG__WDATA_WIDTH 56
#define RSH_GEN_PERFMON_CONFIG__WDATA_RESET_VAL 0
#define RSH_GEN_PERFMON_CONFIG__WDATA_RMASK _64bit(0xffffffffffffff)
#define RSH_GEN_PERFMON_CONFIG__WDATA_MASK  _64bit(0x1fffffffffffffe0)
#define RSH_GEN_PERFMON_CONFIG__WDATA_FIELD 5,60


/*
 * Generic performance module configuration register.
 * Set up the configuration of generic performance module
 */
#define RSH_GEN_PERFMON_CONFIG_1__FIRST_WORD 0x00c8
#define RSH_GEN_PERFMON_CONFIG_1__LAST_WORD 0x00e0
#define RSH_GEN_PERFMON_CONFIG_1__LENGTH 0x0020
#define RSH_GEN_PERFMON_CONFIG_1__STRIDE 0x0008

#define RSH_GEN_PERFMON_CONFIG_1__WR_RD_B_SHIFT 0
#define RSH_GEN_PERFMON_CONFIG_1__WR_RD_B_WIDTH 1
#define RSH_GEN_PERFMON_CONFIG_1__WR_RD_B_RESET_VAL 0
#define RSH_GEN_PERFMON_CONFIG_1__WR_RD_B_RMASK 0x1
#define RSH_GEN_PERFMON_CONFIG_1__WR_RD_B_MASK  0x1
#define RSH_GEN_PERFMON_CONFIG_1__WR_RD_B_FIELD 0,0

#define RSH_GEN_PERFMON_CONFIG_1__STROBE_SHIFT 1
#define RSH_GEN_PERFMON_CONFIG_1__STROBE_WIDTH 1
#define RSH_GEN_PERFMON_CONFIG_1__STROBE_RESET_VAL 0
#define RSH_GEN_PERFMON_CONFIG_1__STROBE_RMASK 0x1
#define RSH_GEN_PERFMON_CONFIG_1__STROBE_MASK  0x2
#define RSH_GEN_PERFMON_CONFIG_1__STROBE_FIELD 1,1

#define RSH_GEN_PERFMON_CONFIG_1__ADDR_SHIFT 2
#define RSH_GEN_PERFMON_CONFIG_1__ADDR_WIDTH 3
#define RSH_GEN_PERFMON_CONFIG_1__ADDR_RESET_VAL 0
#define RSH_GEN_PERFMON_CONFIG_1__ADDR_RMASK 0x7
#define RSH_GEN_PERFMON_CONFIG_1__ADDR_MASK  0x1c
#define RSH_GEN_PERFMON_CONFIG_1__ADDR_FIELD 2,4

#define RSH_GEN_PERFMON_CONFIG_1__WDATA_SHIFT 5
#define RSH_GEN_PERFMON_CONFIG_1__WDATA_WIDTH 56
#define RSH_GEN_PERFMON_CONFIG_1__WDATA_RESET_VAL 0
#define RSH_GEN_PERFMON_CONFIG_1__WDATA_RMASK _64bit(0xffffffffffffff)
#define RSH_GEN_PERFMON_CONFIG_1__WDATA_MASK  _64bit(0x1fffffffffffffe0)
#define RSH_GEN_PERFMON_CONFIG_1__WDATA_FIELD 5,60


/*
 * Generic performance module configuration register.
 * Set up the configuration of generic performance module
 */
#define RSH_GEN_PERFMON_CONFIG_2__FIRST_WORD 0x00d0
#define RSH_GEN_PERFMON_CONFIG_2__LAST_WORD 0x00e8
#define RSH_GEN_PERFMON_CONFIG_2__LENGTH 0x0020
#define RSH_GEN_PERFMON_CONFIG_2__STRIDE 0x0008

#define RSH_GEN_PERFMON_CONFIG_2__WR_RD_B_SHIFT 0
#define RSH_GEN_PERFMON_CONFIG_2__WR_RD_B_WIDTH 1
#define RSH_GEN_PERFMON_CONFIG_2__WR_RD_B_RESET_VAL 0
#define RSH_GEN_PERFMON_CONFIG_2__WR_RD_B_RMASK 0x1
#define RSH_GEN_PERFMON_CONFIG_2__WR_RD_B_MASK  0x1
#define RSH_GEN_PERFMON_CONFIG_2__WR_RD_B_FIELD 0,0

#define RSH_GEN_PERFMON_CONFIG_2__STROBE_SHIFT 1
#define RSH_GEN_PERFMON_CONFIG_2__STROBE_WIDTH 1
#define RSH_GEN_PERFMON_CONFIG_2__STROBE_RESET_VAL 0
#define RSH_GEN_PERFMON_CONFIG_2__STROBE_RMASK 0x1
#define RSH_GEN_PERFMON_CONFIG_2__STROBE_MASK  0x2
#define RSH_GEN_PERFMON_CONFIG_2__STROBE_FIELD 1,1

#define RSH_GEN_PERFMON_CONFIG_2__ADDR_SHIFT 2
#define RSH_GEN_PERFMON_CONFIG_2__ADDR_WIDTH 3
#define RSH_GEN_PERFMON_CONFIG_2__ADDR_RESET_VAL 0
#define RSH_GEN_PERFMON_CONFIG_2__ADDR_RMASK 0x7
#define RSH_GEN_PERFMON_CONFIG_2__ADDR_MASK  0x1c
#define RSH_GEN_PERFMON_CONFIG_2__ADDR_FIELD 2,4

#define RSH_GEN_PERFMON_CONFIG_2__WDATA_SHIFT 5
#define RSH_GEN_PERFMON_CONFIG_2__WDATA_WIDTH 56
#define RSH_GEN_PERFMON_CONFIG_2__WDATA_RESET_VAL 0
#define RSH_GEN_PERFMON_CONFIG_2__WDATA_RMASK _64bit(0xffffffffffffff)
#define RSH_GEN_PERFMON_CONFIG_2__WDATA_MASK  _64bit(0x1fffffffffffffe0)
#define RSH_GEN_PERFMON_CONFIG_2__WDATA_FIELD 5,60


/*
 * Generic performance module configuration register.
 * Set up the configuration of generic performance module
 */
#define RSH_GEN_PERFMON_CONFIG_3__FIRST_WORD 0x00d8
#define RSH_GEN_PERFMON_CONFIG_3__LAST_WORD 0x00f0
#define RSH_GEN_PERFMON_CONFIG_3__LENGTH 0x0020
#define RSH_GEN_PERFMON_CONFIG_3__STRIDE 0x0008

#define RSH_GEN_PERFMON_CONFIG_3__WR_RD_B_SHIFT 0
#define RSH_GEN_PERFMON_CONFIG_3__WR_RD_B_WIDTH 1
#define RSH_GEN_PERFMON_CONFIG_3__WR_RD_B_RESET_VAL 0
#define RSH_GEN_PERFMON_CONFIG_3__WR_RD_B_RMASK 0x1
#define RSH_GEN_PERFMON_CONFIG_3__WR_RD_B_MASK  0x1
#define RSH_GEN_PERFMON_CONFIG_3__WR_RD_B_FIELD 0,0

#define RSH_GEN_PERFMON_CONFIG_3__STROBE_SHIFT 1
#define RSH_GEN_PERFMON_CONFIG_3__STROBE_WIDTH 1
#define RSH_GEN_PERFMON_CONFIG_3__STROBE_RESET_VAL 0
#define RSH_GEN_PERFMON_CONFIG_3__STROBE_RMASK 0x1
#define RSH_GEN_PERFMON_CONFIG_3__STROBE_MASK  0x2
#define RSH_GEN_PERFMON_CONFIG_3__STROBE_FIELD 1,1

#define RSH_GEN_PERFMON_CONFIG_3__ADDR_SHIFT 2
#define RSH_GEN_PERFMON_CONFIG_3__ADDR_WIDTH 3
#define RSH_GEN_PERFMON_CONFIG_3__ADDR_RESET_VAL 0
#define RSH_GEN_PERFMON_CONFIG_3__ADDR_RMASK 0x7
#define RSH_GEN_PERFMON_CONFIG_3__ADDR_MASK  0x1c
#define RSH_GEN_PERFMON_CONFIG_3__ADDR_FIELD 2,4

#define RSH_GEN_PERFMON_CONFIG_3__WDATA_SHIFT 5
#define RSH_GEN_PERFMON_CONFIG_3__WDATA_WIDTH 56
#define RSH_GEN_PERFMON_CONFIG_3__WDATA_RESET_VAL 0
#define RSH_GEN_PERFMON_CONFIG_3__WDATA_RMASK _64bit(0xffffffffffffff)
#define RSH_GEN_PERFMON_CONFIG_3__WDATA_MASK  _64bit(0x1fffffffffffffe0)
#define RSH_GEN_PERFMON_CONFIG_3__WDATA_FIELD 5,60


/*
 * Generic performance value register.
 * The register is used to provide interface where software can read the
 * value of generic performance counter
 */
#define RSH_GEN_PERFMVAL__FIRST_WORD 0x00e0
#define RSH_GEN_PERFMVAL__LAST_WORD 0x00f8
#define RSH_GEN_PERFMVAL__LENGTH 0x0020
#define RSH_GEN_PERFMVAL__STRIDE 0x0008

#define RSH_GEN_PERFMVAL__VAL_SHIFT 0
#define RSH_GEN_PERFMVAL__VAL_WIDTH 64
#define RSH_GEN_PERFMVAL__VAL_RESET_VAL 0
#define RSH_GEN_PERFMVAL__VAL_RMASK _64bit(0xffffffffffffffff)
#define RSH_GEN_PERFMVAL__VAL_MASK  _64bit(0xffffffffffffffff)
#define RSH_GEN_PERFMVAL__VAL_FIELD 0,63


/*
 * Generic performance value register.
 * The register is used to provide interface where software can read the
 * value of generic performance counter
 */
#define RSH_GEN_PERFMVAL_1__FIRST_WORD 0x00e8
#define RSH_GEN_PERFMVAL_1__LAST_WORD 0x0100
#define RSH_GEN_PERFMVAL_1__LENGTH 0x0020
#define RSH_GEN_PERFMVAL_1__STRIDE 0x0008

#define RSH_GEN_PERFMVAL_1__VAL_SHIFT 0
#define RSH_GEN_PERFMVAL_1__VAL_WIDTH 64
#define RSH_GEN_PERFMVAL_1__VAL_RESET_VAL 0
#define RSH_GEN_PERFMVAL_1__VAL_RMASK _64bit(0xffffffffffffffff)
#define RSH_GEN_PERFMVAL_1__VAL_MASK  _64bit(0xffffffffffffffff)
#define RSH_GEN_PERFMVAL_1__VAL_FIELD 0,63


/*
 * Generic performance value register.
 * The register is used to provide interface where software can read the
 * value of generic performance counter
 */
#define RSH_GEN_PERFMVAL_2__FIRST_WORD 0x00f0
#define RSH_GEN_PERFMVAL_2__LAST_WORD 0x0108
#define RSH_GEN_PERFMVAL_2__LENGTH 0x0020
#define RSH_GEN_PERFMVAL_2__STRIDE 0x0008

#define RSH_GEN_PERFMVAL_2__VAL_SHIFT 0
#define RSH_GEN_PERFMVAL_2__VAL_WIDTH 64
#define RSH_GEN_PERFMVAL_2__VAL_RESET_VAL 0
#define RSH_GEN_PERFMVAL_2__VAL_RMASK _64bit(0xffffffffffffffff)
#define RSH_GEN_PERFMVAL_2__VAL_MASK  _64bit(0xffffffffffffffff)
#define RSH_GEN_PERFMVAL_2__VAL_FIELD 0,63


/*
 * Generic performance value register.
 * The register is used to provide interface where software can read the
 * value of generic performance counter
 */
#define RSH_GEN_PERFMVAL_3__FIRST_WORD 0x00f8
#define RSH_GEN_PERFMVAL_3__LAST_WORD 0x0110
#define RSH_GEN_PERFMVAL_3__LENGTH 0x0020
#define RSH_GEN_PERFMVAL_3__STRIDE 0x0008

#define RSH_GEN_PERFMVAL_3__VAL_SHIFT 0
#define RSH_GEN_PERFMVAL_3__VAL_WIDTH 64
#define RSH_GEN_PERFMVAL_3__VAL_RESET_VAL 0
#define RSH_GEN_PERFMVAL_3__VAL_RMASK _64bit(0xffffffffffffffff)
#define RSH_GEN_PERFMVAL_3__VAL_MASK  _64bit(0xffffffffffffffff)
#define RSH_GEN_PERFMVAL_3__VAL_FIELD 0,63


/*
 * Performance Control Register.
 * The performance control register holds global and per accumulator control
 * fields defining the operation of the module on 0/1 data paths
 */
#define RSH_PERFCTL 0x00c0
#define RSH_PERFCTL__LENGTH 0x0001

#define RSH_PERFCTL__FM1_SHIFT 0
#define RSH_PERFCTL__FM1_WIDTH 3
#define RSH_PERFCTL__FM1_RESET_VAL 0
#define RSH_PERFCTL__FM1_RMASK 0x7
#define RSH_PERFCTL__FM1_MASK  0x7
#define RSH_PERFCTL__FM1_FIELD 0,2
#define RSH_PERFCTL__FM1_VAL_Always 0x0
#define RSH_PERFCTL__FM1_VAL_Never 0x1
#define RSH_PERFCTL__FM1_VAL_EQ 0x2
#define RSH_PERFCTL__FM1_VAL_NEQ 0x3
#define RSH_PERFCTL__FM1_VAL_GEQS 0x4
#define RSH_PERFCTL__FM1_VAL_LTS 0x5
#define RSH_PERFCTL__FM1_VAL_GEQU 0x6
#define RSH_PERFCTL__FM1_VAL_LTU 0x7

#define RSH_PERFCTL__MS1_SHIFT 4
#define RSH_PERFCTL__MS1_WIDTH 2
#define RSH_PERFCTL__MS1_RESET_VAL 0
#define RSH_PERFCTL__MS1_RMASK 0x3
#define RSH_PERFCTL__MS1_MASK  0x30
#define RSH_PERFCTL__MS1_FIELD 4,5
#define RSH_PERFCTL__MS1_VAL_Independent 0x0
#define RSH_PERFCTL__MS1_VAL_AND 0x1
#define RSH_PERFCTL__MS1_VAL_OR 0x2
#define RSH_PERFCTL__MS1_VAL_EXCL 0x3

#define RSH_PERFCTL__ACCM1_SHIFT 8
#define RSH_PERFCTL__ACCM1_WIDTH 3
#define RSH_PERFCTL__ACCM1_RESET_VAL 0
#define RSH_PERFCTL__ACCM1_RMASK 0x7
#define RSH_PERFCTL__ACCM1_MASK  0x700
#define RSH_PERFCTL__ACCM1_FIELD 8,10
#define RSH_PERFCTL__ACCM1_VAL_INC_TM 0x0
#define RSH_PERFCTL__ACCM1_VAL_INC_M 0x1
#define RSH_PERFCTL__ACCM1_VAL_ADDS 0x2
#define RSH_PERFCTL__ACCM1_VAL_ADDU 0x3
#define RSH_PERFCTL__ACCM1_VAL_SAMP 0x4
#define RSH_PERFCTL__ACCM1_VAL_MIN_DEC 0x5
#define RSH_PERFCTL__ACCM1_VAL_MAX_DEC 0x6
#define RSH_PERFCTL__ACCM1_VAL_FREE 0x7

#define RSH_PERFCTL__AD1_SHIFT 11
#define RSH_PERFCTL__AD1_WIDTH 1
#define RSH_PERFCTL__AD1_RESET_VAL 0
#define RSH_PERFCTL__AD1_RMASK 0x1
#define RSH_PERFCTL__AD1_MASK  0x800
#define RSH_PERFCTL__AD1_FIELD 11,11
#define RSH_PERFCTL__AD1_VAL_DISABLE 0x0
#define RSH_PERFCTL__AD1_VAL_ENABLE 0x1

#define RSH_PERFCTL__ETRIG1_SHIFT 12
#define RSH_PERFCTL__ETRIG1_WIDTH 2
#define RSH_PERFCTL__ETRIG1_RESET_VAL 0
#define RSH_PERFCTL__ETRIG1_RMASK 0x3
#define RSH_PERFCTL__ETRIG1_MASK  0x3000
#define RSH_PERFCTL__ETRIG1_FIELD 12,13
#define RSH_PERFCTL__ETRIG1_VAL_L_LVL 0x0
#define RSH_PERFCTL__ETRIG1_VAL_H_LVL 0x1
#define RSH_PERFCTL__ETRIG1_VAL_NEG_EDG 0x2
#define RSH_PERFCTL__ETRIG1_VAL_POS_EDG 0x3

#define RSH_PERFCTL__EB1_SHIFT 14
#define RSH_PERFCTL__EB1_WIDTH 1
#define RSH_PERFCTL__EB1_RESET_VAL 0
#define RSH_PERFCTL__EB1_RMASK 0x1
#define RSH_PERFCTL__EB1_MASK  0x4000
#define RSH_PERFCTL__EB1_FIELD 14,14
#define RSH_PERFCTL__EB1_VAL_DISABLE 0x0
#define RSH_PERFCTL__EB1_VAL_ENABLE 0x1

#define RSH_PERFCTL__EN1_SHIFT 15
#define RSH_PERFCTL__EN1_WIDTH 1
#define RSH_PERFCTL__EN1_RESET_VAL 0
#define RSH_PERFCTL__EN1_RMASK 0x1
#define RSH_PERFCTL__EN1_MASK  0x8000
#define RSH_PERFCTL__EN1_FIELD 15,15

#define RSH_PERFCTL__FM0_SHIFT 16
#define RSH_PERFCTL__FM0_WIDTH 3
#define RSH_PERFCTL__FM0_RESET_VAL 0
#define RSH_PERFCTL__FM0_RMASK 0x7
#define RSH_PERFCTL__FM0_MASK  0x70000
#define RSH_PERFCTL__FM0_FIELD 16,18
#define RSH_PERFCTL__FM0_VAL_Always 0x0
#define RSH_PERFCTL__FM0_VAL_Never 0x1
#define RSH_PERFCTL__FM0_VAL_EQ 0x2
#define RSH_PERFCTL__FM0_VAL_NEQ 0x3
#define RSH_PERFCTL__FM0_VAL_GEQS 0x4
#define RSH_PERFCTL__FM0_VAL_LTS 0x5
#define RSH_PERFCTL__FM0_VAL_GEQU 0x6
#define RSH_PERFCTL__FM0_VAL_LTU 0x7

#define RSH_PERFCTL__MS0_SHIFT 20
#define RSH_PERFCTL__MS0_WIDTH 2
#define RSH_PERFCTL__MS0_RESET_VAL 0
#define RSH_PERFCTL__MS0_RMASK 0x3
#define RSH_PERFCTL__MS0_MASK  0x300000
#define RSH_PERFCTL__MS0_FIELD 20,21
#define RSH_PERFCTL__MS0_VAL_Independent 0x0
#define RSH_PERFCTL__MS0_VAL_AND 0x1
#define RSH_PERFCTL__MS0_VAL_OR 0x2
#define RSH_PERFCTL__MS0_VAL_EXCL 0x3

#define RSH_PERFCTL__ACCM0_SHIFT 24
#define RSH_PERFCTL__ACCM0_WIDTH 3
#define RSH_PERFCTL__ACCM0_RESET_VAL 0
#define RSH_PERFCTL__ACCM0_RMASK 0x7
#define RSH_PERFCTL__ACCM0_MASK  0x7000000
#define RSH_PERFCTL__ACCM0_FIELD 24,26
#define RSH_PERFCTL__ACCM0_VAL_INC_TM 0x0
#define RSH_PERFCTL__ACCM0_VAL_INC_M 0x1
#define RSH_PERFCTL__ACCM0_VAL_ADDS 0x2
#define RSH_PERFCTL__ACCM0_VAL_ADDU 0x3
#define RSH_PERFCTL__ACCM0_VAL_SAMP 0x4
#define RSH_PERFCTL__ACCM0_VAL_MIN_DEC 0x5
#define RSH_PERFCTL__ACCM0_VAL_MAX_DEC 0x6
#define RSH_PERFCTL__ACCM0_VAL_FREE 0x7

#define RSH_PERFCTL__AD0_SHIFT 27
#define RSH_PERFCTL__AD0_WIDTH 1
#define RSH_PERFCTL__AD0_RESET_VAL 0
#define RSH_PERFCTL__AD0_RMASK 0x1
#define RSH_PERFCTL__AD0_MASK  0x8000000
#define RSH_PERFCTL__AD0_FIELD 27,27
#define RSH_PERFCTL__AD0_VAL_DISABLE 0x0
#define RSH_PERFCTL__AD0_VAL_ENABLE 0x1

#define RSH_PERFCTL__ETRIG0_SHIFT 28
#define RSH_PERFCTL__ETRIG0_WIDTH 2
#define RSH_PERFCTL__ETRIG0_RESET_VAL 0
#define RSH_PERFCTL__ETRIG0_RMASK 0x3
#define RSH_PERFCTL__ETRIG0_MASK  0x30000000
#define RSH_PERFCTL__ETRIG0_FIELD 28,29
#define RSH_PERFCTL__ETRIG0_VAL_L_LVL 0x0
#define RSH_PERFCTL__ETRIG0_VAL_H_LVL 0x1
#define RSH_PERFCTL__ETRIG0_VAL_NEG_EDG 0x2
#define RSH_PERFCTL__ETRIG0_VAL_POS_EDG 0x3

#define RSH_PERFCTL__EB0_SHIFT 30
#define RSH_PERFCTL__EB0_WIDTH 1
#define RSH_PERFCTL__EB0_RESET_VAL 0
#define RSH_PERFCTL__EB0_RMASK 0x1
#define RSH_PERFCTL__EB0_MASK  0x40000000
#define RSH_PERFCTL__EB0_FIELD 30,30
#define RSH_PERFCTL__EB0_VAL_DISABLE 0x0
#define RSH_PERFCTL__EB0_VAL_ENABLE 0x1

#define RSH_PERFCTL__EN0_SHIFT 31
#define RSH_PERFCTL__EN0_WIDTH 1
#define RSH_PERFCTL__EN0_RESET_VAL 0
#define RSH_PERFCTL__EN0_RMASK 0x1
#define RSH_PERFCTL__EN0_MASK  0x80000000
#define RSH_PERFCTL__EN0_FIELD 31,31


/*
 * Performance Event Selection Register.
 * The performance event selection register controls multiplexing logic at
 * the block level
 */
#define RSH_PERFEVT 0x00c0
#define RSH_PERFEVT__LENGTH 0x0001

#define RSH_PERFEVT__PVALSEL_SHIFT 16
#define RSH_PERFEVT__PVALSEL_WIDTH 4
#define RSH_PERFEVT__PVALSEL_RESET_VAL 0
#define RSH_PERFEVT__PVALSEL_RMASK 0xf
#define RSH_PERFEVT__PVALSEL_MASK  0xf0000
#define RSH_PERFEVT__PVALSEL_FIELD 16,19
#define RSH_PERFEVT__PVALSEL_VAL_AW_LAT 0x0
#define RSH_PERFEVT__PVALSEL_VAL_AR_LAT 0x1
#define RSH_PERFEVT__PVALSEL_VAL_TXREQ_FLIT 0x2

#define RSH_PERFEVT__MODSEL_SHIFT 20
#define RSH_PERFEVT__MODSEL_WIDTH 4
#define RSH_PERFEVT__MODSEL_RESET_VAL 0
#define RSH_PERFEVT__MODSEL_RMASK 0xf
#define RSH_PERFEVT__MODSEL_MASK  0xf00000
#define RSH_PERFEVT__MODSEL_FIELD 20,23

#define RSH_PERFEVT__EVTSEL_SHIFT 24
#define RSH_PERFEVT__EVTSEL_WIDTH 8
#define RSH_PERFEVT__EVTSEL_RESET_VAL 0
#define RSH_PERFEVT__EVTSEL_RMASK 0xff
#define RSH_PERFEVT__EVTSEL_MASK  0xff000000
#define RSH_PERFEVT__EVTSEL_FIELD 24,31
#define RSH_PERFEVT__EVTSEL_VAL_AW_REQ 0x0
#define RSH_PERFEVT__EVTSEL_VAL_AW_BEATS 0x1
#define RSH_PERFEVT__EVTSEL_VAL_AW_TRANS 0x2
#define RSH_PERFEVT__EVTSEL_VAL_AW_RESP 0x3
#define RSH_PERFEVT__EVTSEL_VAL_AW_STL 0x4
#define RSH_PERFEVT__EVTSEL_VAL_AW_LAT 0x5
#define RSH_PERFEVT__EVTSEL_VAL_AW_REQ_TBU 0x6
#define RSH_PERFEVT__EVTSEL_VAL_AR_REQ 0x8
#define RSH_PERFEVT__EVTSEL_VAL_AR_BEATS 0x9
#define RSH_PERFEVT__EVTSEL_VAL_AR_TRANS 0xa
#define RSH_PERFEVT__EVTSEL_VAL_AR_STL 0xb
#define RSH_PERFEVT__EVTSEL_VAL_AR_LAT 0xc
#define RSH_PERFEVT__EVTSEL_VAL_AR_REQ_TBU 0xd
#define RSH_PERFEVT__EVTSEL_VAL_TBU_MISS 0xe
#define RSH_PERFEVT__EVTSEL_VAL_TX_DAT_AF 0xf
#define RSH_PERFEVT__EVTSEL_VAL_RX_DAT_AF 0x10
#define RSH_PERFEVT__EVTSEL_VAL_RETRYQ_CRED 0x11
#define RSH_PERFEVT__EVTSEL_VAL_CDN_REQ 0x12
#define RSH_PERFEVT__EVTSEL_VAL_DDN_REQ 0x13
#define RSH_PERFEVT__EVTSEL_VAL_NDN_REQ 0x14
#define RSH_PERFEVT__EVTSEL_VAL_CDN_DIAG_N_OUT_OF_CRED 0x15
#define RSH_PERFEVT__EVTSEL_VAL_CDN_DIAG_S_OUT_OF_CRED 0x16
#define RSH_PERFEVT__EVTSEL_VAL_CDN_DIAG_E_OUT_OF_CRED 0x17
#define RSH_PERFEVT__EVTSEL_VAL_CDN_DIAG_W_OUT_OF_CRED 0x18
#define RSH_PERFEVT__EVTSEL_VAL_CDN_DIAG_C_OUT_OF_CRED 0x19
#define RSH_PERFEVT__EVTSEL_VAL_CDN_DIAG_N_EGRESS 0x1a
#define RSH_PERFEVT__EVTSEL_VAL_CDN_DIAG_S_EGRESS 0x1b
#define RSH_PERFEVT__EVTSEL_VAL_CDN_DIAG_E_EGRESS 0x1c
#define RSH_PERFEVT__EVTSEL_VAL_CDN_DIAG_W_EGRESS 0x1d
#define RSH_PERFEVT__EVTSEL_VAL_CDN_DIAG_C_EGRESS 0x1e
#define RSH_PERFEVT__EVTSEL_VAL_CDN_DIAG_N_INGRESS 0x1f
#define RSH_PERFEVT__EVTSEL_VAL_CDN_DIAG_S_INGRESS 0x20
#define RSH_PERFEVT__EVTSEL_VAL_CDN_DIAG_E_INGRESS 0x21
#define RSH_PERFEVT__EVTSEL_VAL_CDN_DIAG_W_INGRESS 0x22
#define RSH_PERFEVT__EVTSEL_VAL_CDN_DIAG_C_INGRESS 0x23
#define RSH_PERFEVT__EVTSEL_VAL_CDN_DIAG_CORE_SENT 0x24
#define RSH_PERFEVT__EVTSEL_VAL_DDN_DIAG_N_OUT_OF_CRED 0x25
#define RSH_PERFEVT__EVTSEL_VAL_DDN_DIAG_S_OUT_OF_CRED 0x26
#define RSH_PERFEVT__EVTSEL_VAL_DDN_DIAG_E_OUT_OF_CRED 0x27
#define RSH_PERFEVT__EVTSEL_VAL_DDN_DIAG_W_OUT_OF_CRED 0x28
#define RSH_PERFEVT__EVTSEL_VAL_DDN_DIAG_C_OUT_OF_CRED 0x29
#define RSH_PERFEVT__EVTSEL_VAL_DDN_DIAG_N_EGRESS 0x2a
#define RSH_PERFEVT__EVTSEL_VAL_DDN_DIAG_S_EGRESS 0x2b
#define RSH_PERFEVT__EVTSEL_VAL_DDN_DIAG_E_EGRESS 0x2c
#define RSH_PERFEVT__EVTSEL_VAL_DDN_DIAG_W_EGRESS 0x2d
#define RSH_PERFEVT__EVTSEL_VAL_DDN_DIAG_C_EGRESS 0x2e
#define RSH_PERFEVT__EVTSEL_VAL_DDN_DIAG_N_INGRESS 0x2f
#define RSH_PERFEVT__EVTSEL_VAL_DDN_DIAG_S_INGRESS 0x30
#define RSH_PERFEVT__EVTSEL_VAL_DDN_DIAG_E_INGRESS 0x31
#define RSH_PERFEVT__EVTSEL_VAL_DDN_DIAG_W_INGRESS 0x32
#define RSH_PERFEVT__EVTSEL_VAL_DDN_DIAG_C_INGRESS 0x33
#define RSH_PERFEVT__EVTSEL_VAL_DDN_DIAG_CORE_SENT 0x34
#define RSH_PERFEVT__EVTSEL_VAL_NDN_DIAG_N_OUT_OF_CRED 0x35
#define RSH_PERFEVT__EVTSEL_VAL_NDN_DIAG_S_OUT_OF_CRED 0x36
#define RSH_PERFEVT__EVTSEL_VAL_NDN_DIAG_E_OUT_OF_CRED 0x37
#define RSH_PERFEVT__EVTSEL_VAL_NDN_DIAG_W_OUT_OF_CRED 0x38
#define RSH_PERFEVT__EVTSEL_VAL_NDN_DIAG_C_OUT_OF_CRED 0x39
#define RSH_PERFEVT__EVTSEL_VAL_NDN_DIAG_N_EGRESS 0x3a
#define RSH_PERFEVT__EVTSEL_VAL_NDN_DIAG_S_EGRESS 0x3b
#define RSH_PERFEVT__EVTSEL_VAL_NDN_DIAG_E_EGRESS 0x3c
#define RSH_PERFEVT__EVTSEL_VAL_NDN_DIAG_W_EGRESS 0x3d
#define RSH_PERFEVT__EVTSEL_VAL_NDN_DIAG_C_EGRESS 0x3e
#define RSH_PERFEVT__EVTSEL_VAL_NDN_DIAG_N_INGRESS 0x3f
#define RSH_PERFEVT__EVTSEL_VAL_NDN_DIAG_S_INGRESS 0x40
#define RSH_PERFEVT__EVTSEL_VAL_NDN_DIAG_E_INGRESS 0x41
#define RSH_PERFEVT__EVTSEL_VAL_NDN_DIAG_W_INGRESS 0x42
#define RSH_PERFEVT__EVTSEL_VAL_NDN_DIAG_C_INGRESS 0x43
#define RSH_PERFEVT__EVTSEL_VAL_NDN_DIAG_CORE_SENT 0x44
#define RSH_PERFEVT__EVTSEL_VAL_HNF_REQUESTS 0x45
#define RSH_PERFEVT__EVTSEL_VAL_HNF_REJECTS 0x46
#define RSH_PERFEVT__EVTSEL_VAL_ALL_BUSY 0x47
#define RSH_PERFEVT__EVTSEL_VAL_MAF_BUSY 0x48
#define RSH_PERFEVT__EVTSEL_VAL_MAF_REQUESTS 0x49
#define RSH_PERFEVT__EVTSEL_VAL_RNF_REQUESTS 0x4a
#define RSH_PERFEVT__EVTSEL_VAL_REQUEST_TYPE 0x4b
#define RSH_PERFEVT__EVTSEL_VAL_MEMORY_READS 0x4c
#define RSH_PERFEVT__EVTSEL_VAL_MEMORY_WRITES 0x4d
#define RSH_PERFEVT__EVTSEL_VAL_VICTIM_WRITE 0x4e
#define RSH_PERFEVT__EVTSEL_VAL_POC_FULL 0x4f
#define RSH_PERFEVT__EVTSEL_VAL_POC_FAIL 0x50
#define RSH_PERFEVT__EVTSEL_VAL_POC_SUCCESS 0x51
#define RSH_PERFEVT__EVTSEL_VAL_POC_WRITES 0x52
#define RSH_PERFEVT__EVTSEL_VAL_POC_READS 0x53
#define RSH_PERFEVT__EVTSEL_VAL_FORWARD 0x54
#define RSH_PERFEVT__EVTSEL_VAL_RXREQ_HNF 0x55
#define RSH_PERFEVT__EVTSEL_VAL_RXRSP_HNF 0x56
#define RSH_PERFEVT__EVTSEL_VAL_RXDAT_HNF 0x57
#define RSH_PERFEVT__EVTSEL_VAL_TXREQ_HNF 0x58
#define RSH_PERFEVT__EVTSEL_VAL_TXRSP_HNF 0x59
#define RSH_PERFEVT__EVTSEL_VAL_TXDAT_HNF 0x5a
#define RSH_PERFEVT__EVTSEL_VAL_TXSNP_HNF 0x5b
#define RSH_PERFEVT__EVTSEL_VAL_INDEX_MATCH 0x5c
#define RSH_PERFEVT__EVTSEL_VAL_A72_ACCESS 0x5d
#define RSH_PERFEVT__EVTSEL_VAL_IO_ACCESS 0x5e
#define RSH_PERFEVT__EVTSEL_VAL_TSO_WRITE 0x5f
#define RSH_PERFEVT__EVTSEL_VAL_TSO_CONFLICT 0x60
#define RSH_PERFEVT__EVTSEL_VAL_DIR_HIT 0x61
#define RSH_PERFEVT__EVTSEL_VAL_HNF_ACCEPTS 0x62
#define RSH_PERFEVT__EVTSEL_VAL_REQ_BUF_EMPTY 0x63
#define RSH_PERFEVT__EVTSEL_VAL_REQ_BUF_IDLE_MAF 0x64
#define RSH_PERFEVT__EVTSEL_VAL_TSO_NOARB 0x65
#define RSH_PERFEVT__EVTSEL_VAL_TSO_NOARB_CYCLES 0x66
#define RSH_PERFEVT__EVTSEL_VAL_MSS_NO_CREDIT 0x67
#define RSH_PERFEVT__EVTSEL_VAL_TXDAT_NO_LCRD 0x68
#define RSH_PERFEVT__EVTSEL_VAL_TXSNP_NO_LCRD 0x69
#define RSH_PERFEVT__EVTSEL_VAL_TXRSP_NO_LCRD 0x6a
#define RSH_PERFEVT__EVTSEL_VAL_TXREQ_NO_LCRD 0x6b
#define RSH_PERFEVT__EVTSEL_VAL_TSO_CL_MATCH 0x6c
#define RSH_PERFEVT__EVTSEL_VAL_MEMORY_READS_BYPASS 0x6d
#define RSH_PERFEVT__EVTSEL_VAL_TSO_NOARB_TIMEOUT 0x6e
#define RSH_PERFEVT__EVTSEL_VAL_ALLOCATE 0x6f
#define RSH_PERFEVT__EVTSEL_VAL_VICTIM 0x70
#define RSH_PERFEVT__EVTSEL_VAL_A72_WRITE 0x71
#define RSH_PERFEVT__EVTSEL_VAL_A72_Read 0x72
#define RSH_PERFEVT__EVTSEL_VAL_IO_WRITE 0x73
#define RSH_PERFEVT__EVTSEL_VAL_IO_Reads 0x74
#define RSH_PERFEVT__EVTSEL_VAL_TSO_Reject 0x75
#define RSH_PERFEVT__EVTSEL_VAL_TXREQ_RN 0x80
#define RSH_PERFEVT__EVTSEL_VAL_TXRSP_RN 0x81
#define RSH_PERFEVT__EVTSEL_VAL_TXDAT_RN 0x82
#define RSH_PERFEVT__EVTSEL_VAL_RXSNP_RN 0x83
#define RSH_PERFEVT__EVTSEL_VAL_RXRSP_RN 0x84
#define RSH_PERFEVT__EVTSEL_VAL_RXDAT_RN 0x85
#define RSH_PERFEVT__EVTSEL_VAL_TPIO_DATA_BEAT 0xa0
#define RSH_PERFEVT__EVTSEL_VAL_TDMA_DATA_BEAT 0xa1
#define RSH_PERFEVT__EVTSEL_VAL_MAP_DATA_BEAT 0xa2
#define RSH_PERFEVT__EVTSEL_VAL_TXMSG_DATA_BEAT 0xa3
#define RSH_PERFEVT__EVTSEL_VAL_TPIO_DATA_PACKET 0xa4
#define RSH_PERFEVT__EVTSEL_VAL_TDMA_DATA_PACKET 0xa5
#define RSH_PERFEVT__EVTSEL_VAL_MAP_DATA_PACKET 0xa6
#define RSH_PERFEVT__EVTSEL_VAL_TXMSG_DATA_PACKET 0xa7
#define RSH_PERFEVT__EVTSEL_VAL_TDMA_RT_AF 0xa8
#define RSH_PERFEVT__EVTSEL_VAL_TDMA_PBUF_MAC_AF 0xa9
#define RSH_PERFEVT__EVTSEL_VAL_TRIO_MAP_WRQ_BUF_EMPTY 0xaa
#define RSH_PERFEVT__EVTSEL_VAL_TRIO_MAP_CPL_BUF_EMPTY 0xab
#define RSH_PERFEVT__EVTSEL_VAL_TRIO_MAP_RDQ0_BUF_EMPTY 0xac
#define RSH_PERFEVT__EVTSEL_VAL_TRIO_MAP_RDQ1_BUF_EMPTY 0xad
#define RSH_PERFEVT__EVTSEL_VAL_TRIO_MAP_RDQ2_BUF_EMPTY 0xae
#define RSH_PERFEVT__EVTSEL_VAL_TRIO_MAP_RDQ3_BUF_EMPTY 0xaf
#define RSH_PERFEVT__EVTSEL_VAL_TRIO_MAP_RDQ4_BUF_EMPTY 0xb0
#define RSH_PERFEVT__EVTSEL_VAL_TRIO_MAP_RDQ5_BUF_EMPTY 0xb1
#define RSH_PERFEVT__EVTSEL_VAL_TRIO_MAP_RDQ6_BUF_EMPTY 0xb2
#define RSH_PERFEVT__EVTSEL_VAL_TRIO_MAP_RDQ7_BUF_EMPTY 0xb3
#define RSH_PERFEVT__EVTSEL_VAL_RXREQ_MSS 0xc0
#define RSH_PERFEVT__EVTSEL_VAL_RXDAT_MSS 0xc1
#define RSH_PERFEVT__EVTSEL_VAL_TXRSP_MSS 0xc2
#define RSH_PERFEVT__EVTSEL_VAL_TXDAT_MSS 0xc3


/*
 * Performance Value Extraction Register.
 * The performance value extraction register extracts two 56-bit values out
 * of PVAL with bitwise offset and width control
 */
#define RSH_PERFVALEXT 0x00c0
#define RSH_PERFVALEXT__LENGTH 0x0001

#define RSH_PERFVALEXT__VOFS1_SHIFT 0
#define RSH_PERFVALEXT__VOFS1_WIDTH 7
#define RSH_PERFVALEXT__VOFS1_RESET_VAL 0
#define RSH_PERFVALEXT__VOFS1_RMASK 0x7f
#define RSH_PERFVALEXT__VOFS1_MASK  0x7f
#define RSH_PERFVALEXT__VOFS1_FIELD 0,6

#define RSH_PERFVALEXT__VLEN1_SHIFT 8
#define RSH_PERFVALEXT__VLEN1_WIDTH 6
#define RSH_PERFVALEXT__VLEN1_RESET_VAL 0
#define RSH_PERFVALEXT__VLEN1_RMASK 0x3f
#define RSH_PERFVALEXT__VLEN1_MASK  0x3f00
#define RSH_PERFVALEXT__VLEN1_FIELD 8,13

#define RSH_PERFVALEXT__VOFS0_SHIFT 16
#define RSH_PERFVALEXT__VOFS0_WIDTH 7
#define RSH_PERFVALEXT__VOFS0_RESET_VAL 0
#define RSH_PERFVALEXT__VOFS0_RMASK 0x7f
#define RSH_PERFVALEXT__VOFS0_MASK  0x7f0000
#define RSH_PERFVALEXT__VOFS0_FIELD 16,22

#define RSH_PERFVALEXT__VLEN0_SHIFT 24
#define RSH_PERFVALEXT__VLEN0_WIDTH 6
#define RSH_PERFVALEXT__VLEN0_RESET_VAL 0
#define RSH_PERFVALEXT__VLEN0_RMASK 0x3f
#define RSH_PERFVALEXT__VLEN0_MASK  0x3f000000
#define RSH_PERFVALEXT__VLEN0_FIELD 24,29


/*
 * Performance Accumulator 0 Register.
 * This register enable both reading and updating the 32-bit value
 * accumulated by accumulator 0.
 */
#define RSH_PERFACC0 0x00c0
#define RSH_PERFACC0__LENGTH 0x0001

#define RSH_PERFACC0__ACC_SHIFT 0
#define RSH_PERFACC0__ACC_WIDTH 56
#define RSH_PERFACC0__ACC_RESET_VAL 0
#define RSH_PERFACC0__ACC_RMASK _64bit(0xffffffffffffff)
#define RSH_PERFACC0__ACC_MASK  _64bit(0xffffffffffffff)
#define RSH_PERFACC0__ACC_FIELD 0,55


/*
 * Performance Accumulator 1 Register.
 * This register enable both reading and updating the 32-bit value
 * accumulated by accumulator 1.
 */
#define RSH_PERFACC1 0x00c0
#define RSH_PERFACC1__LENGTH 0x0001

#define RSH_PERFACC1__ACC_SHIFT 0
#define RSH_PERFACC1__ACC_WIDTH 56
#define RSH_PERFACC1__ACC_RESET_VAL 0
#define RSH_PERFACC1__ACC_RMASK _64bit(0xffffffffffffff)
#define RSH_PERFACC1__ACC_MASK  _64bit(0xffffffffffffff)
#define RSH_PERFACC1__ACC_FIELD 0,55


/*
 * Performance Match Value 0 Register.
 * This register provides up to 32-bit match to be compared with extracted
 * value 0 according to PERFCTL register configurations.
 */
#define RSH_PERFMVAL0 0x00c0
#define RSH_PERFMVAL0__LENGTH 0x0001

#define RSH_PERFMVAL0__MVAL_SHIFT 0
#define RSH_PERFMVAL0__MVAL_WIDTH 32
#define RSH_PERFMVAL0__MVAL_RESET_VAL 0
#define RSH_PERFMVAL0__MVAL_RMASK 0xffffffff
#define RSH_PERFMVAL0__MVAL_MASK  0xffffffff
#define RSH_PERFMVAL0__MVAL_FIELD 0,31


/*
 * Performance Match Value 1 Register.
 * This register provides up to 32-bit match to be compared with extracted
 * value 1 according to PERFCTL register configurations.
 */
#define RSH_PERFMVAL1 0x00c0
#define RSH_PERFMVAL1__LENGTH 0x0001

#define RSH_PERFMVAL1__MVAL_SHIFT 0
#define RSH_PERFMVAL1__MVAL_WIDTH 32
#define RSH_PERFMVAL1__MVAL_RESET_VAL 0
#define RSH_PERFMVAL1__MVAL_RMASK 0xffffffff
#define RSH_PERFMVAL1__MVAL_MASK  0xffffffff
#define RSH_PERFMVAL1__MVAL_FIELD 0,31


/*
 * Rev ID.
 * Tile Revision
 */
#define RSH_REV_ID 0x0100
#define RSH_REV_ID__LENGTH 0x0001

#define RSH_REV_ID__TILE_REV_ID_SHIFT 0
#define RSH_REV_ID__TILE_REV_ID_WIDTH 8
#define RSH_REV_ID__TILE_REV_ID_RMASK 0xff
#define RSH_REV_ID__TILE_REV_ID_MASK  0xff
#define RSH_REV_ID__TILE_REV_ID_FIELD 0,7
#define RSH_REV_ID__TILE_REV_ID_VAL_TILE64 0x0
#define RSH_REV_ID__TILE_REV_ID_VAL_TILEPRO 0x10
#define RSH_REV_ID__TILE_REV_ID_VAL_TILEGX 0x20

#define RSH_REV_ID__CHIP_REV_ID_SHIFT 8
#define RSH_REV_ID__CHIP_REV_ID_WIDTH 8
#define RSH_REV_ID__CHIP_REV_ID_RMASK 0xff
#define RSH_REV_ID__CHIP_REV_ID_MASK  0xff00
#define RSH_REV_ID__CHIP_REV_ID_FIELD 8,15
#define RSH_REV_ID__CHIP_REV_ID_VAL_TILE64 0x0
#define RSH_REV_ID__CHIP_REV_ID_VAL_TILEPRO 0x10
#define RSH_REV_ID__CHIP_REV_ID_VAL_TILEGX36 0x20
#define RSH_REV_ID__CHIP_REV_ID_VAL_TILEGX72 0x40


/*
 * Fabric Dimensions.
 * Indicates the size of the Tile Fabric and the location of the rshim.
 */
#define RSH_FABRIC_DIM 0x0110
#define RSH_FABRIC_DIM__LENGTH 0x0001

#define RSH_FABRIC_DIM__DIM_Y_SHIFT 0
#define RSH_FABRIC_DIM__DIM_Y_WIDTH 4
#define RSH_FABRIC_DIM__DIM_Y_RMASK 0xf
#define RSH_FABRIC_DIM__DIM_Y_MASK  0xf
#define RSH_FABRIC_DIM__DIM_Y_FIELD 0,3

#define RSH_FABRIC_DIM__DIM_X_SHIFT 4
#define RSH_FABRIC_DIM__DIM_X_WIDTH 4
#define RSH_FABRIC_DIM__DIM_X_RMASK 0xf
#define RSH_FABRIC_DIM__DIM_X_MASK  0xf0
#define RSH_FABRIC_DIM__DIM_X_FIELD 4,7

#define RSH_FABRIC_DIM__RSHIM_LOC_SHIFT 8
#define RSH_FABRIC_DIM__RSHIM_LOC_WIDTH 8
#define RSH_FABRIC_DIM__RSHIM_LOC_RMASK 0xff
#define RSH_FABRIC_DIM__RSHIM_LOC_MASK  0xff00
#define RSH_FABRIC_DIM__RSHIM_LOC_FIELD 8,15

#define RSH_FABRIC_DIM__DIM_Z_SHIFT 16
#define RSH_FABRIC_DIM__DIM_Z_WIDTH 4
#define RSH_FABRIC_DIM__DIM_Z_RMASK 0xf
#define RSH_FABRIC_DIM__DIM_Z_MASK  0xf0000
#define RSH_FABRIC_DIM__DIM_Z_FIELD 16,19


/*
 * Error Status.
 * Indicators for various fatal and non-fatal RSH error conditions
 */
#define RSH_ERROR_STATUS 0x0208
#define RSH_ERROR_STATUS__LENGTH 0x0001

#define RSH_ERROR_STATUS__MMIO_ILL_OPC_SHIFT 0
#define RSH_ERROR_STATUS__MMIO_ILL_OPC_WIDTH 1
#define RSH_ERROR_STATUS__MMIO_ILL_OPC_RESET_VAL 0
#define RSH_ERROR_STATUS__MMIO_ILL_OPC_RMASK 0x1
#define RSH_ERROR_STATUS__MMIO_ILL_OPC_MASK  0x1
#define RSH_ERROR_STATUS__MMIO_ILL_OPC_FIELD 0,0


/*
 * MMIO Error Information.
 * Provides diagnostics information when an MMIO error occurs.  Captured
 * whenever the MMIO_ERR interrupt condition occurs (typically due to size
 * error).
 */
#define RSH_MMIO_ERROR_INFO 0x0210
#define RSH_MMIO_ERROR_INFO__LENGTH 0x0001

#define RSH_MMIO_ERROR_INFO__SRC_SHIFT 0
#define RSH_MMIO_ERROR_INFO__SRC_WIDTH 8
#define RSH_MMIO_ERROR_INFO__SRC_RESET_VAL 0
#define RSH_MMIO_ERROR_INFO__SRC_RMASK 0xff
#define RSH_MMIO_ERROR_INFO__SRC_MASK  0xff
#define RSH_MMIO_ERROR_INFO__SRC_FIELD 0,7

#define RSH_MMIO_ERROR_INFO__SIZE_SHIFT 8
#define RSH_MMIO_ERROR_INFO__SIZE_WIDTH 4
#define RSH_MMIO_ERROR_INFO__SIZE_RESET_VAL 0
#define RSH_MMIO_ERROR_INFO__SIZE_RMASK 0xf
#define RSH_MMIO_ERROR_INFO__SIZE_MASK  0xf00
#define RSH_MMIO_ERROR_INFO__SIZE_FIELD 8,11

#define RSH_MMIO_ERROR_INFO__PA_SHIFT 12
#define RSH_MMIO_ERROR_INFO__PA_WIDTH 40
#define RSH_MMIO_ERROR_INFO__PA_RESET_VAL 0
#define RSH_MMIO_ERROR_INFO__PA_RMASK _64bit(0xffffffffff)
#define RSH_MMIO_ERROR_INFO__PA_MASK  _64bit(0xffffffffff000)
#define RSH_MMIO_ERROR_INFO__PA_FIELD 12,51

#define RSH_MMIO_ERROR_INFO__OPC_SHIFT 52
#define RSH_MMIO_ERROR_INFO__OPC_WIDTH 5
#define RSH_MMIO_ERROR_INFO__OPC_RESET_VAL 0
#define RSH_MMIO_ERROR_INFO__OPC_RMASK 0x1f
#define RSH_MMIO_ERROR_INFO__OPC_MASK  _64bit(0x1f0000000000000)
#define RSH_MMIO_ERROR_INFO__OPC_FIELD 52,56


/* Down Count Current Value. */
#define RSH_DOWN_COUNT_VALUE__FIRST_WORD 0x0700
#define RSH_DOWN_COUNT_VALUE__LAST_WORD 0x0730
#define RSH_DOWN_COUNT_VALUE__LENGTH 0x0048
#define RSH_DOWN_COUNT_VALUE__STRIDE 0x0018

#define RSH_DOWN_COUNT_VALUE__COUNT_SHIFT 0
#define RSH_DOWN_COUNT_VALUE__COUNT_WIDTH 48
#define RSH_DOWN_COUNT_VALUE__COUNT_RESET_VAL 0
#define RSH_DOWN_COUNT_VALUE__COUNT_RMASK _64bit(0xffffffffffff)
#define RSH_DOWN_COUNT_VALUE__COUNT_MASK  _64bit(0xffffffffffff)
#define RSH_DOWN_COUNT_VALUE__COUNT_FIELD 0,47


/* Down Count Current Value. */
#define RSH_DOWN_COUNT_VALUE_1__FIRST_WORD 0x0718
#define RSH_DOWN_COUNT_VALUE_1__LAST_WORD 0x0748
#define RSH_DOWN_COUNT_VALUE_1__LENGTH 0x0048
#define RSH_DOWN_COUNT_VALUE_1__STRIDE 0x0018

#define RSH_DOWN_COUNT_VALUE_1__COUNT_SHIFT 0
#define RSH_DOWN_COUNT_VALUE_1__COUNT_WIDTH 48
#define RSH_DOWN_COUNT_VALUE_1__COUNT_RESET_VAL 0
#define RSH_DOWN_COUNT_VALUE_1__COUNT_RMASK _64bit(0xffffffffffff)
#define RSH_DOWN_COUNT_VALUE_1__COUNT_MASK  _64bit(0xffffffffffff)
#define RSH_DOWN_COUNT_VALUE_1__COUNT_FIELD 0,47


/* Down Count Current Value. */
#define RSH_DOWN_COUNT_VALUE_2__FIRST_WORD 0x0730
#define RSH_DOWN_COUNT_VALUE_2__LAST_WORD 0x0760
#define RSH_DOWN_COUNT_VALUE_2__LENGTH 0x0048
#define RSH_DOWN_COUNT_VALUE_2__STRIDE 0x0018

#define RSH_DOWN_COUNT_VALUE_2__COUNT_SHIFT 0
#define RSH_DOWN_COUNT_VALUE_2__COUNT_WIDTH 48
#define RSH_DOWN_COUNT_VALUE_2__COUNT_RESET_VAL 0
#define RSH_DOWN_COUNT_VALUE_2__COUNT_RMASK _64bit(0xffffffffffff)
#define RSH_DOWN_COUNT_VALUE_2__COUNT_MASK  _64bit(0xffffffffffff)
#define RSH_DOWN_COUNT_VALUE_2__COUNT_FIELD 0,47


/* Down Count Refresh Value. */
#define RSH_DOWN_COUNT_REFRESH_VALUE__FIRST_WORD 0x0708
#define RSH_DOWN_COUNT_REFRESH_VALUE__LAST_WORD 0x0738
#define RSH_DOWN_COUNT_REFRESH_VALUE__LENGTH 0x0048
#define RSH_DOWN_COUNT_REFRESH_VALUE__STRIDE 0x0018

#define RSH_DOWN_COUNT_REFRESH_VALUE__REFRESH_SHIFT 0
#define RSH_DOWN_COUNT_REFRESH_VALUE__REFRESH_WIDTH 48
#define RSH_DOWN_COUNT_REFRESH_VALUE__REFRESH_RESET_VAL 0
#define RSH_DOWN_COUNT_REFRESH_VALUE__REFRESH_RMASK _64bit(0xffffffffffff)
#define RSH_DOWN_COUNT_REFRESH_VALUE__REFRESH_MASK  _64bit(0xffffffffffff)
#define RSH_DOWN_COUNT_REFRESH_VALUE__REFRESH_FIELD 0,47


/* Down Count Refresh Value. */
#define RSH_DOWN_COUNT_REFRESH_VALUE_1__FIRST_WORD 0x0720
#define RSH_DOWN_COUNT_REFRESH_VALUE_1__LAST_WORD 0x0750
#define RSH_DOWN_COUNT_REFRESH_VALUE_1__LENGTH 0x0048
#define RSH_DOWN_COUNT_REFRESH_VALUE_1__STRIDE 0x0018

#define RSH_DOWN_COUNT_REFRESH_VALUE_1__REFRESH_SHIFT 0
#define RSH_DOWN_COUNT_REFRESH_VALUE_1__REFRESH_WIDTH 48
#define RSH_DOWN_COUNT_REFRESH_VALUE_1__REFRESH_RESET_VAL 0
#define RSH_DOWN_COUNT_REFRESH_VALUE_1__REFRESH_RMASK _64bit(0xffffffffffff)
#define RSH_DOWN_COUNT_REFRESH_VALUE_1__REFRESH_MASK  _64bit(0xffffffffffff)
#define RSH_DOWN_COUNT_REFRESH_VALUE_1__REFRESH_FIELD 0,47


/* Down Count Refresh Value. */
#define RSH_DOWN_COUNT_REFRESH_VALUE_2__FIRST_WORD 0x0738
#define RSH_DOWN_COUNT_REFRESH_VALUE_2__LAST_WORD 0x0768
#define RSH_DOWN_COUNT_REFRESH_VALUE_2__LENGTH 0x0048
#define RSH_DOWN_COUNT_REFRESH_VALUE_2__STRIDE 0x0018

#define RSH_DOWN_COUNT_REFRESH_VALUE_2__REFRESH_SHIFT 0
#define RSH_DOWN_COUNT_REFRESH_VALUE_2__REFRESH_WIDTH 48
#define RSH_DOWN_COUNT_REFRESH_VALUE_2__REFRESH_RESET_VAL 0
#define RSH_DOWN_COUNT_REFRESH_VALUE_2__REFRESH_RMASK _64bit(0xffffffffffff)
#define RSH_DOWN_COUNT_REFRESH_VALUE_2__REFRESH_MASK  _64bit(0xffffffffffff)
#define RSH_DOWN_COUNT_REFRESH_VALUE_2__REFRESH_FIELD 0,47


/* Down Count Control. */
#define RSH_DOWN_COUNT_CONTROL__FIRST_WORD 0x0710
#define RSH_DOWN_COUNT_CONTROL__LAST_WORD 0x0740
#define RSH_DOWN_COUNT_CONTROL__LENGTH 0x0048
#define RSH_DOWN_COUNT_CONTROL__STRIDE 0x0018

#define RSH_DOWN_COUNT_CONTROL__ENA_SHIFT 0
#define RSH_DOWN_COUNT_CONTROL__ENA_WIDTH 1
#define RSH_DOWN_COUNT_CONTROL__ENA_RESET_VAL 0
#define RSH_DOWN_COUNT_CONTROL__ENA_RMASK 0x1
#define RSH_DOWN_COUNT_CONTROL__ENA_MASK  0x1
#define RSH_DOWN_COUNT_CONTROL__ENA_FIELD 0,0

#define RSH_DOWN_COUNT_CONTROL__MODE_SHIFT 1
#define RSH_DOWN_COUNT_CONTROL__MODE_WIDTH 2
#define RSH_DOWN_COUNT_CONTROL__MODE_RESET_VAL 0
#define RSH_DOWN_COUNT_CONTROL__MODE_RMASK 0x3
#define RSH_DOWN_COUNT_CONTROL__MODE_MASK  0x6
#define RSH_DOWN_COUNT_CONTROL__MODE_FIELD 1,2
#define RSH_DOWN_COUNT_CONTROL__MODE_VAL_CORE_REFCLK 0x0
#define RSH_DOWN_COUNT_CONTROL__MODE_VAL_POS_EXTCLK 0x1
#define RSH_DOWN_COUNT_CONTROL__MODE_VAL_NEG_EXTCLK 0x2
#define RSH_DOWN_COUNT_CONTROL__MODE_VAL_DDR_EXTCLK 0x3

#define RSH_DOWN_COUNT_CONTROL__PINSEL_SHIFT 3
#define RSH_DOWN_COUNT_CONTROL__PINSEL_WIDTH 2
#define RSH_DOWN_COUNT_CONTROL__PINSEL_RESET_VAL 0
#define RSH_DOWN_COUNT_CONTROL__PINSEL_RMASK 0x3
#define RSH_DOWN_COUNT_CONTROL__PINSEL_MASK  0x18
#define RSH_DOWN_COUNT_CONTROL__PINSEL_FIELD 3,4
#define RSH_DOWN_COUNT_CONTROL__PINSEL_VAL_TBD0 0x0
#define RSH_DOWN_COUNT_CONTROL__PINSEL_VAL_TBD1 0x1
#define RSH_DOWN_COUNT_CONTROL__PINSEL_VAL_TBD2 0x2

#define RSH_DOWN_COUNT_CONTROL__DIV_SHIFT 12
#define RSH_DOWN_COUNT_CONTROL__DIV_WIDTH 20
#define RSH_DOWN_COUNT_CONTROL__DIV_RESET_VAL 0
#define RSH_DOWN_COUNT_CONTROL__DIV_RMASK 0xfffff
#define RSH_DOWN_COUNT_CONTROL__DIV_MASK  0xfffff000
#define RSH_DOWN_COUNT_CONTROL__DIV_FIELD 12,31


/* Down Count Control. */
#define RSH_DOWN_COUNT_CONTROL_1__FIRST_WORD 0x0728
#define RSH_DOWN_COUNT_CONTROL_1__LAST_WORD 0x0758
#define RSH_DOWN_COUNT_CONTROL_1__LENGTH 0x0048
#define RSH_DOWN_COUNT_CONTROL_1__STRIDE 0x0018

#define RSH_DOWN_COUNT_CONTROL_1__ENA_SHIFT 0
#define RSH_DOWN_COUNT_CONTROL_1__ENA_WIDTH 1
#define RSH_DOWN_COUNT_CONTROL_1__ENA_RESET_VAL 0
#define RSH_DOWN_COUNT_CONTROL_1__ENA_RMASK 0x1
#define RSH_DOWN_COUNT_CONTROL_1__ENA_MASK  0x1
#define RSH_DOWN_COUNT_CONTROL_1__ENA_FIELD 0,0

#define RSH_DOWN_COUNT_CONTROL_1__MODE_SHIFT 1
#define RSH_DOWN_COUNT_CONTROL_1__MODE_WIDTH 2
#define RSH_DOWN_COUNT_CONTROL_1__MODE_RESET_VAL 0
#define RSH_DOWN_COUNT_CONTROL_1__MODE_RMASK 0x3
#define RSH_DOWN_COUNT_CONTROL_1__MODE_MASK  0x6
#define RSH_DOWN_COUNT_CONTROL_1__MODE_FIELD 1,2
#define RSH_DOWN_COUNT_CONTROL_1__MODE_VAL_CORE_REFCLK 0x0
#define RSH_DOWN_COUNT_CONTROL_1__MODE_VAL_POS_EXTCLK 0x1
#define RSH_DOWN_COUNT_CONTROL_1__MODE_VAL_NEG_EXTCLK 0x2
#define RSH_DOWN_COUNT_CONTROL_1__MODE_VAL_DDR_EXTCLK 0x3

#define RSH_DOWN_COUNT_CONTROL_1__PINSEL_SHIFT 3
#define RSH_DOWN_COUNT_CONTROL_1__PINSEL_WIDTH 2
#define RSH_DOWN_COUNT_CONTROL_1__PINSEL_RESET_VAL 0
#define RSH_DOWN_COUNT_CONTROL_1__PINSEL_RMASK 0x3
#define RSH_DOWN_COUNT_CONTROL_1__PINSEL_MASK  0x18
#define RSH_DOWN_COUNT_CONTROL_1__PINSEL_FIELD 3,4
#define RSH_DOWN_COUNT_CONTROL_1__PINSEL_VAL_TBD0 0x0
#define RSH_DOWN_COUNT_CONTROL_1__PINSEL_VAL_TBD1 0x1
#define RSH_DOWN_COUNT_CONTROL_1__PINSEL_VAL_TBD2 0x2

#define RSH_DOWN_COUNT_CONTROL_1__DIV_SHIFT 12
#define RSH_DOWN_COUNT_CONTROL_1__DIV_WIDTH 20
#define RSH_DOWN_COUNT_CONTROL_1__DIV_RESET_VAL 0
#define RSH_DOWN_COUNT_CONTROL_1__DIV_RMASK 0xfffff
#define RSH_DOWN_COUNT_CONTROL_1__DIV_MASK  0xfffff000
#define RSH_DOWN_COUNT_CONTROL_1__DIV_FIELD 12,31


/* Down Count Control. */
#define RSH_DOWN_COUNT_CONTROL_2__FIRST_WORD 0x0740
#define RSH_DOWN_COUNT_CONTROL_2__LAST_WORD 0x0770
#define RSH_DOWN_COUNT_CONTROL_2__LENGTH 0x0048
#define RSH_DOWN_COUNT_CONTROL_2__STRIDE 0x0018

#define RSH_DOWN_COUNT_CONTROL_2__ENA_SHIFT 0
#define RSH_DOWN_COUNT_CONTROL_2__ENA_WIDTH 1
#define RSH_DOWN_COUNT_CONTROL_2__ENA_RESET_VAL 0
#define RSH_DOWN_COUNT_CONTROL_2__ENA_RMASK 0x1
#define RSH_DOWN_COUNT_CONTROL_2__ENA_MASK  0x1
#define RSH_DOWN_COUNT_CONTROL_2__ENA_FIELD 0,0

#define RSH_DOWN_COUNT_CONTROL_2__MODE_SHIFT 1
#define RSH_DOWN_COUNT_CONTROL_2__MODE_WIDTH 2
#define RSH_DOWN_COUNT_CONTROL_2__MODE_RESET_VAL 0
#define RSH_DOWN_COUNT_CONTROL_2__MODE_RMASK 0x3
#define RSH_DOWN_COUNT_CONTROL_2__MODE_MASK  0x6
#define RSH_DOWN_COUNT_CONTROL_2__MODE_FIELD 1,2
#define RSH_DOWN_COUNT_CONTROL_2__MODE_VAL_CORE_REFCLK 0x0
#define RSH_DOWN_COUNT_CONTROL_2__MODE_VAL_POS_EXTCLK 0x1
#define RSH_DOWN_COUNT_CONTROL_2__MODE_VAL_NEG_EXTCLK 0x2
#define RSH_DOWN_COUNT_CONTROL_2__MODE_VAL_DDR_EXTCLK 0x3

#define RSH_DOWN_COUNT_CONTROL_2__PINSEL_SHIFT 3
#define RSH_DOWN_COUNT_CONTROL_2__PINSEL_WIDTH 2
#define RSH_DOWN_COUNT_CONTROL_2__PINSEL_RESET_VAL 0
#define RSH_DOWN_COUNT_CONTROL_2__PINSEL_RMASK 0x3
#define RSH_DOWN_COUNT_CONTROL_2__PINSEL_MASK  0x18
#define RSH_DOWN_COUNT_CONTROL_2__PINSEL_FIELD 3,4
#define RSH_DOWN_COUNT_CONTROL_2__PINSEL_VAL_TBD0 0x0
#define RSH_DOWN_COUNT_CONTROL_2__PINSEL_VAL_TBD1 0x1
#define RSH_DOWN_COUNT_CONTROL_2__PINSEL_VAL_TBD2 0x2

#define RSH_DOWN_COUNT_CONTROL_2__DIV_SHIFT 12
#define RSH_DOWN_COUNT_CONTROL_2__DIV_WIDTH 20
#define RSH_DOWN_COUNT_CONTROL_2__DIV_RESET_VAL 0
#define RSH_DOWN_COUNT_CONTROL_2__DIV_RMASK 0xfffff
#define RSH_DOWN_COUNT_CONTROL_2__DIV_MASK  0xfffff000
#define RSH_DOWN_COUNT_CONTROL_2__DIV_FIELD 12,31


/*
 * Power Threshold.
 * Control dynamic power management.
 */
#define RSH_POWER_THRESHOLD 0x04b0
#define RSH_POWER_THRESHOLD__LENGTH 0x0001

#define RSH_POWER_THRESHOLD__CURR_PWR_SHIFT 0
#define RSH_POWER_THRESHOLD__CURR_PWR_WIDTH 4
#define RSH_POWER_THRESHOLD__CURR_PWR_RESET_VAL 0
#define RSH_POWER_THRESHOLD__CURR_PWR_RMASK 0xf
#define RSH_POWER_THRESHOLD__CURR_PWR_MASK  0xf
#define RSH_POWER_THRESHOLD__CURR_PWR_FIELD 0,3

#define RSH_POWER_THRESHOLD__HIGH_SHIFT 4
#define RSH_POWER_THRESHOLD__HIGH_WIDTH 4
#define RSH_POWER_THRESHOLD__HIGH_RESET_VAL 0
#define RSH_POWER_THRESHOLD__HIGH_RMASK 0xf
#define RSH_POWER_THRESHOLD__HIGH_MASK  0xf0
#define RSH_POWER_THRESHOLD__HIGH_FIELD 4,7

#define RSH_POWER_THRESHOLD__ALARM_SHIFT 8
#define RSH_POWER_THRESHOLD__ALARM_WIDTH 4
#define RSH_POWER_THRESHOLD__ALARM_RESET_VAL 0
#define RSH_POWER_THRESHOLD__ALARM_RMASK 0xf
#define RSH_POWER_THRESHOLD__ALARM_MASK  0xf00
#define RSH_POWER_THRESHOLD__ALARM_FIELD 8,11

#define RSH_POWER_THRESHOLD__HYST_TMR_A_SHIFT 12
#define RSH_POWER_THRESHOLD__HYST_TMR_A_WIDTH 3
#define RSH_POWER_THRESHOLD__HYST_TMR_A_RESET_VAL 0
#define RSH_POWER_THRESHOLD__HYST_TMR_A_RMASK 0x7
#define RSH_POWER_THRESHOLD__HYST_TMR_A_MASK  0x7000
#define RSH_POWER_THRESHOLD__HYST_TMR_A_FIELD 12,14
#define RSH_POWER_THRESHOLD__HYST_TMR_A_VAL_TMR_MIN 0x0
#define RSH_POWER_THRESHOLD__HYST_TMR_A_VAL_TMR_100NS 0x1
#define RSH_POWER_THRESHOLD__HYST_TMR_A_VAL_TMR_1US 0x2
#define RSH_POWER_THRESHOLD__HYST_TMR_A_VAL_TMR_10US 0x3
#define RSH_POWER_THRESHOLD__HYST_TMR_A_VAL_TMR_100US 0x4

#define RSH_POWER_THRESHOLD__HYST_TMR_B_SHIFT 16
#define RSH_POWER_THRESHOLD__HYST_TMR_B_WIDTH 3
#define RSH_POWER_THRESHOLD__HYST_TMR_B_RESET_VAL 2
#define RSH_POWER_THRESHOLD__HYST_TMR_B_RMASK 0x7
#define RSH_POWER_THRESHOLD__HYST_TMR_B_MASK  0x70000
#define RSH_POWER_THRESHOLD__HYST_TMR_B_FIELD 16,18
#define RSH_POWER_THRESHOLD__HYST_TMR_B_VAL_TMR_MIN 0x0
#define RSH_POWER_THRESHOLD__HYST_TMR_B_VAL_TMR_100NS 0x1
#define RSH_POWER_THRESHOLD__HYST_TMR_B_VAL_TMR_1US 0x2
#define RSH_POWER_THRESHOLD__HYST_TMR_B_VAL_TMR_10US 0x3
#define RSH_POWER_THRESHOLD__HYST_TMR_B_VAL_TMR_100US 0x4


/*
 * Alternate Clock Selection.
 * Selects the source for the core clock.
 */
#define RSH_ALT_CLOCK_SEL 0x04b8
#define RSH_ALT_CLOCK_SEL__LENGTH 0x0001

#define RSH_ALT_CLOCK_SEL__SEL_SHIFT 0
#define RSH_ALT_CLOCK_SEL__SEL_WIDTH 2
#define RSH_ALT_CLOCK_SEL__SEL_RESET_VAL 1
#define RSH_ALT_CLOCK_SEL__SEL_RMASK 0x3
#define RSH_ALT_CLOCK_SEL__SEL_MASK  0x3
#define RSH_ALT_CLOCK_SEL__SEL_FIELD 0,1
#define RSH_ALT_CLOCK_SEL__SEL_VAL_REF 0x0
#define RSH_ALT_CLOCK_SEL__SEL_VAL_MAIN 0x1
#define RSH_ALT_CLOCK_SEL__SEL_VAL_ALT 0x2
#define RSH_ALT_CLOCK_SEL__SEL_VAL_AUTO 0x3


/* Reset Control. */
#define RSH_RESET_CONTROL 0x0500
#define RSH_RESET_CONTROL__LENGTH 0x0001

#define RSH_RESET_CONTROL__RESET_CHIP_SHIFT 0
#define RSH_RESET_CONTROL__RESET_CHIP_WIDTH 32
#define RSH_RESET_CONTROL__RESET_CHIP_RESET_VAL 0
#define RSH_RESET_CONTROL__RESET_CHIP_RMASK 0xffffffff
#define RSH_RESET_CONTROL__RESET_CHIP_MASK  0xffffffff
#define RSH_RESET_CONTROL__RESET_CHIP_FIELD 0,31
#define RSH_RESET_CONTROL__RESET_CHIP_VAL_KEY 0xca710001

#define RSH_RESET_CONTROL__DISABLE_SHIFT 32
#define RSH_RESET_CONTROL__DISABLE_WIDTH 1
#define RSH_RESET_CONTROL__DISABLE_RESET_VAL 0
#define RSH_RESET_CONTROL__DISABLE_RMASK 0x1
#define RSH_RESET_CONTROL__DISABLE_MASK  _64bit(0x100000000)
#define RSH_RESET_CONTROL__DISABLE_FIELD 32,32

#define RSH_RESET_CONTROL__REQ_PND_SHIFT 33
#define RSH_RESET_CONTROL__REQ_PND_WIDTH 1
#define RSH_RESET_CONTROL__REQ_PND_RESET_VAL 0
#define RSH_RESET_CONTROL__REQ_PND_RMASK 0x1
#define RSH_RESET_CONTROL__REQ_PND_MASK  _64bit(0x200000000)
#define RSH_RESET_CONTROL__REQ_PND_FIELD 33,33


/*
 * Breadcrumb0.
 * Scratchpad register that resets only on hard_rst_l (power on reset).
 * Typically used by software to leave information for the reboot software on
 * software reset.
 */
#define RSH_BREADCRUMB0 0x0510
#define RSH_BREADCRUMB0__LENGTH 0x0001

#define RSH_BREADCRUMB0__BREADCRUMB0_SHIFT 0
#define RSH_BREADCRUMB0__BREADCRUMB0_WIDTH 64
#define RSH_BREADCRUMB0__BREADCRUMB0_RESET_VAL 0
#define RSH_BREADCRUMB0__BREADCRUMB0_RMASK _64bit(0xffffffffffffffff)
#define RSH_BREADCRUMB0__BREADCRUMB0_MASK  _64bit(0xffffffffffffffff)
#define RSH_BREADCRUMB0__BREADCRUMB0_FIELD 0,63


/*
 * Breadcrumb1.
 * Scratchpad register that resets only on hard_rst_l (power on reset).
 * Typically used by software to leave information for the reboot software on
 * software reset.
 */
#define RSH_BREADCRUMB1 0x0518
#define RSH_BREADCRUMB1__LENGTH 0x0001

#define RSH_BREADCRUMB1__BREADCRUMB1_SHIFT 0
#define RSH_BREADCRUMB1__BREADCRUMB1_WIDTH 64
#define RSH_BREADCRUMB1__BREADCRUMB1_RESET_VAL 0
#define RSH_BREADCRUMB1__BREADCRUMB1_RMASK _64bit(0xffffffffffffffff)
#define RSH_BREADCRUMB1__BREADCRUMB1_MASK  _64bit(0xffffffffffffffff)
#define RSH_BREADCRUMB1__BREADCRUMB1_FIELD 0,63


/* Boot Control. */
#define RSH_BOOT_CONTROL 0x0528
#define RSH_BOOT_CONTROL__LENGTH 0x0001

#define RSH_BOOT_CONTROL__BOOT_MODE_SHIFT 0
#define RSH_BOOT_CONTROL__BOOT_MODE_WIDTH 2
#define RSH_BOOT_CONTROL__BOOT_MODE_RESET_VAL 0
#define RSH_BOOT_CONTROL__BOOT_MODE_RMASK 0x3
#define RSH_BOOT_CONTROL__BOOT_MODE_MASK  0x3
#define RSH_BOOT_CONTROL__BOOT_MODE_FIELD 0,1
#define RSH_BOOT_CONTROL__BOOT_MODE_VAL_NONE 0x0
#define RSH_BOOT_CONTROL__BOOT_MODE_VAL_EMMC 0x1
#define RSH_BOOT_CONTROL__BOOT_MODE_VAL_EMMC_LEGACY 0x3


/* Watchdog Control. */
#define RSH_WATCHDOG_CONTROL 0x0530
#define RSH_WATCHDOG_CONTROL__LENGTH 0x0001

#define RSH_WATCHDOG_CONTROL__RESET_ENA_SHIFT 0
#define RSH_WATCHDOG_CONTROL__RESET_ENA_WIDTH 3
#define RSH_WATCHDOG_CONTROL__RESET_ENA_RESET_VAL 0
#define RSH_WATCHDOG_CONTROL__RESET_ENA_RMASK 0x7
#define RSH_WATCHDOG_CONTROL__RESET_ENA_MASK  0x7
#define RSH_WATCHDOG_CONTROL__RESET_ENA_FIELD 0,2


/*
 * Device Protection.
 * Controls device access to rshim services.  When an access is blocked,
 * reads and writes will acknowledged but ignored.
 */
#define RSH_DEVICE_PROTECTION 0x0538
#define RSH_DEVICE_PROTECTION__LENGTH 0x0001

#define RSH_DEVICE_PROTECTION__DISABLE_DEV_UART0_SHIFT 0
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_UART0_WIDTH 1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_UART0_RESET_VAL 0
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_UART0_RMASK 0x1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_UART0_MASK  0x1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_UART0_FIELD 0,0

#define RSH_DEVICE_PROTECTION__DISABLE_DEV_UART1_SHIFT 1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_UART1_WIDTH 1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_UART1_RESET_VAL 0
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_UART1_RMASK 0x1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_UART1_MASK  0x2
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_UART1_FIELD 1,1

#define RSH_DEVICE_PROTECTION__DISABLE_DEV_DIAG_UART_SHIFT 2
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_DIAG_UART_WIDTH 1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_DIAG_UART_RESET_VAL 0
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_DIAG_UART_RMASK 0x1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_DIAG_UART_MASK  0x4
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_DIAG_UART_FIELD 2,2

#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_SHIFT 3
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_WIDTH 1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_RESET_VAL 0
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_RMASK 0x1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_MASK  0x8
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_FIELD 3,3

#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_EXT1_SHIFT 4
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_EXT1_WIDTH 1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_EXT1_RESET_VAL 0
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_EXT1_RMASK 0x1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_EXT1_MASK  0x10
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_EXT1_FIELD 4,4

#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_EXT2_SHIFT 5
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_EXT2_WIDTH 1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_EXT2_RESET_VAL 0
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_EXT2_RMASK 0x1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_EXT2_MASK  0x20
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_EXT2_FIELD 5,5

#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_EXT3_SHIFT 6
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_EXT3_WIDTH 1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_EXT3_RESET_VAL 0
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_EXT3_RMASK 0x1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_EXT3_MASK  0x40
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TYU_EXT3_FIELD 6,6

#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TIMER_SHIFT 7
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TIMER_WIDTH 1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TIMER_RESET_VAL 0
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TIMER_RMASK 0x1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TIMER_MASK  0x80
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TIMER_FIELD 7,7

#define RSH_DEVICE_PROTECTION__DISABLE_DEV_USB_SHIFT 8
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_USB_WIDTH 1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_USB_RESET_VAL 0
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_USB_RMASK 0x1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_USB_MASK  0x100
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_USB_FIELD 8,8

#define RSH_DEVICE_PROTECTION__DISABLE_DEV_GPIO_SHIFT 9
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_GPIO_WIDTH 1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_GPIO_RESET_VAL 0
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_GPIO_RMASK 0x1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_GPIO_MASK  0x200
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_GPIO_FIELD 9,9

#define RSH_DEVICE_PROTECTION__DISABLE_DEV_MMC_SHIFT 10
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_MMC_WIDTH 1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_MMC_RESET_VAL 0
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_MMC_RMASK 0x1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_MMC_MASK  0x400
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_MMC_FIELD 10,10

#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TIMER_EXT_SHIFT 11
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TIMER_EXT_WIDTH 1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TIMER_EXT_RESET_VAL 0
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TIMER_EXT_RMASK 0x1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TIMER_EXT_MASK  0x800
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_TIMER_EXT_FIELD 11,11

#define RSH_DEVICE_PROTECTION__DISABLE_DEV_WDOG_NS_SHIFT 12
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_WDOG_NS_WIDTH 1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_WDOG_NS_RESET_VAL 0
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_WDOG_NS_RMASK 0x1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_WDOG_NS_MASK  0x1000
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_WDOG_NS_FIELD 12,12

#define RSH_DEVICE_PROTECTION__DISABLE_DEV_WDOG_SEC_SHIFT 13
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_WDOG_SEC_WIDTH 1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_WDOG_SEC_RESET_VAL 0
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_WDOG_SEC_RMASK 0x1
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_WDOG_SEC_MASK  0x2000
#define RSH_DEVICE_PROTECTION__DISABLE_DEV_WDOG_SEC_FIELD 13,13

#define RSH_DEVICE_PROTECTION__DISABLE_RCI_TRIO0_SHIFT 32
#define RSH_DEVICE_PROTECTION__DISABLE_RCI_TRIO0_WIDTH 1
#define RSH_DEVICE_PROTECTION__DISABLE_RCI_TRIO0_RESET_VAL 0
#define RSH_DEVICE_PROTECTION__DISABLE_RCI_TRIO0_RMASK 0x1
#define RSH_DEVICE_PROTECTION__DISABLE_RCI_TRIO0_MASK  _64bit(0x100000000)
#define RSH_DEVICE_PROTECTION__DISABLE_RCI_TRIO0_FIELD 32,32

#define RSH_DEVICE_PROTECTION__DISABLE_RCI_TRIO1_SHIFT 33
#define RSH_DEVICE_PROTECTION__DISABLE_RCI_TRIO1_WIDTH 1
#define RSH_DEVICE_PROTECTION__DISABLE_RCI_TRIO1_RESET_VAL 0
#define RSH_DEVICE_PROTECTION__DISABLE_RCI_TRIO1_RMASK 0x1
#define RSH_DEVICE_PROTECTION__DISABLE_RCI_TRIO1_MASK  _64bit(0x200000000)
#define RSH_DEVICE_PROTECTION__DISABLE_RCI_TRIO1_FIELD 33,33

#define RSH_DEVICE_PROTECTION__DISABLE_RCI_TRIO2_SHIFT 34
#define RSH_DEVICE_PROTECTION__DISABLE_RCI_TRIO2_WIDTH 1
#define RSH_DEVICE_PROTECTION__DISABLE_RCI_TRIO2_RESET_VAL 0
#define RSH_DEVICE_PROTECTION__DISABLE_RCI_TRIO2_RMASK 0x1
#define RSH_DEVICE_PROTECTION__DISABLE_RCI_TRIO2_MASK  _64bit(0x400000000)
#define RSH_DEVICE_PROTECTION__DISABLE_RCI_TRIO2_FIELD 34,34

#define RSH_DEVICE_PROTECTION__DISABLE_RCI_USB_SHIFT 35
#define RSH_DEVICE_PROTECTION__DISABLE_RCI_USB_WIDTH 1
#define RSH_DEVICE_PROTECTION__DISABLE_RCI_USB_RESET_VAL 0
#define RSH_DEVICE_PROTECTION__DISABLE_RCI_USB_RMASK 0x1
#define RSH_DEVICE_PROTECTION__DISABLE_RCI_USB_MASK  _64bit(0x800000000)
#define RSH_DEVICE_PROTECTION__DISABLE_RCI_USB_FIELD 35,35


/*
 * Device Security Level.
 * Controls device access to rshim registers based on current security level.
 */
#define RSH_DEVICE_SEC_LVL 0x0550
#define RSH_DEVICE_SEC_LVL__LENGTH 0x0001

#define RSH_DEVICE_SEC_LVL__DEV_LVL_UART0_SHIFT 0
#define RSH_DEVICE_SEC_LVL__DEV_LVL_UART0_WIDTH 2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_UART0_RMASK 0x3
#define RSH_DEVICE_SEC_LVL__DEV_LVL_UART0_MASK  0x3
#define RSH_DEVICE_SEC_LVL__DEV_LVL_UART0_FIELD 0,1
#define RSH_DEVICE_SEC_LVL__DEV_LVL_UART0_VAL_EXT_SECURE_BOOT 0x0
#define RSH_DEVICE_SEC_LVL__DEV_LVL_UART0_VAL_EXT_NORMAL_BOOT 0x1
#define RSH_DEVICE_SEC_LVL__DEV_LVL_UART0_VAL_PROC_NORMAL_WORLD 0x2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_UART0_VAL_PROC_SECURE_WORLD 0x3

#define RSH_DEVICE_SEC_LVL__DEV_LVL_UART1_SHIFT 2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_UART1_WIDTH 2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_UART1_RMASK 0x3
#define RSH_DEVICE_SEC_LVL__DEV_LVL_UART1_MASK  0xc
#define RSH_DEVICE_SEC_LVL__DEV_LVL_UART1_FIELD 2,3
#define RSH_DEVICE_SEC_LVL__DEV_LVL_UART1_VAL_EXT_SECURE_BOOT 0x0
#define RSH_DEVICE_SEC_LVL__DEV_LVL_UART1_VAL_EXT_NORMAL_BOOT 0x1
#define RSH_DEVICE_SEC_LVL__DEV_LVL_UART1_VAL_PROC_NORMAL_WORLD 0x2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_UART1_VAL_PROC_SECURE_WORLD 0x3

#define RSH_DEVICE_SEC_LVL__DEV_LVL_DIAG_UART_SHIFT 4
#define RSH_DEVICE_SEC_LVL__DEV_LVL_DIAG_UART_WIDTH 2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_DIAG_UART_RMASK 0x3
#define RSH_DEVICE_SEC_LVL__DEV_LVL_DIAG_UART_MASK  0x30
#define RSH_DEVICE_SEC_LVL__DEV_LVL_DIAG_UART_FIELD 4,5
#define RSH_DEVICE_SEC_LVL__DEV_LVL_DIAG_UART_VAL_EXT_SECURE_BOOT 0x0
#define RSH_DEVICE_SEC_LVL__DEV_LVL_DIAG_UART_VAL_EXT_NORMAL_BOOT 0x1
#define RSH_DEVICE_SEC_LVL__DEV_LVL_DIAG_UART_VAL_PROC_NORMAL_WORLD 0x2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_DIAG_UART_VAL_PROC_SECURE_WORLD 0x3

#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_SHIFT 6
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_WIDTH 2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_RMASK 0x3
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_MASK  0xc0
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_FIELD 6,7
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_VAL_EXT_SECURE_BOOT 0x0
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_VAL_EXT_NORMAL_BOOT 0x1
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_VAL_PROC_NORMAL_WORLD 0x2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_VAL_PROC_SECURE_WORLD 0x3

#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT1_SHIFT 8
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT1_WIDTH 2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT1_RMASK 0x3
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT1_MASK  0x300
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT1_FIELD 8,9
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT1_VAL_EXT_SECURE_BOOT 0x0
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT1_VAL_EXT_NORMAL_BOOT 0x1
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT1_VAL_PROC_NORMAL_WORLD 0x2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT1_VAL_PROC_SECURE_WORLD 0x3

#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT2_SHIFT 10
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT2_WIDTH 2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT2_RMASK 0x3
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT2_MASK  0xc00
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT2_FIELD 10,11
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT2_VAL_EXT_SECURE_BOOT 0x0
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT2_VAL_EXT_NORMAL_BOOT 0x1
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT2_VAL_PROC_NORMAL_WORLD 0x2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT2_VAL_PROC_SECURE_WORLD 0x3

#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT3_SHIFT 12
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT3_WIDTH 2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT3_RMASK 0x3
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT3_MASK  0x3000
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT3_FIELD 12,13
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT3_VAL_EXT_SECURE_BOOT 0x0
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT3_VAL_EXT_NORMAL_BOOT 0x1
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT3_VAL_PROC_NORMAL_WORLD 0x2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TYU_EXT3_VAL_PROC_SECURE_WORLD 0x3

#define RSH_DEVICE_SEC_LVL__DEV_LVL_TIMER_SHIFT 14
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TIMER_WIDTH 2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TIMER_RMASK 0x3
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TIMER_MASK  0xc000
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TIMER_FIELD 14,15
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TIMER_VAL_EXT_SECURE_BOOT 0x0
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TIMER_VAL_EXT_NORMAL_BOOT 0x1
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TIMER_VAL_PROC_NORMAL_WORLD 0x2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TIMER_VAL_PROC_SECURE_WORLD 0x3

#define RSH_DEVICE_SEC_LVL__DEV_LVL_USB_SHIFT 16
#define RSH_DEVICE_SEC_LVL__DEV_LVL_USB_WIDTH 2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_USB_RMASK 0x3
#define RSH_DEVICE_SEC_LVL__DEV_LVL_USB_MASK  0x30000
#define RSH_DEVICE_SEC_LVL__DEV_LVL_USB_FIELD 16,17
#define RSH_DEVICE_SEC_LVL__DEV_LVL_USB_VAL_EXT_SECURE_BOOT 0x0
#define RSH_DEVICE_SEC_LVL__DEV_LVL_USB_VAL_EXT_NORMAL_BOOT 0x1
#define RSH_DEVICE_SEC_LVL__DEV_LVL_USB_VAL_PROC_NORMAL_WORLD 0x2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_USB_VAL_PROC_SECURE_WORLD 0x3

#define RSH_DEVICE_SEC_LVL__DEV_LVL_GPIO_SHIFT 18
#define RSH_DEVICE_SEC_LVL__DEV_LVL_GPIO_WIDTH 2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_GPIO_RMASK 0x3
#define RSH_DEVICE_SEC_LVL__DEV_LVL_GPIO_MASK  0xc0000
#define RSH_DEVICE_SEC_LVL__DEV_LVL_GPIO_FIELD 18,19
#define RSH_DEVICE_SEC_LVL__DEV_LVL_GPIO_VAL_EXT_SECURE_BOOT 0x0
#define RSH_DEVICE_SEC_LVL__DEV_LVL_GPIO_VAL_EXT_NORMAL_BOOT 0x1
#define RSH_DEVICE_SEC_LVL__DEV_LVL_GPIO_VAL_PROC_NORMAL_WORLD 0x2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_GPIO_VAL_PROC_SECURE_WORLD 0x3

#define RSH_DEVICE_SEC_LVL__DEV_LVL_MMC_SHIFT 20
#define RSH_DEVICE_SEC_LVL__DEV_LVL_MMC_WIDTH 2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_MMC_RMASK 0x3
#define RSH_DEVICE_SEC_LVL__DEV_LVL_MMC_MASK  0x300000
#define RSH_DEVICE_SEC_LVL__DEV_LVL_MMC_FIELD 20,21
#define RSH_DEVICE_SEC_LVL__DEV_LVL_MMC_VAL_EXT_SECURE_BOOT 0x0
#define RSH_DEVICE_SEC_LVL__DEV_LVL_MMC_VAL_EXT_NORMAL_BOOT 0x1
#define RSH_DEVICE_SEC_LVL__DEV_LVL_MMC_VAL_PROC_NORMAL_WORLD 0x2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_MMC_VAL_PROC_SECURE_WORLD 0x3

#define RSH_DEVICE_SEC_LVL__DEV_LVL_TIMER_EXT_SHIFT 22
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TIMER_EXT_WIDTH 2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TIMER_EXT_RMASK 0x3
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TIMER_EXT_MASK  0xc00000
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TIMER_EXT_FIELD 22,23
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TIMER_EXT_VAL_EXT_SECURE_BOOT 0x0
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TIMER_EXT_VAL_EXT_NORMAL_BOOT 0x1
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TIMER_EXT_VAL_PROC_NORMAL_WORLD 0x2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_TIMER_EXT_VAL_PROC_SECURE_WORLD 0x3

#define RSH_DEVICE_SEC_LVL__DEV_LVL_WDOG_NS_SHIFT 24
#define RSH_DEVICE_SEC_LVL__DEV_LVL_WDOG_NS_WIDTH 2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_WDOG_NS_RMASK 0x3
#define RSH_DEVICE_SEC_LVL__DEV_LVL_WDOG_NS_MASK  0x3000000
#define RSH_DEVICE_SEC_LVL__DEV_LVL_WDOG_NS_FIELD 24,25
#define RSH_DEVICE_SEC_LVL__DEV_LVL_WDOG_NS_VAL_EXT_SECURE_BOOT 0x0
#define RSH_DEVICE_SEC_LVL__DEV_LVL_WDOG_NS_VAL_EXT_NORMAL_BOOT 0x1
#define RSH_DEVICE_SEC_LVL__DEV_LVL_WDOG_NS_VAL_PROC_NORMAL_WORLD 0x2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_WDOG_NS_VAL_PROC_SECURE_WORLD 0x3

#define RSH_DEVICE_SEC_LVL__DEV_LVL_WDOG_SEC_SHIFT 26
#define RSH_DEVICE_SEC_LVL__DEV_LVL_WDOG_SEC_WIDTH 2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_WDOG_SEC_RMASK 0x3
#define RSH_DEVICE_SEC_LVL__DEV_LVL_WDOG_SEC_MASK  0xc000000
#define RSH_DEVICE_SEC_LVL__DEV_LVL_WDOG_SEC_FIELD 26,27
#define RSH_DEVICE_SEC_LVL__DEV_LVL_WDOG_SEC_VAL_EXT_SECURE_BOOT 0x0
#define RSH_DEVICE_SEC_LVL__DEV_LVL_WDOG_SEC_VAL_EXT_NORMAL_BOOT 0x1
#define RSH_DEVICE_SEC_LVL__DEV_LVL_WDOG_SEC_VAL_PROC_NORMAL_WORLD 0x2
#define RSH_DEVICE_SEC_LVL__DEV_LVL_WDOG_SEC_VAL_PROC_SECURE_WORLD 0x3

#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO0_SHIFT 32
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO0_WIDTH 2
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO0_RMASK 0x3
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO0_MASK  _64bit(0x300000000)
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO0_FIELD 32,33
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO0_VAL_EXT_SECURE_BOOT 0x0
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO0_VAL_EXT_NORMAL_BOOT 0x1
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO0_VAL_PROC_NORMAL_WORLD 0x2
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO0_VAL_PROC_SECURE_WORLD 0x3

#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO1_SHIFT 34
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO1_WIDTH 2
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO1_RMASK 0x3
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO1_MASK  _64bit(0xc00000000)
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO1_FIELD 34,35
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO1_VAL_EXT_SECURE_BOOT 0x0
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO1_VAL_EXT_NORMAL_BOOT 0x1
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO1_VAL_PROC_NORMAL_WORLD 0x2
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO1_VAL_PROC_SECURE_WORLD 0x3

#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO2_SHIFT 36
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO2_WIDTH 2
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO2_RMASK 0x3
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO2_MASK  _64bit(0x3000000000)
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO2_FIELD 36,37
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO2_VAL_EXT_SECURE_BOOT 0x0
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO2_VAL_EXT_NORMAL_BOOT 0x1
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO2_VAL_PROC_NORMAL_WORLD 0x2
#define RSH_DEVICE_SEC_LVL__RCI_LVL_TRIO2_VAL_PROC_SECURE_WORLD 0x3

#define RSH_DEVICE_SEC_LVL__RCI_LVL_USB_SHIFT 38
#define RSH_DEVICE_SEC_LVL__RCI_LVL_USB_WIDTH 2
#define RSH_DEVICE_SEC_LVL__RCI_LVL_USB_RMASK 0x3
#define RSH_DEVICE_SEC_LVL__RCI_LVL_USB_MASK  _64bit(0xc000000000)
#define RSH_DEVICE_SEC_LVL__RCI_LVL_USB_FIELD 38,39
#define RSH_DEVICE_SEC_LVL__RCI_LVL_USB_VAL_EXT_SECURE_BOOT 0x0
#define RSH_DEVICE_SEC_LVL__RCI_LVL_USB_VAL_EXT_NORMAL_BOOT 0x1
#define RSH_DEVICE_SEC_LVL__RCI_LVL_USB_VAL_PROC_NORMAL_WORLD 0x2
#define RSH_DEVICE_SEC_LVL__RCI_LVL_USB_VAL_PROC_SECURE_WORLD 0x3

#define RSH_DEVICE_SEC_LVL__MEM_ACC_LVL_SHIFT 48
#define RSH_DEVICE_SEC_LVL__MEM_ACC_LVL_WIDTH 1
#define RSH_DEVICE_SEC_LVL__MEM_ACC_LVL_RESET_VAL 0
#define RSH_DEVICE_SEC_LVL__MEM_ACC_LVL_RMASK 0x1
#define RSH_DEVICE_SEC_LVL__MEM_ACC_LVL_MASK  _64bit(0x1000000000000)
#define RSH_DEVICE_SEC_LVL__MEM_ACC_LVL_FIELD 48,48


/*
 * Device Slave Security Level.
 * Controls the security levels for all of the registers within each slave
 * device.
 */
#define RSH_DEVICE_SLV_SEC_LVL 0x0558
#define RSH_DEVICE_SLV_SEC_LVL__LENGTH 0x0001

#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_UART0_SHIFT 0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_UART0_WIDTH 2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_UART0_RESET_VAL 0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_UART0_RMASK 0x3
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_UART0_MASK  0x3
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_UART0_FIELD 0,1
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_UART0_VAL_NORMAL 0x0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_UART0_VAL_BOOT_NORMAL 0x1
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_UART0_VAL_SECURE 0x2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_UART0_VAL_BOOT_SECURE 0x3

#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_UART1_SHIFT 2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_UART1_WIDTH 2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_UART1_RESET_VAL 0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_UART1_RMASK 0x3
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_UART1_MASK  0xc
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_UART1_FIELD 2,3
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_UART1_VAL_NORMAL 0x0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_UART1_VAL_BOOT_NORMAL 0x1
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_UART1_VAL_SECURE 0x2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_UART1_VAL_BOOT_SECURE 0x3

#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_DIAG_UART_SHIFT 4
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_DIAG_UART_WIDTH 2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_DIAG_UART_RESET_VAL 0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_DIAG_UART_RMASK 0x3
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_DIAG_UART_MASK  0x30
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_DIAG_UART_FIELD 4,5
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_DIAG_UART_VAL_NORMAL 0x0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_DIAG_UART_VAL_BOOT_NORMAL 0x1
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_DIAG_UART_VAL_SECURE 0x2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_DIAG_UART_VAL_BOOT_SECURE 0x3

#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_SHIFT 6
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_WIDTH 2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_RESET_VAL 0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_RMASK 0x3
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_MASK  0xc0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_FIELD 6,7
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_VAL_NORMAL 0x0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_VAL_BOOT_NORMAL 0x1
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_VAL_SECURE 0x2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_VAL_BOOT_SECURE 0x3

#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT1_SHIFT 8
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT1_WIDTH 2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT1_RESET_VAL 0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT1_RMASK 0x3
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT1_MASK  0x300
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT1_FIELD 8,9
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT1_VAL_NORMAL 0x0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT1_VAL_BOOT_NORMAL 0x1
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT1_VAL_SECURE 0x2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT1_VAL_BOOT_SECURE 0x3

#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT2_SHIFT 10
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT2_WIDTH 2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT2_RESET_VAL 0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT2_RMASK 0x3
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT2_MASK  0xc00
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT2_FIELD 10,11
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT2_VAL_NORMAL 0x0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT2_VAL_BOOT_NORMAL 0x1
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT2_VAL_SECURE 0x2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT2_VAL_BOOT_SECURE 0x3

#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT3_SHIFT 12
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT3_WIDTH 2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT3_RESET_VAL 0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT3_RMASK 0x3
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT3_MASK  0x3000
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT3_FIELD 12,13
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT3_VAL_NORMAL 0x0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT3_VAL_BOOT_NORMAL 0x1
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT3_VAL_SECURE 0x2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TYU_EXT3_VAL_BOOT_SECURE 0x3

#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TIMER_SHIFT 14
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TIMER_WIDTH 2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TIMER_RESET_VAL 0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TIMER_RMASK 0x3
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TIMER_MASK  0xc000
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TIMER_FIELD 14,15
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TIMER_VAL_NORMAL 0x0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TIMER_VAL_BOOT_NORMAL 0x1
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TIMER_VAL_SECURE 0x2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TIMER_VAL_BOOT_SECURE 0x3

#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_USB_SHIFT 16
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_USB_WIDTH 2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_USB_RESET_VAL 0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_USB_RMASK 0x3
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_USB_MASK  0x30000
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_USB_FIELD 16,17
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_USB_VAL_NORMAL 0x0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_USB_VAL_BOOT_NORMAL 0x1
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_USB_VAL_SECURE 0x2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_USB_VAL_BOOT_SECURE 0x3

#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_GPIO_SHIFT 18
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_GPIO_WIDTH 2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_GPIO_RESET_VAL 0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_GPIO_RMASK 0x3
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_GPIO_MASK  0xc0000
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_GPIO_FIELD 18,19
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_GPIO_VAL_NORMAL 0x0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_GPIO_VAL_BOOT_NORMAL 0x1
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_GPIO_VAL_SECURE 0x2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_GPIO_VAL_BOOT_SECURE 0x3

#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_MMC_SHIFT 20
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_MMC_WIDTH 2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_MMC_RESET_VAL 0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_MMC_RMASK 0x3
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_MMC_MASK  0x300000
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_MMC_FIELD 20,21
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_MMC_VAL_NORMAL 0x0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_MMC_VAL_BOOT_NORMAL 0x1
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_MMC_VAL_SECURE 0x2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_MMC_VAL_BOOT_SECURE 0x3

#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TIMER_EXT_SHIFT 22
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TIMER_EXT_WIDTH 2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TIMER_EXT_RESET_VAL 0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TIMER_EXT_RMASK 0x3
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TIMER_EXT_MASK  0xc00000
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TIMER_EXT_FIELD 22,23
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TIMER_EXT_VAL_NORMAL 0x0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TIMER_EXT_VAL_BOOT_NORMAL 0x1
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TIMER_EXT_VAL_SECURE 0x2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_TIMER_EXT_VAL_BOOT_SECURE 0x3

#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_WDOG_NS_SHIFT 24
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_WDOG_NS_WIDTH 2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_WDOG_NS_RESET_VAL 0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_WDOG_NS_RMASK 0x3
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_WDOG_NS_MASK  0x3000000
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_WDOG_NS_FIELD 24,25
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_WDOG_NS_VAL_NORMAL 0x0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_WDOG_NS_VAL_BOOT_NORMAL 0x1
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_WDOG_NS_VAL_SECURE 0x2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_WDOG_NS_VAL_BOOT_SECURE 0x3

#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_WDOG_SEC_SHIFT 26
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_WDOG_SEC_WIDTH 2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_WDOG_SEC_RESET_VAL 0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_WDOG_SEC_RMASK 0x3
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_WDOG_SEC_MASK  0xc000000
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_WDOG_SEC_FIELD 26,27
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_WDOG_SEC_VAL_NORMAL 0x0
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_WDOG_SEC_VAL_BOOT_NORMAL 0x1
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_WDOG_SEC_VAL_SECURE 0x2
#define RSH_DEVICE_SLV_SEC_LVL__REG_LVL_WDOG_SEC_VAL_BOOT_SECURE 0x3


/*
 * Scratch buffer control.
 * Controls R/W access to scratch buffer.
 */
#define RSH_SCRATCH_BUF_CTL 0x0600
#define RSH_SCRATCH_BUF_CTL__LENGTH 0x0001

#define RSH_SCRATCH_BUF_CTL__IDX_SHIFT 0
#define RSH_SCRATCH_BUF_CTL__IDX_WIDTH 7
#define RSH_SCRATCH_BUF_CTL__IDX_RESET_VAL 0
#define RSH_SCRATCH_BUF_CTL__IDX_RMASK 0x7f
#define RSH_SCRATCH_BUF_CTL__IDX_MASK  0x7f
#define RSH_SCRATCH_BUF_CTL__IDX_FIELD 0,6


/*
 * Scratch buffer data.
 * Read/Write data for scratch buffer
 */
#define RSH_SCRATCH_BUF_DAT 0x0610
#define RSH_SCRATCH_BUF_DAT__LENGTH 0x0001

#define RSH_SCRATCH_BUF_DAT__SCRATCH_BUF_DAT_SHIFT 0
#define RSH_SCRATCH_BUF_DAT__SCRATCH_BUF_DAT_WIDTH 64
#define RSH_SCRATCH_BUF_DAT__SCRATCH_BUF_DAT_RMASK _64bit(0xffffffffffffffff)
#define RSH_SCRATCH_BUF_DAT__SCRATCH_BUF_DAT_MASK  _64bit(0xffffffffffffffff)
#define RSH_SCRATCH_BUF_DAT__SCRATCH_BUF_DAT_FIELD 0,63


/*
 * Byte Access Control.
 * Provides 8-byte access to rshim registers using 1B, 2B, or 4B accesses.
 */
#define RSH_BYTE_ACC_CTL 0x0490
#define RSH_BYTE_ACC_CTL__LENGTH 0x0001

#define RSH_BYTE_ACC_CTL__BYTE_PTR_SHIFT 0
#define RSH_BYTE_ACC_CTL__BYTE_PTR_WIDTH 3
#define RSH_BYTE_ACC_CTL__BYTE_PTR_RESET_VAL 0
#define RSH_BYTE_ACC_CTL__BYTE_PTR_RMASK 0x7
#define RSH_BYTE_ACC_CTL__BYTE_PTR_MASK  0x7
#define RSH_BYTE_ACC_CTL__BYTE_PTR_FIELD 0,2

#define RSH_BYTE_ACC_CTL__SIZE_SHIFT 3
#define RSH_BYTE_ACC_CTL__SIZE_WIDTH 2
#define RSH_BYTE_ACC_CTL__SIZE_RESET_VAL 0
#define RSH_BYTE_ACC_CTL__SIZE_RMASK 0x3
#define RSH_BYTE_ACC_CTL__SIZE_MASK  0x18
#define RSH_BYTE_ACC_CTL__SIZE_FIELD 3,4
#define RSH_BYTE_ACC_CTL__SIZE_VAL_1BYTE 0x0
#define RSH_BYTE_ACC_CTL__SIZE_VAL_2BYTE 0x1
#define RSH_BYTE_ACC_CTL__SIZE_VAL_4BYTE 0x2

#define RSH_BYTE_ACC_CTL__PENDING_SHIFT 5
#define RSH_BYTE_ACC_CTL__PENDING_WIDTH 1
#define RSH_BYTE_ACC_CTL__PENDING_RESET_VAL 0
#define RSH_BYTE_ACC_CTL__PENDING_RMASK 0x1
#define RSH_BYTE_ACC_CTL__PENDING_MASK  0x20
#define RSH_BYTE_ACC_CTL__PENDING_FIELD 5,5

#define RSH_BYTE_ACC_CTL__READ_TRIG_SHIFT 6
#define RSH_BYTE_ACC_CTL__READ_TRIG_WIDTH 1
#define RSH_BYTE_ACC_CTL__READ_TRIG_RESET_VAL 0
#define RSH_BYTE_ACC_CTL__READ_TRIG_RMASK 0x1
#define RSH_BYTE_ACC_CTL__READ_TRIG_MASK  0x40
#define RSH_BYTE_ACC_CTL__READ_TRIG_FIELD 6,6


/*
 * Byte Access Write Data.
 * 8 bytes of write data written when BYTE_ACC_CTL.BYTE_PTR wraps back to
 * zero.
 */
#define RSH_BYTE_ACC_WDAT 0x0498
#define RSH_BYTE_ACC_WDAT__LENGTH 0x0001

#define RSH_BYTE_ACC_WDAT__DAT_SHIFT 0
#define RSH_BYTE_ACC_WDAT__DAT_WIDTH 64
#define RSH_BYTE_ACC_WDAT__DAT_RESET_VAL 0
#define RSH_BYTE_ACC_WDAT__DAT_RMASK _64bit(0xffffffffffffffff)
#define RSH_BYTE_ACC_WDAT__DAT_MASK  _64bit(0xffffffffffffffff)
#define RSH_BYTE_ACC_WDAT__DAT_FIELD 0,63


/*
 * Byte Access Read Data.
 * 8 bytes of read data captured when READ_TRIGGER is written with a 1.
 */
#define RSH_BYTE_ACC_RDAT 0x04a0
#define RSH_BYTE_ACC_RDAT__LENGTH 0x0001

#define RSH_BYTE_ACC_RDAT__DAT_SHIFT 0
#define RSH_BYTE_ACC_RDAT__DAT_WIDTH 64
#define RSH_BYTE_ACC_RDAT__DAT_RESET_VAL 0
#define RSH_BYTE_ACC_RDAT__DAT_RMASK _64bit(0xffffffffffffffff)
#define RSH_BYTE_ACC_RDAT__DAT_MASK  _64bit(0xffffffffffffffff)
#define RSH_BYTE_ACC_RDAT__DAT_FIELD 0,63


/*
 * Byte Access Register Address.
 * Register address used for read/write accesses triggered by
 * BYTE_ACC_WDAT/RDAT.  The BYTE_ACC_CTL.BYTE_PTR is used and auto
 * incremented when writing or reading this register.
 */
#define RSH_BYTE_ACC_ADDR 0x04a8
#define RSH_BYTE_ACC_ADDR__LENGTH 0x0001

#define RSH_BYTE_ACC_ADDR__REGNUM_SHIFT 3
#define RSH_BYTE_ACC_ADDR__REGNUM_WIDTH 13
#define RSH_BYTE_ACC_ADDR__REGNUM_RESET_VAL 0
#define RSH_BYTE_ACC_ADDR__REGNUM_RMASK 0x1fff
#define RSH_BYTE_ACC_ADDR__REGNUM_MASK  0xfff8
#define RSH_BYTE_ACC_ADDR__REGNUM_FIELD 3,15

#define RSH_BYTE_ACC_ADDR__CHANNEL_SHIFT 16
#define RSH_BYTE_ACC_ADDR__CHANNEL_WIDTH 4
#define RSH_BYTE_ACC_ADDR__CHANNEL_RESET_VAL 0
#define RSH_BYTE_ACC_ADDR__CHANNEL_RMASK 0xf
#define RSH_BYTE_ACC_ADDR__CHANNEL_MASK  0xf0000
#define RSH_BYTE_ACC_ADDR__CHANNEL_FIELD 16,19


/*
 * Boot FIFO.
 * Reads pop one word from the FIFO. If the FIFO is empty, the read will
 * return unpredictable data and the FIFO state will not be affected. Writes
 * push one entry. If full, writes will be dropped (MMIO) or flow-control the
 * associated interface.
 */
#define RSH_BOOT_FIFO_DATA 0x0408
#define RSH_BOOT_FIFO_DATA__LENGTH 0x0001

#define RSH_BOOT_FIFO_DATA__BOOT_FIFO_DATA_SHIFT 0
#define RSH_BOOT_FIFO_DATA__BOOT_FIFO_DATA_WIDTH 64
#define RSH_BOOT_FIFO_DATA__BOOT_FIFO_DATA_RESET_VAL 0
#define RSH_BOOT_FIFO_DATA__BOOT_FIFO_DATA_RMASK _64bit(0xffffffffffffffff)
#define RSH_BOOT_FIFO_DATA__BOOT_FIFO_DATA_MASK  _64bit(0xffffffffffffffff)
#define RSH_BOOT_FIFO_DATA__BOOT_FIFO_DATA_FIELD 0,63


/*
 * Boot FIFO Count.
 * Indicates the number of words currently in the boot FIFO. The boot FIFO
 * can hold up to 512 8-byte words.
 */
#define RSH_BOOT_FIFO_COUNT 0x0488
#define RSH_BOOT_FIFO_COUNT__LENGTH 0x0001

#define RSH_BOOT_FIFO_COUNT__BOOT_FIFO_COUNT_SHIFT 0
#define RSH_BOOT_FIFO_COUNT__BOOT_FIFO_COUNT_WIDTH 10
#define RSH_BOOT_FIFO_COUNT__BOOT_FIFO_COUNT_RESET_VAL 0
#define RSH_BOOT_FIFO_COUNT__BOOT_FIFO_COUNT_RMASK 0x3ff
#define RSH_BOOT_FIFO_COUNT__BOOT_FIFO_COUNT_MASK  0x3ff
#define RSH_BOOT_FIFO_COUNT__BOOT_FIFO_COUNT_FIELD 0,9


/*
 * Memory Access Setup.
 */
#define RSH_MEM_ACC_SETUP 0x08e8
#define RSH_MEM_ACC_SETUP__LENGTH 0x0001

#define RSH_MEM_ACC_SETUP__ATTR_SHIFT 0
#define RSH_MEM_ACC_SETUP__ATTR_WIDTH 4
#define RSH_MEM_ACC_SETUP__ATTR_RESET_VAL 0
#define RSH_MEM_ACC_SETUP__ATTR_RMASK 0xf
#define RSH_MEM_ACC_SETUP__ATTR_MASK  0xf
#define RSH_MEM_ACC_SETUP__ATTR_FIELD 0,3
#define RSH_MEM_ACC_SETUP__ATTR_VAL_DEV_NON_BUF 0x0
#define RSH_MEM_ACC_SETUP__ATTR_VAL_DEV_BUF 0x1
#define RSH_MEM_ACC_SETUP__ATTR_VAL_NORM_NON_CACHE_NON_BUF 0x2
#define RSH_MEM_ACC_SETUP__ATTR_VAL_NORM_NON_CACHE_BUF 0x3
#define RSH_MEM_ACC_SETUP__ATTR_VAL_W_WT_NO_ALLOC 0x6
#define RSH_MEM_ACC_SETUP__ATTR_VAL_W_WB_NO_ALLOC 0x7
#define RSH_MEM_ACC_SETUP__ATTR_VAL_R_WT_NO_ALLOC 0xa
#define RSH_MEM_ACC_SETUP__ATTR_VAL_R_WB_NO_ALLOC 0xb
#define RSH_MEM_ACC_SETUP__ATTR_VAL_RW_WT_ALLOC 0xe
#define RSH_MEM_ACC_SETUP__ATTR_VAL_RW_WB_ALLOC 0xf


/*
 * Memory Access Control.
 */
#define RSH_MEM_ACC_CTL 0x08f0
#define RSH_MEM_ACC_CTL__LENGTH 0x0001

#define RSH_MEM_ACC_CTL__ADDRESS_SHIFT 0
#define RSH_MEM_ACC_CTL__ADDRESS_WIDTH 40
#define RSH_MEM_ACC_CTL__ADDRESS_RESET_VAL 0
#define RSH_MEM_ACC_CTL__ADDRESS_RMASK _64bit(0xffffffffff)
#define RSH_MEM_ACC_CTL__ADDRESS_MASK  _64bit(0xffffffffff)
#define RSH_MEM_ACC_CTL__ADDRESS_FIELD 0,39

#define RSH_MEM_ACC_CTL__WRITE_SHIFT 48
#define RSH_MEM_ACC_CTL__WRITE_WIDTH 1
#define RSH_MEM_ACC_CTL__WRITE_RESET_VAL 0
#define RSH_MEM_ACC_CTL__WRITE_RMASK 0x1
#define RSH_MEM_ACC_CTL__WRITE_MASK  _64bit(0x1000000000000)
#define RSH_MEM_ACC_CTL__WRITE_FIELD 48,48

#define RSH_MEM_ACC_CTL__SIZE_SHIFT 52
#define RSH_MEM_ACC_CTL__SIZE_WIDTH 3
#define RSH_MEM_ACC_CTL__SIZE_RESET_VAL 0
#define RSH_MEM_ACC_CTL__SIZE_RMASK 0x7
#define RSH_MEM_ACC_CTL__SIZE_MASK  _64bit(0x70000000000000)
#define RSH_MEM_ACC_CTL__SIZE_FIELD 52,54
#define RSH_MEM_ACC_CTL__SIZE_VAL_SZ1 0x0
#define RSH_MEM_ACC_CTL__SIZE_VAL_SZ2 0x1
#define RSH_MEM_ACC_CTL__SIZE_VAL_SZ4 0x2
#define RSH_MEM_ACC_CTL__SIZE_VAL_SZ8 0x3
#define RSH_MEM_ACC_CTL__SIZE_VAL_SZ16 0x4
#define RSH_MEM_ACC_CTL__SIZE_VAL_SZ32 0x5
#define RSH_MEM_ACC_CTL__SIZE_VAL_SZ64 0x6

#define RSH_MEM_ACC_CTL__SEND_SHIFT 63
#define RSH_MEM_ACC_CTL__SEND_WIDTH 1
#define RSH_MEM_ACC_CTL__SEND_RESET_VAL 0
#define RSH_MEM_ACC_CTL__SEND_RMASK 0x1
#define RSH_MEM_ACC_CTL__SEND_MASK  _64bit(0x8000000000000000)
#define RSH_MEM_ACC_CTL__SEND_FIELD 63,63


/*
 * Memory Access Data.
 * When MEM_ACC_CTL is used to perform a read, this register contains the
 * result data. On a write, this contains the data to be written. Data must
 * be packed into the LSBs. For example, a 2-byte write will always have an
 * even address and the data will always be in bits [16:0] of the first
 * MEM_ACC_DATA word for both reads and writes. Thus the 2nd MEM_ACC_DATA
 * word is only used for writes larger than 8-bytes etc.
 */
#define RSH_MEM_ACC_DATA__FIRST_WORD 0x0900
#define RSH_MEM_ACC_DATA__LAST_WORD 0x0938
#define RSH_MEM_ACC_DATA__LENGTH 0x0040
#define RSH_MEM_ACC_DATA__STRIDE 0x0008

#define RSH_MEM_ACC_DATA__DATA_SHIFT 0
#define RSH_MEM_ACC_DATA__DATA_WIDTH 64
#define RSH_MEM_ACC_DATA__DATA_RESET_VAL 0
#define RSH_MEM_ACC_DATA__DATA_RMASK _64bit(0xffffffffffffffff)
#define RSH_MEM_ACC_DATA__DATA_MASK  _64bit(0xffffffffffffffff)
#define RSH_MEM_ACC_DATA__DATA_FIELD 0,63


/*
 * Memory Access Data.
 * When MEM_ACC_CTL is used to perform a read, this register contains the
 * result data. On a write, this contains the data to be written. Data must
 * be packed into the LSBs. For example, a 2-byte write will always have an
 * even address and the data will always be in bits [16:0] of the first
 * MEM_ACC_DATA word for both reads and writes. Thus the 2nd MEM_ACC_DATA
 * word is only used for writes larger than 8-bytes etc.
 */
#define RSH_MEM_ACC_DATA_1__FIRST_WORD 0x0908
#define RSH_MEM_ACC_DATA_1__LAST_WORD 0x0940
#define RSH_MEM_ACC_DATA_1__LENGTH 0x0040
#define RSH_MEM_ACC_DATA_1__STRIDE 0x0008

#define RSH_MEM_ACC_DATA_1__DATA_SHIFT 0
#define RSH_MEM_ACC_DATA_1__DATA_WIDTH 64
#define RSH_MEM_ACC_DATA_1__DATA_RESET_VAL 0
#define RSH_MEM_ACC_DATA_1__DATA_RMASK _64bit(0xffffffffffffffff)
#define RSH_MEM_ACC_DATA_1__DATA_MASK  _64bit(0xffffffffffffffff)
#define RSH_MEM_ACC_DATA_1__DATA_FIELD 0,63


/*
 * Memory Access Data.
 * When MEM_ACC_CTL is used to perform a read, this register contains the
 * result data. On a write, this contains the data to be written. Data must
 * be packed into the LSBs. For example, a 2-byte write will always have an
 * even address and the data will always be in bits [16:0] of the first
 * MEM_ACC_DATA word for both reads and writes. Thus the 2nd MEM_ACC_DATA
 * word is only used for writes larger than 8-bytes etc.
 */
#define RSH_MEM_ACC_DATA_2__FIRST_WORD 0x0910
#define RSH_MEM_ACC_DATA_2__LAST_WORD 0x0948
#define RSH_MEM_ACC_DATA_2__LENGTH 0x0040
#define RSH_MEM_ACC_DATA_2__STRIDE 0x0008

#define RSH_MEM_ACC_DATA_2__DATA_SHIFT 0
#define RSH_MEM_ACC_DATA_2__DATA_WIDTH 64
#define RSH_MEM_ACC_DATA_2__DATA_RESET_VAL 0
#define RSH_MEM_ACC_DATA_2__DATA_RMASK _64bit(0xffffffffffffffff)
#define RSH_MEM_ACC_DATA_2__DATA_MASK  _64bit(0xffffffffffffffff)
#define RSH_MEM_ACC_DATA_2__DATA_FIELD 0,63


/*
 * Memory Access Data.
 * When MEM_ACC_CTL is used to perform a read, this register contains the
 * result data. On a write, this contains the data to be written. Data must
 * be packed into the LSBs. For example, a 2-byte write will always have an
 * even address and the data will always be in bits [16:0] of the first
 * MEM_ACC_DATA word for both reads and writes. Thus the 2nd MEM_ACC_DATA
 * word is only used for writes larger than 8-bytes etc.
 */
#define RSH_MEM_ACC_DATA_3__FIRST_WORD 0x0918
#define RSH_MEM_ACC_DATA_3__LAST_WORD 0x0950
#define RSH_MEM_ACC_DATA_3__LENGTH 0x0040
#define RSH_MEM_ACC_DATA_3__STRIDE 0x0008

#define RSH_MEM_ACC_DATA_3__DATA_SHIFT 0
#define RSH_MEM_ACC_DATA_3__DATA_WIDTH 64
#define RSH_MEM_ACC_DATA_3__DATA_RESET_VAL 0
#define RSH_MEM_ACC_DATA_3__DATA_RMASK _64bit(0xffffffffffffffff)
#define RSH_MEM_ACC_DATA_3__DATA_MASK  _64bit(0xffffffffffffffff)
#define RSH_MEM_ACC_DATA_3__DATA_FIELD 0,63


/*
 * Memory Access Data.
 * When MEM_ACC_CTL is used to perform a read, this register contains the
 * result data. On a write, this contains the data to be written. Data must
 * be packed into the LSBs. For example, a 2-byte write will always have an
 * even address and the data will always be in bits [16:0] of the first
 * MEM_ACC_DATA word for both reads and writes. Thus the 2nd MEM_ACC_DATA
 * word is only used for writes larger than 8-bytes etc.
 */
#define RSH_MEM_ACC_DATA_4__FIRST_WORD 0x0920
#define RSH_MEM_ACC_DATA_4__LAST_WORD 0x0958
#define RSH_MEM_ACC_DATA_4__LENGTH 0x0040
#define RSH_MEM_ACC_DATA_4__STRIDE 0x0008

#define RSH_MEM_ACC_DATA_4__DATA_SHIFT 0
#define RSH_MEM_ACC_DATA_4__DATA_WIDTH 64
#define RSH_MEM_ACC_DATA_4__DATA_RESET_VAL 0
#define RSH_MEM_ACC_DATA_4__DATA_RMASK _64bit(0xffffffffffffffff)
#define RSH_MEM_ACC_DATA_4__DATA_MASK  _64bit(0xffffffffffffffff)
#define RSH_MEM_ACC_DATA_4__DATA_FIELD 0,63


/*
 * Memory Access Data.
 * When MEM_ACC_CTL is used to perform a read, this register contains the
 * result data. On a write, this contains the data to be written. Data must
 * be packed into the LSBs. For example, a 2-byte write will always have an
 * even address and the data will always be in bits [16:0] of the first
 * MEM_ACC_DATA word for both reads and writes. Thus the 2nd MEM_ACC_DATA
 * word is only used for writes larger than 8-bytes etc.
 */
#define RSH_MEM_ACC_DATA_5__FIRST_WORD 0x0928
#define RSH_MEM_ACC_DATA_5__LAST_WORD 0x0960
#define RSH_MEM_ACC_DATA_5__LENGTH 0x0040
#define RSH_MEM_ACC_DATA_5__STRIDE 0x0008

#define RSH_MEM_ACC_DATA_5__DATA_SHIFT 0
#define RSH_MEM_ACC_DATA_5__DATA_WIDTH 64
#define RSH_MEM_ACC_DATA_5__DATA_RESET_VAL 0
#define RSH_MEM_ACC_DATA_5__DATA_RMASK _64bit(0xffffffffffffffff)
#define RSH_MEM_ACC_DATA_5__DATA_MASK  _64bit(0xffffffffffffffff)
#define RSH_MEM_ACC_DATA_5__DATA_FIELD 0,63


/*
 * Memory Access Data.
 * When MEM_ACC_CTL is used to perform a read, this register contains the
 * result data. On a write, this contains the data to be written. Data must
 * be packed into the LSBs. For example, a 2-byte write will always have an
 * even address and the data will always be in bits [16:0] of the first
 * MEM_ACC_DATA word for both reads and writes. Thus the 2nd MEM_ACC_DATA
 * word is only used for writes larger than 8-bytes etc.
 */
#define RSH_MEM_ACC_DATA_6__FIRST_WORD 0x0930
#define RSH_MEM_ACC_DATA_6__LAST_WORD 0x0968
#define RSH_MEM_ACC_DATA_6__LENGTH 0x0040
#define RSH_MEM_ACC_DATA_6__STRIDE 0x0008

#define RSH_MEM_ACC_DATA_6__DATA_SHIFT 0
#define RSH_MEM_ACC_DATA_6__DATA_WIDTH 64
#define RSH_MEM_ACC_DATA_6__DATA_RESET_VAL 0
#define RSH_MEM_ACC_DATA_6__DATA_RMASK _64bit(0xffffffffffffffff)
#define RSH_MEM_ACC_DATA_6__DATA_MASK  _64bit(0xffffffffffffffff)
#define RSH_MEM_ACC_DATA_6__DATA_FIELD 0,63


/*
 * Memory Access Data.
 * When MEM_ACC_CTL is used to perform a read, this register contains the
 * result data. On a write, this contains the data to be written. Data must
 * be packed into the LSBs. For example, a 2-byte write will always have an
 * even address and the data will always be in bits [16:0] of the first
 * MEM_ACC_DATA word for both reads and writes. Thus the 2nd MEM_ACC_DATA
 * word is only used for writes larger than 8-bytes etc.
 */
#define RSH_MEM_ACC_DATA_7__FIRST_WORD 0x0938
#define RSH_MEM_ACC_DATA_7__LAST_WORD 0x0970
#define RSH_MEM_ACC_DATA_7__LENGTH 0x0040
#define RSH_MEM_ACC_DATA_7__STRIDE 0x0008

#define RSH_MEM_ACC_DATA_7__DATA_SHIFT 0
#define RSH_MEM_ACC_DATA_7__DATA_WIDTH 64
#define RSH_MEM_ACC_DATA_7__DATA_RESET_VAL 0
#define RSH_MEM_ACC_DATA_7__DATA_RMASK _64bit(0xffffffffffffffff)
#define RSH_MEM_ACC_DATA_7__DATA_MASK  _64bit(0xffffffffffffffff)
#define RSH_MEM_ACC_DATA_7__DATA_FIELD 0,63


/*
 * Memory Access Response Count.
 * Counts number of responses received.
 */
#define RSH_MEM_ACC_RSP_CNT 0x08f8
#define RSH_MEM_ACC_RSP_CNT__LENGTH 0x0001

#define RSH_MEM_ACC_RSP_CNT__VAL_SHIFT 0
#define RSH_MEM_ACC_RSP_CNT__VAL_WIDTH 8
#define RSH_MEM_ACC_RSP_CNT__VAL_RESET_VAL 0
#define RSH_MEM_ACC_RSP_CNT__VAL_RMASK 0xff
#define RSH_MEM_ACC_RSP_CNT__VAL_MASK  0xff
#define RSH_MEM_ACC_RSP_CNT__VAL_FIELD 0,7


/*
 * Boot Record Tile Disable.
 * This register reflects the value of the Boot Record bits used to disable
 * tile clusters and home nodes in the TILE_STATUS register. In BlueField
 * there are a maximum of 8 Tiles; the reserved bits are for future expansion.
 */
#define RSH_BOOT_RECORD_TILE_DISABLE 0x0308
#define RSH_BOOT_RECORD_TILE_DISABLE__LENGTH 0x0001

#define RSH_BOOT_RECORD_TILE_DISABLE__CLUSTER_SHIFT 0
#define RSH_BOOT_RECORD_TILE_DISABLE__CLUSTER_WIDTH 8
#define RSH_BOOT_RECORD_TILE_DISABLE__CLUSTER_RESET_VAL 0
#define RSH_BOOT_RECORD_TILE_DISABLE__CLUSTER_RMASK 0xff
#define RSH_BOOT_RECORD_TILE_DISABLE__CLUSTER_MASK  0xff
#define RSH_BOOT_RECORD_TILE_DISABLE__CLUSTER_FIELD 0,7

#define RSH_BOOT_RECORD_TILE_DISABLE__HNF_SHIFT 32
#define RSH_BOOT_RECORD_TILE_DISABLE__HNF_WIDTH 8
#define RSH_BOOT_RECORD_TILE_DISABLE__HNF_RESET_VAL 0
#define RSH_BOOT_RECORD_TILE_DISABLE__HNF_RMASK 0xff
#define RSH_BOOT_RECORD_TILE_DISABLE__HNF_MASK  _64bit(0xff00000000)
#define RSH_BOOT_RECORD_TILE_DISABLE__HNF_FIELD 32,39


/*
 * eFuse Tile Disable.
 * This register reflects the value of the eFuses used to disable tile
 * clusters and home nodes in the TILE_STATUS register. In BlueField there
 * are a maximum of 8 Tiles; the reserved bits are for future expansion.
 */
#define RSH_EFUSE_TILE_DISABLE 0x0328
#define RSH_EFUSE_TILE_DISABLE__LENGTH 0x0001

#define RSH_EFUSE_TILE_DISABLE__CLUSTER_SHIFT 0
#define RSH_EFUSE_TILE_DISABLE__CLUSTER_WIDTH 8
#define RSH_EFUSE_TILE_DISABLE__CLUSTER_RESET_VAL 0
#define RSH_EFUSE_TILE_DISABLE__CLUSTER_RMASK 0xff
#define RSH_EFUSE_TILE_DISABLE__CLUSTER_MASK  0xff
#define RSH_EFUSE_TILE_DISABLE__CLUSTER_FIELD 0,7

#define RSH_EFUSE_TILE_DISABLE__HNF_SHIFT 32
#define RSH_EFUSE_TILE_DISABLE__HNF_WIDTH 8
#define RSH_EFUSE_TILE_DISABLE__HNF_RESET_VAL 0
#define RSH_EFUSE_TILE_DISABLE__HNF_RMASK 0xff
#define RSH_EFUSE_TILE_DISABLE__HNF_MASK  _64bit(0xff00000000)
#define RSH_EFUSE_TILE_DISABLE__HNF_FIELD 32,39


/*
 * Feature Disable.
 * SKU specific information; used by BL1 code. This register resets only on
 * hard reset and maintains its state after a software reset. It is
 * initialized based on the configuration of the product SKU which is
 * contained in eFuses.
 */
#define RSH_EFUSE_FEATURE 0x0330
#define RSH_EFUSE_FEATURE__LENGTH 0x0001

#define RSH_EFUSE_FEATURE__VALUE_SHIFT 0
#define RSH_EFUSE_FEATURE__VALUE_WIDTH 48
#define RSH_EFUSE_FEATURE__VALUE_RESET_VAL 0
#define RSH_EFUSE_FEATURE__VALUE_RMASK _64bit(0xffffffffffff)
#define RSH_EFUSE_FEATURE__VALUE_MASK  _64bit(0xffffffffffff)
#define RSH_EFUSE_FEATURE__VALUE_FIELD 0,47


/*
 * Tile Disable.
 * Disables HNFs/clusters, and is used in functions such as coresight and the
 * pci bridge setup broadcast. This register resets only on hard reset and
 * maintains its state after a software reset.
 */
#define RSH_TILE_DISABLE 0x0388
#define RSH_TILE_DISABLE__LENGTH 0x0001

#define RSH_TILE_DISABLE__HNF_SHIFT 0
#define RSH_TILE_DISABLE__HNF_WIDTH 8
#define RSH_TILE_DISABLE__HNF_RESET_VAL 0
#define RSH_TILE_DISABLE__HNF_RMASK 0xff
#define RSH_TILE_DISABLE__HNF_MASK  0xff
#define RSH_TILE_DISABLE__HNF_FIELD 0,7

#define RSH_TILE_DISABLE__CLUSTER_SHIFT 32
#define RSH_TILE_DISABLE__CLUSTER_WIDTH 8
#define RSH_TILE_DISABLE__CLUSTER_RESET_VAL 0
#define RSH_TILE_DISABLE__CLUSTER_RMASK 0xff
#define RSH_TILE_DISABLE__CLUSTER_MASK  _64bit(0xff00000000)
#define RSH_TILE_DISABLE__CLUSTER_FIELD 32,39


/*
 * Software Interrupt.
 * Used to trigger interrupts via register write.  Each bit corresponds to a
 * single SWINT interrupt which will be triggered when written with a 1.
 */
#define RSH_SWINT 0x0318
#define RSH_SWINT__LENGTH 0x0001

#define RSH_SWINT__SWINT_SHIFT 0
#define RSH_SWINT__SWINT_WIDTH 4
#define RSH_SWINT__SWINT_RESET_VAL 0
#define RSH_SWINT__SWINT_RMASK 0xf
#define RSH_SWINT__SWINT_MASK  0xf
#define RSH_SWINT__SWINT_FIELD 0,3


/*
 * Pseudo-Rand.
 * Provides a pseudo-random 64-bit value in the range of [1..(2**64)-1] using
 * a 64-bit LFSR (taps are 64,63,61,60).
 */
#define RSH_PSEUDO_RAND 0x0620
#define RSH_PSEUDO_RAND__LENGTH 0x0001

#define RSH_PSEUDO_RAND__PSEUDO_RAND_SHIFT 0
#define RSH_PSEUDO_RAND__PSEUDO_RAND_WIDTH 64
#define RSH_PSEUDO_RAND__PSEUDO_RAND_RMASK _64bit(0xffffffffffffffff)
#define RSH_PSEUDO_RAND__PSEUDO_RAND_MASK  _64bit(0xffffffffffffffff)
#define RSH_PSEUDO_RAND__PSEUDO_RAND_FIELD 0,63


/* Pseudo-Rand Control. */
#define RSH_PSEUDO_RAND_CONTROL 0x0628
#define RSH_PSEUDO_RAND_CONTROL__LENGTH 0x0001

#define RSH_PSEUDO_RAND_CONTROL__P_RAND_MODE_SHIFT 0
#define RSH_PSEUDO_RAND_CONTROL__P_RAND_MODE_WIDTH 1
#define RSH_PSEUDO_RAND_CONTROL__P_RAND_MODE_RESET_VAL 0
#define RSH_PSEUDO_RAND_CONTROL__P_RAND_MODE_RMASK 0x1
#define RSH_PSEUDO_RAND_CONTROL__P_RAND_MODE_MASK  0x1
#define RSH_PSEUDO_RAND_CONTROL__P_RAND_MODE_FIELD 0,0


/*
 * Uptime.
 * Provides core_refclk cycle count since last reset (either hard or soft).
 */
#define RSH_UPTIME 0x0630
#define RSH_UPTIME__LENGTH 0x0001

#define RSH_UPTIME__UPTIME_SHIFT 0
#define RSH_UPTIME__UPTIME_WIDTH 56
#define RSH_UPTIME__UPTIME_RESET_VAL 0
#define RSH_UPTIME__UPTIME_RMASK _64bit(0xffffffffffffff)
#define RSH_UPTIME__UPTIME_MASK  _64bit(0xffffffffffffff)
#define RSH_UPTIME__UPTIME_FIELD 0,55


/*
 * Uptime.
 * Provides core_refclk cycle count since last hard_reset.  This register is
 * not reset on a software reset.
 */
#define RSH_UPTIME_POR 0x0638
#define RSH_UPTIME_POR__LENGTH 0x0001

#define RSH_UPTIME_POR__UPTIME_POR_SHIFT 0
#define RSH_UPTIME_POR__UPTIME_POR_WIDTH 56
#define RSH_UPTIME_POR__UPTIME_POR_RESET_VAL 0
#define RSH_UPTIME_POR__UPTIME_POR_RMASK _64bit(0xffffffffffffff)
#define RSH_UPTIME_POR__UPTIME_POR_MASK  _64bit(0xffffffffffffff)
#define RSH_UPTIME_POR__UPTIME_POR_FIELD 0,55


/*
 * Boot RAM Control.
 * This register provides indirect access to the 512KB boot RAM.
 */
#define RSH_BOOT_RAM_CTL 0x0c00
#define RSH_BOOT_RAM_CTL__LENGTH 0x0001

#define RSH_BOOT_RAM_CTL__IDX_SHIFT 0
#define RSH_BOOT_RAM_CTL__IDX_WIDTH 16
#define RSH_BOOT_RAM_CTL__IDX_RESET_VAL 0
#define RSH_BOOT_RAM_CTL__IDX_RMASK 0xffff
#define RSH_BOOT_RAM_CTL__IDX_MASK  0xffff
#define RSH_BOOT_RAM_CTL__IDX_FIELD 0,15


/*
 * Boot RAM Data.
 * This register provides read/write access to the boot RAM at the address
 * specified in BOOT_RAM_CTL.IDX.  IDX is automatically incremented on any
 * access.
 */
#define RSH_BOOT_RAM_DATA 0x0c08
#define RSH_BOOT_RAM_DATA__LENGTH 0x0001

#define RSH_BOOT_RAM_DATA__BOOT_RAM_DATA_SHIFT 0
#define RSH_BOOT_RAM_DATA__BOOT_RAM_DATA_WIDTH 64
#define RSH_BOOT_RAM_DATA__BOOT_RAM_DATA_RESET_VAL 0
#define RSH_BOOT_RAM_DATA__BOOT_RAM_DATA_RMASK _64bit(0xffffffffffffffff)
#define RSH_BOOT_RAM_DATA__BOOT_RAM_DATA_MASK  _64bit(0xffffffffffffffff)
#define RSH_BOOT_RAM_DATA__BOOT_RAM_DATA_FIELD 0,63


/*
 * Boot RAM Window.
 * This register controls the physical address mapping of the boot ROM and
 * RAM regions.
 */
#define RSH_BOOT_RAM_WINDOW 0x0c10
#define RSH_BOOT_RAM_WINDOW__LENGTH 0x0001

#define RSH_BOOT_RAM_WINDOW__CTL_SHIFT 0
#define RSH_BOOT_RAM_WINDOW__CTL_WIDTH 1
#define RSH_BOOT_RAM_WINDOW__CTL_RESET_VAL 0
#define RSH_BOOT_RAM_WINDOW__CTL_RMASK 0x1
#define RSH_BOOT_RAM_WINDOW__CTL_MASK  0x1
#define RSH_BOOT_RAM_WINDOW__CTL_FIELD 0,0


/*
 * GPIO Mode Control.
 * Device specific mode control for GPIO pins.
 */
#define RSH_BF1_GPIO_MODE 0x0b70
#define RSH_BF1_GPIO_MODE__LENGTH 0x0001

#define RSH_BF1_GPIO_MODE__MMC_ALT_CARD_SHIFT 0
#define RSH_BF1_GPIO_MODE__MMC_ALT_CARD_WIDTH 1
#define RSH_BF1_GPIO_MODE__MMC_ALT_CARD_RESET_VAL 0
#define RSH_BF1_GPIO_MODE__MMC_ALT_CARD_RMASK 0x1
#define RSH_BF1_GPIO_MODE__MMC_ALT_CARD_MASK  0x1
#define RSH_BF1_GPIO_MODE__MMC_ALT_CARD_FIELD 0,0

#define RSH_BF1_GPIO_MODE__MMC_ALT_CARD4_SHIFT 1
#define RSH_BF1_GPIO_MODE__MMC_ALT_CARD4_WIDTH 1
#define RSH_BF1_GPIO_MODE__MMC_ALT_CARD4_RESET_VAL 0
#define RSH_BF1_GPIO_MODE__MMC_ALT_CARD4_RMASK 0x1
#define RSH_BF1_GPIO_MODE__MMC_ALT_CARD4_MASK  0x2
#define RSH_BF1_GPIO_MODE__MMC_ALT_CARD4_FIELD 1,1

#define RSH_BF1_GPIO_MODE__DDR_SAVE0_SW_CTL_SHIFT 2
#define RSH_BF1_GPIO_MODE__DDR_SAVE0_SW_CTL_WIDTH 1
#define RSH_BF1_GPIO_MODE__DDR_SAVE0_SW_CTL_RESET_VAL 0
#define RSH_BF1_GPIO_MODE__DDR_SAVE0_SW_CTL_RMASK 0x1
#define RSH_BF1_GPIO_MODE__DDR_SAVE0_SW_CTL_MASK  0x4
#define RSH_BF1_GPIO_MODE__DDR_SAVE0_SW_CTL_FIELD 2,2

#define RSH_BF1_GPIO_MODE__DDR_SAVE1_SW_CTL_SHIFT 3
#define RSH_BF1_GPIO_MODE__DDR_SAVE1_SW_CTL_WIDTH 1
#define RSH_BF1_GPIO_MODE__DDR_SAVE1_SW_CTL_RESET_VAL 0
#define RSH_BF1_GPIO_MODE__DDR_SAVE1_SW_CTL_RMASK 0x1
#define RSH_BF1_GPIO_MODE__DDR_SAVE1_SW_CTL_MASK  0x8
#define RSH_BF1_GPIO_MODE__DDR_SAVE1_SW_CTL_FIELD 3,3


/*
 * TileMonitor Host to Tile Data.
 * Provides read/write access to the HostToTile FIFO.  When written, the
 * TileMonitor HostToTile FIFO will be written with the associated data and
 * the WPTR will be advanced.  When read, the entry at the head of the FIFO
 * will be returned and the RPTR will be advanced.
 *
 * When empty, reads will have no effect.  Behavior on an empty read is
 * device dependent.  Tile software will receive all 1's on an empty read.
 *
 * When full, writes will be ignored.  Behavior on a full write is device
 * dependent.
 *
 * For Gx9/16/36/72 devices, this FIFO may only be used when PG.AUTO_SEND is
 * zero (packet generator not in boot mode).
 *
 * The FIFO may be drained by reading TM_HOST_TO_TILE_STS.COUNT entries.
 */
#define RSH_TM_HOST_TO_TILE_DATA 0x0a20
#define RSH_TM_HOST_TO_TILE_DATA__LENGTH 0x0001

#define RSH_TM_HOST_TO_TILE_DATA__TM_HOST_TO_TILE_DATA_SHIFT 0
#define RSH_TM_HOST_TO_TILE_DATA__TM_HOST_TO_TILE_DATA_WIDTH 64
#define RSH_TM_HOST_TO_TILE_DATA__TM_HOST_TO_TILE_DATA_RMASK _64bit(0xffffffffffffffff)
#define RSH_TM_HOST_TO_TILE_DATA__TM_HOST_TO_TILE_DATA_MASK  _64bit(0xffffffffffffffff)
#define RSH_TM_HOST_TO_TILE_DATA__TM_HOST_TO_TILE_DATA_FIELD 0,63


/*
 * TileMonitor Host to Tile Status.
 * Provides status of the HostToTile TileMonitor FIFO.
 */
#define RSH_TM_HOST_TO_TILE_STS 0x0a28
#define RSH_TM_HOST_TO_TILE_STS__LENGTH 0x0001

#define RSH_TM_HOST_TO_TILE_STS__COUNT_SHIFT 0
#define RSH_TM_HOST_TO_TILE_STS__COUNT_WIDTH 9
#define RSH_TM_HOST_TO_TILE_STS__COUNT_RESET_VAL 0
#define RSH_TM_HOST_TO_TILE_STS__COUNT_RMASK 0x1ff
#define RSH_TM_HOST_TO_TILE_STS__COUNT_MASK  0x1ff
#define RSH_TM_HOST_TO_TILE_STS__COUNT_FIELD 0,8


/*
 * TileMonitor Host to Tile Control.
 * Provides control over FIFO interrupts.  Note that the HWM/LWM interrupts
 * trigger continuously as long as the FIFO is is at or above/below the
 * associated water mark.  Thus these interrupts are typically used in
 * INT_BIND.MODE=0 and should be cleared by SW after the condition has been
 * handled (FIFO filled/drained as appropriate).
 */
#define RSH_TM_HOST_TO_TILE_CTL 0x0a30
#define RSH_TM_HOST_TO_TILE_CTL__LENGTH 0x0001

#define RSH_TM_HOST_TO_TILE_CTL__LWM_SHIFT 0
#define RSH_TM_HOST_TO_TILE_CTL__LWM_WIDTH 8
#define RSH_TM_HOST_TO_TILE_CTL__LWM_RESET_VAL 128
#define RSH_TM_HOST_TO_TILE_CTL__LWM_RMASK 0xff
#define RSH_TM_HOST_TO_TILE_CTL__LWM_MASK  0xff
#define RSH_TM_HOST_TO_TILE_CTL__LWM_FIELD 0,7

#define RSH_TM_HOST_TO_TILE_CTL__HWM_SHIFT 8
#define RSH_TM_HOST_TO_TILE_CTL__HWM_WIDTH 8
#define RSH_TM_HOST_TO_TILE_CTL__HWM_RESET_VAL 128
#define RSH_TM_HOST_TO_TILE_CTL__HWM_RMASK 0xff
#define RSH_TM_HOST_TO_TILE_CTL__HWM_MASK  0xff00
#define RSH_TM_HOST_TO_TILE_CTL__HWM_FIELD 8,15

#define RSH_TM_HOST_TO_TILE_CTL__MAX_ENTRIES_SHIFT 32
#define RSH_TM_HOST_TO_TILE_CTL__MAX_ENTRIES_WIDTH 9
#define RSH_TM_HOST_TO_TILE_CTL__MAX_ENTRIES_RESET_VAL 256
#define RSH_TM_HOST_TO_TILE_CTL__MAX_ENTRIES_RMASK 0x1ff
#define RSH_TM_HOST_TO_TILE_CTL__MAX_ENTRIES_MASK  _64bit(0x1ff00000000)
#define RSH_TM_HOST_TO_TILE_CTL__MAX_ENTRIES_FIELD 32,40


/*
 * TileMonitor tile to host Data.
 * Provides read/write access to the TileToHost FIFO.  When written, the
 * TileMonitor TileToHost FIFO will be written with the associated data and
 * the WPTR will be advanced.  When read, the entry at the head of the FIFO
 * will be returned and the RPTR will be advanced.
 *
 * When empty, reads will have no effect.  Behavior on an empty read is
 * device dependent.  Tile software will receive all 1's on an empty read.
 *
 * When full, writes will be ignored.  Behavior on a full write is device
 * dependent.
 *
 * For Gx9/16/36/72 devices, this FIFO may only be used when PG.AUTO_SEND is
 * zero (packet generator not in boot mode).
 *
 * The FIFO may be drained by reading TM_TILE_TO_HOST_STS.COUNT entries.
 */
#define RSH_TM_TILE_TO_HOST_DATA 0x0a40
#define RSH_TM_TILE_TO_HOST_DATA__LENGTH 0x0001

#define RSH_TM_TILE_TO_HOST_DATA__TM_TILE_TO_HOST_DATA_SHIFT 0
#define RSH_TM_TILE_TO_HOST_DATA__TM_TILE_TO_HOST_DATA_WIDTH 64
#define RSH_TM_TILE_TO_HOST_DATA__TM_TILE_TO_HOST_DATA_RESET_VAL 0
#define RSH_TM_TILE_TO_HOST_DATA__TM_TILE_TO_HOST_DATA_RMASK _64bit(0xffffffffffffffff)
#define RSH_TM_TILE_TO_HOST_DATA__TM_TILE_TO_HOST_DATA_MASK  _64bit(0xffffffffffffffff)
#define RSH_TM_TILE_TO_HOST_DATA__TM_TILE_TO_HOST_DATA_FIELD 0,63


/*
 * TileMonitor tile to host status.
 * Provides status of the TileToHost TileMonitor FIFO.
 */
#define RSH_TM_TILE_TO_HOST_STS 0x0a48
#define RSH_TM_TILE_TO_HOST_STS__LENGTH 0x0001

#define RSH_TM_TILE_TO_HOST_STS__COUNT_SHIFT 0
#define RSH_TM_TILE_TO_HOST_STS__COUNT_WIDTH 9
#define RSH_TM_TILE_TO_HOST_STS__COUNT_RESET_VAL 0
#define RSH_TM_TILE_TO_HOST_STS__COUNT_RMASK 0x1ff
#define RSH_TM_TILE_TO_HOST_STS__COUNT_MASK  0x1ff
#define RSH_TM_TILE_TO_HOST_STS__COUNT_FIELD 0,8


/*
 * TileMonitor tile to host Control.
 * Provides control over FIFO interrupts.  Note that the HWM/LWM interrupts
 * trigger continuously as long as the FIFO is is at or above/below the
 * associated water mark.  Thus these interrupts are typically used in
 * INT_BIND.MODE=0 and should be cleared by SW after the condition has been
 * handled (FIFO filled/drained as appropriate).
 */
#define RSH_TM_TILE_TO_HOST_CTL 0x0a50
#define RSH_TM_TILE_TO_HOST_CTL__LENGTH 0x0001

#define RSH_TM_TILE_TO_HOST_CTL__LWM_SHIFT 0
#define RSH_TM_TILE_TO_HOST_CTL__LWM_WIDTH 8
#define RSH_TM_TILE_TO_HOST_CTL__LWM_RESET_VAL 128
#define RSH_TM_TILE_TO_HOST_CTL__LWM_RMASK 0xff
#define RSH_TM_TILE_TO_HOST_CTL__LWM_MASK  0xff
#define RSH_TM_TILE_TO_HOST_CTL__LWM_FIELD 0,7

#define RSH_TM_TILE_TO_HOST_CTL__HWM_SHIFT 8
#define RSH_TM_TILE_TO_HOST_CTL__HWM_WIDTH 8
#define RSH_TM_TILE_TO_HOST_CTL__HWM_RESET_VAL 128
#define RSH_TM_TILE_TO_HOST_CTL__HWM_RMASK 0xff
#define RSH_TM_TILE_TO_HOST_CTL__HWM_MASK  0xff00
#define RSH_TM_TILE_TO_HOST_CTL__HWM_FIELD 8,15

#define RSH_TM_TILE_TO_HOST_CTL__MAX_ENTRIES_SHIFT 32
#define RSH_TM_TILE_TO_HOST_CTL__MAX_ENTRIES_WIDTH 9
#define RSH_TM_TILE_TO_HOST_CTL__MAX_ENTRIES_RESET_VAL 256
#define RSH_TM_TILE_TO_HOST_CTL__MAX_ENTRIES_RMASK 0x1ff
#define RSH_TM_TILE_TO_HOST_CTL__MAX_ENTRIES_MASK  _64bit(0x1ff00000000)
#define RSH_TM_TILE_TO_HOST_CTL__MAX_ENTRIES_FIELD 32,40


/* Scratchpad. */
#define RSH_SCRATCHPAD1 0x0c20
#define RSH_SCRATCHPAD1__LENGTH 0x0001

#define RSH_SCRATCHPAD1__SCRATCHPAD1_SHIFT 0
#define RSH_SCRATCHPAD1__SCRATCHPAD1_WIDTH 64
#define RSH_SCRATCHPAD1__SCRATCHPAD1_RESET_VAL 0
#define RSH_SCRATCHPAD1__SCRATCHPAD1_RMASK _64bit(0xffffffffffffffff)
#define RSH_SCRATCHPAD1__SCRATCHPAD1_MASK  _64bit(0xffffffffffffffff)
#define RSH_SCRATCHPAD1__SCRATCHPAD1_FIELD 0,63


/* Scratchpad. */
#define RSH_SCRATCHPAD2 0x0c28
#define RSH_SCRATCHPAD2__LENGTH 0x0001

#define RSH_SCRATCHPAD2__SCRATCHPAD2_SHIFT 0
#define RSH_SCRATCHPAD2__SCRATCHPAD2_WIDTH 64
#define RSH_SCRATCHPAD2__SCRATCHPAD2_RESET_VAL 0
#define RSH_SCRATCHPAD2__SCRATCHPAD2_RMASK _64bit(0xffffffffffffffff)
#define RSH_SCRATCHPAD2__SCRATCHPAD2_MASK  _64bit(0xffffffffffffffff)
#define RSH_SCRATCHPAD2__SCRATCHPAD2_FIELD 0,63


/* Scratchpad. */
#define RSH_SCRATCHPAD3 0x0c30
#define RSH_SCRATCHPAD3__LENGTH 0x0001

#define RSH_SCRATCHPAD3__SCRATCHPAD3_SHIFT 0
#define RSH_SCRATCHPAD3__SCRATCHPAD3_WIDTH 64
#define RSH_SCRATCHPAD3__SCRATCHPAD3_RESET_VAL 0
#define RSH_SCRATCHPAD3__SCRATCHPAD3_RMASK _64bit(0xffffffffffffffff)
#define RSH_SCRATCHPAD3__SCRATCHPAD3_MASK  _64bit(0xffffffffffffffff)
#define RSH_SCRATCHPAD3__SCRATCHPAD3_FIELD 0,63


/* Scratchpad. */
#define RSH_SCRATCHPAD4 0x0c38
#define RSH_SCRATCHPAD4__LENGTH 0x0001

#define RSH_SCRATCHPAD4__SCRATCHPAD4_SHIFT 0
#define RSH_SCRATCHPAD4__SCRATCHPAD4_WIDTH 64
#define RSH_SCRATCHPAD4__SCRATCHPAD4_RESET_VAL 0
#define RSH_SCRATCHPAD4__SCRATCHPAD4_RMASK _64bit(0xffffffffffffffff)
#define RSH_SCRATCHPAD4__SCRATCHPAD4_MASK  _64bit(0xffffffffffffffff)
#define RSH_SCRATCHPAD4__SCRATCHPAD4_FIELD 0,63


/*
 * Secure Boot Mode.
 * Indicates status about the boot mode.
 */
#define RSH_SB_MODE 0x1000
#define RSH_SB_MODE__LENGTH 0x0001

#define RSH_SB_MODE__SECURE_SHIFT 0
#define RSH_SB_MODE__SECURE_WIDTH 2
#define RSH_SB_MODE__SECURE_RESET_VAL 0
#define RSH_SB_MODE__SECURE_RMASK 0x3
#define RSH_SB_MODE__SECURE_MASK  0x3
#define RSH_SB_MODE__SECURE_FIELD 0,1
#define RSH_SB_MODE__SECURE_VAL_SOFT_NON_SECURE 0x0
#define RSH_SB_MODE__SECURE_VAL_SECURE 0x1
#define RSH_SB_MODE__SECURE_VAL_HARD_NON_SECURE 0x2
#define RSH_SB_MODE__SECURE_VAL_RMA 0x3

#define RSH_SB_MODE__TEST_SHIFT 2
#define RSH_SB_MODE__TEST_WIDTH 2
#define RSH_SB_MODE__TEST_RESET_VAL 0
#define RSH_SB_MODE__TEST_RMASK 0x3
#define RSH_SB_MODE__TEST_MASK  0xc
#define RSH_SB_MODE__TEST_FIELD 2,3
#define RSH_SB_MODE__TEST_VAL_SOFT_NON_SECURE 0x0
#define RSH_SB_MODE__TEST_VAL_SECURE 0x1
#define RSH_SB_MODE__TEST_VAL_HARD_NON_SECURE 0x2
#define RSH_SB_MODE__TEST_VAL_RMA 0x3

#define RSH_SB_MODE__INIT_DONE_SHIFT 7
#define RSH_SB_MODE__INIT_DONE_WIDTH 1
#define RSH_SB_MODE__INIT_DONE_RMASK 0x1
#define RSH_SB_MODE__INIT_DONE_MASK  0x80
#define RSH_SB_MODE__INIT_DONE_FIELD 7,7

#define RSH_SB_MODE__BOOT_STATUS_SHIFT 8
#define RSH_SB_MODE__BOOT_STATUS_WIDTH 4
#define RSH_SB_MODE__BOOT_STATUS_RESET_VAL 0
#define RSH_SB_MODE__BOOT_STATUS_RMASK 0xf
#define RSH_SB_MODE__BOOT_STATUS_MASK  0xf00
#define RSH_SB_MODE__BOOT_STATUS_FIELD 8,11


/*
 * Secure Boot Key Access.
 * Controls access to keys.
 */
#define RSH_SB_KEY_ACCESS 0x1010
#define RSH_SB_KEY_ACCESS__LENGTH 0x0001

#define RSH_SB_KEY_ACCESS__WRITE_DISABLE_SHIFT 0
#define RSH_SB_KEY_ACCESS__WRITE_DISABLE_WIDTH 4
#define RSH_SB_KEY_ACCESS__WRITE_DISABLE_RESET_VAL 0
#define RSH_SB_KEY_ACCESS__WRITE_DISABLE_RMASK 0xf
#define RSH_SB_KEY_ACCESS__WRITE_DISABLE_MASK  0xf
#define RSH_SB_KEY_ACCESS__WRITE_DISABLE_FIELD 0,3

#define RSH_SB_KEY_ACCESS__EFUSE_REREAD_ENABLE_SHIFT 8
#define RSH_SB_KEY_ACCESS__EFUSE_REREAD_ENABLE_WIDTH 1
#define RSH_SB_KEY_ACCESS__EFUSE_REREAD_ENABLE_RESET_VAL 0
#define RSH_SB_KEY_ACCESS__EFUSE_REREAD_ENABLE_RMASK 0x1
#define RSH_SB_KEY_ACCESS__EFUSE_REREAD_ENABLE_MASK  0x100
#define RSH_SB_KEY_ACCESS__EFUSE_REREAD_ENABLE_FIELD 8,8


/*
 * Secure Boot Key Valid.
 * Provides information about which version of each key is valid.
 */
#define RSH_SB_KEY_VLD 0x1008
#define RSH_SB_KEY_VLD__LENGTH 0x0001

#define RSH_SB_KEY_VLD__KEY_0_SHIFT 0
#define RSH_SB_KEY_VLD__KEY_0_WIDTH 8
#define RSH_SB_KEY_VLD__KEY_0_RESET_VAL 0
#define RSH_SB_KEY_VLD__KEY_0_RMASK 0xff
#define RSH_SB_KEY_VLD__KEY_0_MASK  0xff
#define RSH_SB_KEY_VLD__KEY_0_FIELD 0,7

#define RSH_SB_KEY_VLD__KEY_1_SHIFT 8
#define RSH_SB_KEY_VLD__KEY_1_WIDTH 8
#define RSH_SB_KEY_VLD__KEY_1_RESET_VAL 0
#define RSH_SB_KEY_VLD__KEY_1_RMASK 0xff
#define RSH_SB_KEY_VLD__KEY_1_MASK  0xff00
#define RSH_SB_KEY_VLD__KEY_1_FIELD 8,15

#define RSH_SB_KEY_VLD__KEY_2_SHIFT 16
#define RSH_SB_KEY_VLD__KEY_2_WIDTH 8
#define RSH_SB_KEY_VLD__KEY_2_RESET_VAL 0
#define RSH_SB_KEY_VLD__KEY_2_RMASK 0xff
#define RSH_SB_KEY_VLD__KEY_2_MASK  0xff0000
#define RSH_SB_KEY_VLD__KEY_2_FIELD 16,23

#define RSH_SB_KEY_VLD__KEY_3_SHIFT 24
#define RSH_SB_KEY_VLD__KEY_3_WIDTH 8
#define RSH_SB_KEY_VLD__KEY_3_RESET_VAL 0
#define RSH_SB_KEY_VLD__KEY_3_RMASK 0xff
#define RSH_SB_KEY_VLD__KEY_3_MASK  0xff000000
#define RSH_SB_KEY_VLD__KEY_3_FIELD 24,31


/*
 * Key 0.
 * Key
 */
#define RSH_SB_KEY_0__FIRST_WORD 0x1020
#define RSH_SB_KEY_0__LAST_WORD 0x1058
#define RSH_SB_KEY_0__LENGTH 0x0040
#define RSH_SB_KEY_0__STRIDE 0x0008

#define RSH_SB_KEY_0__SB_KEY_SHIFT 0
#define RSH_SB_KEY_0__SB_KEY_WIDTH 64
#define RSH_SB_KEY_0__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_0__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_0__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_0__SB_KEY_FIELD 0,63


/*
 * Key 0.
 * Key
 */
#define RSH_SB_KEY_0_1__FIRST_WORD 0x1028
#define RSH_SB_KEY_0_1__LAST_WORD 0x1060
#define RSH_SB_KEY_0_1__LENGTH 0x0040
#define RSH_SB_KEY_0_1__STRIDE 0x0008

#define RSH_SB_KEY_0_1__SB_KEY_SHIFT 0
#define RSH_SB_KEY_0_1__SB_KEY_WIDTH 64
#define RSH_SB_KEY_0_1__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_0_1__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_0_1__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_0_1__SB_KEY_FIELD 0,63


/*
 * Key 0.
 * Key
 */
#define RSH_SB_KEY_0_2__FIRST_WORD 0x1030
#define RSH_SB_KEY_0_2__LAST_WORD 0x1068
#define RSH_SB_KEY_0_2__LENGTH 0x0040
#define RSH_SB_KEY_0_2__STRIDE 0x0008

#define RSH_SB_KEY_0_2__SB_KEY_SHIFT 0
#define RSH_SB_KEY_0_2__SB_KEY_WIDTH 64
#define RSH_SB_KEY_0_2__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_0_2__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_0_2__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_0_2__SB_KEY_FIELD 0,63


/*
 * Key 0.
 * Key
 */
#define RSH_SB_KEY_0_3__FIRST_WORD 0x1038
#define RSH_SB_KEY_0_3__LAST_WORD 0x1070
#define RSH_SB_KEY_0_3__LENGTH 0x0040
#define RSH_SB_KEY_0_3__STRIDE 0x0008

#define RSH_SB_KEY_0_3__SB_KEY_SHIFT 0
#define RSH_SB_KEY_0_3__SB_KEY_WIDTH 64
#define RSH_SB_KEY_0_3__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_0_3__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_0_3__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_0_3__SB_KEY_FIELD 0,63


/*
 * Key 0.
 * Key
 */
#define RSH_SB_KEY_0_4__FIRST_WORD 0x1040
#define RSH_SB_KEY_0_4__LAST_WORD 0x1078
#define RSH_SB_KEY_0_4__LENGTH 0x0040
#define RSH_SB_KEY_0_4__STRIDE 0x0008

#define RSH_SB_KEY_0_4__SB_KEY_SHIFT 0
#define RSH_SB_KEY_0_4__SB_KEY_WIDTH 64
#define RSH_SB_KEY_0_4__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_0_4__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_0_4__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_0_4__SB_KEY_FIELD 0,63


/*
 * Key 0.
 * Key
 */
#define RSH_SB_KEY_0_5__FIRST_WORD 0x1048
#define RSH_SB_KEY_0_5__LAST_WORD 0x1080
#define RSH_SB_KEY_0_5__LENGTH 0x0040
#define RSH_SB_KEY_0_5__STRIDE 0x0008

#define RSH_SB_KEY_0_5__SB_KEY_SHIFT 0
#define RSH_SB_KEY_0_5__SB_KEY_WIDTH 64
#define RSH_SB_KEY_0_5__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_0_5__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_0_5__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_0_5__SB_KEY_FIELD 0,63


/*
 * Key 0.
 * Key
 */
#define RSH_SB_KEY_0_6__FIRST_WORD 0x1050
#define RSH_SB_KEY_0_6__LAST_WORD 0x1088
#define RSH_SB_KEY_0_6__LENGTH 0x0040
#define RSH_SB_KEY_0_6__STRIDE 0x0008

#define RSH_SB_KEY_0_6__SB_KEY_SHIFT 0
#define RSH_SB_KEY_0_6__SB_KEY_WIDTH 64
#define RSH_SB_KEY_0_6__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_0_6__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_0_6__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_0_6__SB_KEY_FIELD 0,63


/*
 * Key 0.
 * Key
 */
#define RSH_SB_KEY_0_7__FIRST_WORD 0x1058
#define RSH_SB_KEY_0_7__LAST_WORD 0x1090
#define RSH_SB_KEY_0_7__LENGTH 0x0040
#define RSH_SB_KEY_0_7__STRIDE 0x0008

#define RSH_SB_KEY_0_7__SB_KEY_SHIFT 0
#define RSH_SB_KEY_0_7__SB_KEY_WIDTH 64
#define RSH_SB_KEY_0_7__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_0_7__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_0_7__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_0_7__SB_KEY_FIELD 0,63


/*
 * Key 1.
 * Key
 */
#define RSH_SB_KEY_1__FIRST_WORD 0x1060
#define RSH_SB_KEY_1__LAST_WORD 0x1098
#define RSH_SB_KEY_1__LENGTH 0x0040
#define RSH_SB_KEY_1__STRIDE 0x0008

#define RSH_SB_KEY_1__SB_KEY_SHIFT 0
#define RSH_SB_KEY_1__SB_KEY_WIDTH 64
#define RSH_SB_KEY_1__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_1__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_1__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_1__SB_KEY_FIELD 0,63


/*
 * Key 1.
 * Key
 */
#define RSH_SB_KEY_1_1__FIRST_WORD 0x1068
#define RSH_SB_KEY_1_1__LAST_WORD 0x10a0
#define RSH_SB_KEY_1_1__LENGTH 0x0040
#define RSH_SB_KEY_1_1__STRIDE 0x0008

#define RSH_SB_KEY_1_1__SB_KEY_SHIFT 0
#define RSH_SB_KEY_1_1__SB_KEY_WIDTH 64
#define RSH_SB_KEY_1_1__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_1_1__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_1_1__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_1_1__SB_KEY_FIELD 0,63


/*
 * Key 1.
 * Key
 */
#define RSH_SB_KEY_1_2__FIRST_WORD 0x1070
#define RSH_SB_KEY_1_2__LAST_WORD 0x10a8
#define RSH_SB_KEY_1_2__LENGTH 0x0040
#define RSH_SB_KEY_1_2__STRIDE 0x0008

#define RSH_SB_KEY_1_2__SB_KEY_SHIFT 0
#define RSH_SB_KEY_1_2__SB_KEY_WIDTH 64
#define RSH_SB_KEY_1_2__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_1_2__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_1_2__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_1_2__SB_KEY_FIELD 0,63


/*
 * Key 1.
 * Key
 */
#define RSH_SB_KEY_1_3__FIRST_WORD 0x1078
#define RSH_SB_KEY_1_3__LAST_WORD 0x10b0
#define RSH_SB_KEY_1_3__LENGTH 0x0040
#define RSH_SB_KEY_1_3__STRIDE 0x0008

#define RSH_SB_KEY_1_3__SB_KEY_SHIFT 0
#define RSH_SB_KEY_1_3__SB_KEY_WIDTH 64
#define RSH_SB_KEY_1_3__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_1_3__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_1_3__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_1_3__SB_KEY_FIELD 0,63


/*
 * Key 1.
 * Key
 */
#define RSH_SB_KEY_1_4__FIRST_WORD 0x1080
#define RSH_SB_KEY_1_4__LAST_WORD 0x10b8
#define RSH_SB_KEY_1_4__LENGTH 0x0040
#define RSH_SB_KEY_1_4__STRIDE 0x0008

#define RSH_SB_KEY_1_4__SB_KEY_SHIFT 0
#define RSH_SB_KEY_1_4__SB_KEY_WIDTH 64
#define RSH_SB_KEY_1_4__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_1_4__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_1_4__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_1_4__SB_KEY_FIELD 0,63


/*
 * Key 1.
 * Key
 */
#define RSH_SB_KEY_1_5__FIRST_WORD 0x1088
#define RSH_SB_KEY_1_5__LAST_WORD 0x10c0
#define RSH_SB_KEY_1_5__LENGTH 0x0040
#define RSH_SB_KEY_1_5__STRIDE 0x0008

#define RSH_SB_KEY_1_5__SB_KEY_SHIFT 0
#define RSH_SB_KEY_1_5__SB_KEY_WIDTH 64
#define RSH_SB_KEY_1_5__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_1_5__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_1_5__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_1_5__SB_KEY_FIELD 0,63


/*
 * Key 1.
 * Key
 */
#define RSH_SB_KEY_1_6__FIRST_WORD 0x1090
#define RSH_SB_KEY_1_6__LAST_WORD 0x10c8
#define RSH_SB_KEY_1_6__LENGTH 0x0040
#define RSH_SB_KEY_1_6__STRIDE 0x0008

#define RSH_SB_KEY_1_6__SB_KEY_SHIFT 0
#define RSH_SB_KEY_1_6__SB_KEY_WIDTH 64
#define RSH_SB_KEY_1_6__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_1_6__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_1_6__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_1_6__SB_KEY_FIELD 0,63


/*
 * Key 1.
 * Key
 */
#define RSH_SB_KEY_1_7__FIRST_WORD 0x1098
#define RSH_SB_KEY_1_7__LAST_WORD 0x10d0
#define RSH_SB_KEY_1_7__LENGTH 0x0040
#define RSH_SB_KEY_1_7__STRIDE 0x0008

#define RSH_SB_KEY_1_7__SB_KEY_SHIFT 0
#define RSH_SB_KEY_1_7__SB_KEY_WIDTH 64
#define RSH_SB_KEY_1_7__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_1_7__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_1_7__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_1_7__SB_KEY_FIELD 0,63


/*
 * Key 2.
 * Key
 */
#define RSH_SB_KEY_2__FIRST_WORD 0x10a0
#define RSH_SB_KEY_2__LAST_WORD 0x10d8
#define RSH_SB_KEY_2__LENGTH 0x0040
#define RSH_SB_KEY_2__STRIDE 0x0008

#define RSH_SB_KEY_2__SB_KEY_SHIFT 0
#define RSH_SB_KEY_2__SB_KEY_WIDTH 64
#define RSH_SB_KEY_2__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_2__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_2__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_2__SB_KEY_FIELD 0,63


/*
 * Key 2.
 * Key
 */
#define RSH_SB_KEY_2_1__FIRST_WORD 0x10a8
#define RSH_SB_KEY_2_1__LAST_WORD 0x10e0
#define RSH_SB_KEY_2_1__LENGTH 0x0040
#define RSH_SB_KEY_2_1__STRIDE 0x0008

#define RSH_SB_KEY_2_1__SB_KEY_SHIFT 0
#define RSH_SB_KEY_2_1__SB_KEY_WIDTH 64
#define RSH_SB_KEY_2_1__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_2_1__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_2_1__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_2_1__SB_KEY_FIELD 0,63


/*
 * Key 2.
 * Key
 */
#define RSH_SB_KEY_2_2__FIRST_WORD 0x10b0
#define RSH_SB_KEY_2_2__LAST_WORD 0x10e8
#define RSH_SB_KEY_2_2__LENGTH 0x0040
#define RSH_SB_KEY_2_2__STRIDE 0x0008

#define RSH_SB_KEY_2_2__SB_KEY_SHIFT 0
#define RSH_SB_KEY_2_2__SB_KEY_WIDTH 64
#define RSH_SB_KEY_2_2__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_2_2__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_2_2__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_2_2__SB_KEY_FIELD 0,63


/*
 * Key 2.
 * Key
 */
#define RSH_SB_KEY_2_3__FIRST_WORD 0x10b8
#define RSH_SB_KEY_2_3__LAST_WORD 0x10f0
#define RSH_SB_KEY_2_3__LENGTH 0x0040
#define RSH_SB_KEY_2_3__STRIDE 0x0008

#define RSH_SB_KEY_2_3__SB_KEY_SHIFT 0
#define RSH_SB_KEY_2_3__SB_KEY_WIDTH 64
#define RSH_SB_KEY_2_3__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_2_3__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_2_3__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_2_3__SB_KEY_FIELD 0,63


/*
 * Key 2.
 * Key
 */
#define RSH_SB_KEY_2_4__FIRST_WORD 0x10c0
#define RSH_SB_KEY_2_4__LAST_WORD 0x10f8
#define RSH_SB_KEY_2_4__LENGTH 0x0040
#define RSH_SB_KEY_2_4__STRIDE 0x0008

#define RSH_SB_KEY_2_4__SB_KEY_SHIFT 0
#define RSH_SB_KEY_2_4__SB_KEY_WIDTH 64
#define RSH_SB_KEY_2_4__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_2_4__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_2_4__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_2_4__SB_KEY_FIELD 0,63


/*
 * Key 2.
 * Key
 */
#define RSH_SB_KEY_2_5__FIRST_WORD 0x10c8
#define RSH_SB_KEY_2_5__LAST_WORD 0x1100
#define RSH_SB_KEY_2_5__LENGTH 0x0040
#define RSH_SB_KEY_2_5__STRIDE 0x0008

#define RSH_SB_KEY_2_5__SB_KEY_SHIFT 0
#define RSH_SB_KEY_2_5__SB_KEY_WIDTH 64
#define RSH_SB_KEY_2_5__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_2_5__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_2_5__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_2_5__SB_KEY_FIELD 0,63


/*
 * Key 2.
 * Key
 */
#define RSH_SB_KEY_2_6__FIRST_WORD 0x10d0
#define RSH_SB_KEY_2_6__LAST_WORD 0x1108
#define RSH_SB_KEY_2_6__LENGTH 0x0040
#define RSH_SB_KEY_2_6__STRIDE 0x0008

#define RSH_SB_KEY_2_6__SB_KEY_SHIFT 0
#define RSH_SB_KEY_2_6__SB_KEY_WIDTH 64
#define RSH_SB_KEY_2_6__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_2_6__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_2_6__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_2_6__SB_KEY_FIELD 0,63


/*
 * Key 2.
 * Key
 */
#define RSH_SB_KEY_2_7__FIRST_WORD 0x10d8
#define RSH_SB_KEY_2_7__LAST_WORD 0x1110
#define RSH_SB_KEY_2_7__LENGTH 0x0040
#define RSH_SB_KEY_2_7__STRIDE 0x0008

#define RSH_SB_KEY_2_7__SB_KEY_SHIFT 0
#define RSH_SB_KEY_2_7__SB_KEY_WIDTH 64
#define RSH_SB_KEY_2_7__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_2_7__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_2_7__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_2_7__SB_KEY_FIELD 0,63


/*
 * Key 3.
 * Key
 */
#define RSH_SB_KEY_3__FIRST_WORD 0x10e0
#define RSH_SB_KEY_3__LAST_WORD 0x1118
#define RSH_SB_KEY_3__LENGTH 0x0040
#define RSH_SB_KEY_3__STRIDE 0x0008

#define RSH_SB_KEY_3__SB_KEY_SHIFT 0
#define RSH_SB_KEY_3__SB_KEY_WIDTH 64
#define RSH_SB_KEY_3__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_3__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_3__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_3__SB_KEY_FIELD 0,63


/*
 * Key 3.
 * Key
 */
#define RSH_SB_KEY_3_1__FIRST_WORD 0x10e8
#define RSH_SB_KEY_3_1__LAST_WORD 0x1120
#define RSH_SB_KEY_3_1__LENGTH 0x0040
#define RSH_SB_KEY_3_1__STRIDE 0x0008

#define RSH_SB_KEY_3_1__SB_KEY_SHIFT 0
#define RSH_SB_KEY_3_1__SB_KEY_WIDTH 64
#define RSH_SB_KEY_3_1__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_3_1__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_3_1__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_3_1__SB_KEY_FIELD 0,63


/*
 * Key 3.
 * Key
 */
#define RSH_SB_KEY_3_2__FIRST_WORD 0x10f0
#define RSH_SB_KEY_3_2__LAST_WORD 0x1128
#define RSH_SB_KEY_3_2__LENGTH 0x0040
#define RSH_SB_KEY_3_2__STRIDE 0x0008

#define RSH_SB_KEY_3_2__SB_KEY_SHIFT 0
#define RSH_SB_KEY_3_2__SB_KEY_WIDTH 64
#define RSH_SB_KEY_3_2__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_3_2__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_3_2__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_3_2__SB_KEY_FIELD 0,63


/*
 * Key 3.
 * Key
 */
#define RSH_SB_KEY_3_3__FIRST_WORD 0x10f8
#define RSH_SB_KEY_3_3__LAST_WORD 0x1130
#define RSH_SB_KEY_3_3__LENGTH 0x0040
#define RSH_SB_KEY_3_3__STRIDE 0x0008

#define RSH_SB_KEY_3_3__SB_KEY_SHIFT 0
#define RSH_SB_KEY_3_3__SB_KEY_WIDTH 64
#define RSH_SB_KEY_3_3__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_3_3__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_3_3__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_3_3__SB_KEY_FIELD 0,63


/*
 * Key 3.
 * Key
 */
#define RSH_SB_KEY_3_4__FIRST_WORD 0x1100
#define RSH_SB_KEY_3_4__LAST_WORD 0x1138
#define RSH_SB_KEY_3_4__LENGTH 0x0040
#define RSH_SB_KEY_3_4__STRIDE 0x0008

#define RSH_SB_KEY_3_4__SB_KEY_SHIFT 0
#define RSH_SB_KEY_3_4__SB_KEY_WIDTH 64
#define RSH_SB_KEY_3_4__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_3_4__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_3_4__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_3_4__SB_KEY_FIELD 0,63


/*
 * Key 3.
 * Key
 */
#define RSH_SB_KEY_3_5__FIRST_WORD 0x1108
#define RSH_SB_KEY_3_5__LAST_WORD 0x1140
#define RSH_SB_KEY_3_5__LENGTH 0x0040
#define RSH_SB_KEY_3_5__STRIDE 0x0008

#define RSH_SB_KEY_3_5__SB_KEY_SHIFT 0
#define RSH_SB_KEY_3_5__SB_KEY_WIDTH 64
#define RSH_SB_KEY_3_5__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_3_5__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_3_5__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_3_5__SB_KEY_FIELD 0,63


/*
 * Key 3.
 * Key
 */
#define RSH_SB_KEY_3_6__FIRST_WORD 0x1110
#define RSH_SB_KEY_3_6__LAST_WORD 0x1148
#define RSH_SB_KEY_3_6__LENGTH 0x0040
#define RSH_SB_KEY_3_6__STRIDE 0x0008

#define RSH_SB_KEY_3_6__SB_KEY_SHIFT 0
#define RSH_SB_KEY_3_6__SB_KEY_WIDTH 64
#define RSH_SB_KEY_3_6__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_3_6__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_3_6__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_3_6__SB_KEY_FIELD 0,63


/*
 * Key 3.
 * Key
 */
#define RSH_SB_KEY_3_7__FIRST_WORD 0x1118
#define RSH_SB_KEY_3_7__LAST_WORD 0x1150
#define RSH_SB_KEY_3_7__LENGTH 0x0040
#define RSH_SB_KEY_3_7__STRIDE 0x0008

#define RSH_SB_KEY_3_7__SB_KEY_SHIFT 0
#define RSH_SB_KEY_3_7__SB_KEY_WIDTH 64
#define RSH_SB_KEY_3_7__SB_KEY_RESET_VAL 0
#define RSH_SB_KEY_3_7__SB_KEY_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_3_7__SB_KEY_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_3_7__SB_KEY_FIELD 0,63


/*
 * Secure Boot Key Write Control.
 * Controls updates to keys. Note that writes will not be done if
 * SB_KEY_ACCESS WRITE_DISABLE bit is 1. The STEP field determines if key
 * data or key valid information is written
 */
#define RSH_SB_KEY_WRITE_CTL 0x1200
#define RSH_SB_KEY_WRITE_CTL__LENGTH 0x0001

#define RSH_SB_KEY_WRITE_CTL__GO_SHIFT 0
#define RSH_SB_KEY_WRITE_CTL__GO_WIDTH 1
#define RSH_SB_KEY_WRITE_CTL__GO_RESET_VAL 0
#define RSH_SB_KEY_WRITE_CTL__GO_RMASK 0x1
#define RSH_SB_KEY_WRITE_CTL__GO_MASK  0x1
#define RSH_SB_KEY_WRITE_CTL__GO_FIELD 0,0

#define RSH_SB_KEY_WRITE_CTL__STEP_SHIFT 1
#define RSH_SB_KEY_WRITE_CTL__STEP_WIDTH 2
#define RSH_SB_KEY_WRITE_CTL__STEP_RESET_VAL 0
#define RSH_SB_KEY_WRITE_CTL__STEP_RMASK 0x3
#define RSH_SB_KEY_WRITE_CTL__STEP_MASK  0x6
#define RSH_SB_KEY_WRITE_CTL__STEP_FIELD 1,2
#define RSH_SB_KEY_WRITE_CTL__STEP_VAL_START 0x0
#define RSH_SB_KEY_WRITE_CTL__STEP_VAL_DATA 0x1
#define RSH_SB_KEY_WRITE_CTL__STEP_VAL_END 0x2
#define RSH_SB_KEY_WRITE_CTL__STEP_VAL_RESERVED 0x3

#define RSH_SB_KEY_WRITE_CTL__SEGMENT_SHIFT 8
#define RSH_SB_KEY_WRITE_CTL__SEGMENT_WIDTH 3
#define RSH_SB_KEY_WRITE_CTL__SEGMENT_RESET_VAL 0
#define RSH_SB_KEY_WRITE_CTL__SEGMENT_RMASK 0x7
#define RSH_SB_KEY_WRITE_CTL__SEGMENT_MASK  0x700
#define RSH_SB_KEY_WRITE_CTL__SEGMENT_FIELD 8,10

#define RSH_SB_KEY_WRITE_CTL__VERSION_SHIFT 16
#define RSH_SB_KEY_WRITE_CTL__VERSION_WIDTH 2
#define RSH_SB_KEY_WRITE_CTL__VERSION_RESET_VAL 0
#define RSH_SB_KEY_WRITE_CTL__VERSION_RMASK 0x3
#define RSH_SB_KEY_WRITE_CTL__VERSION_MASK  0x30000
#define RSH_SB_KEY_WRITE_CTL__VERSION_FIELD 16,17

#define RSH_SB_KEY_WRITE_CTL__KEY_SHIFT 20
#define RSH_SB_KEY_WRITE_CTL__KEY_WIDTH 2
#define RSH_SB_KEY_WRITE_CTL__KEY_RESET_VAL 0
#define RSH_SB_KEY_WRITE_CTL__KEY_RMASK 0x3
#define RSH_SB_KEY_WRITE_CTL__KEY_MASK  0x300000
#define RSH_SB_KEY_WRITE_CTL__KEY_FIELD 20,21


/*
 * Secure Boot Key Write Control.
 * Data value for updates to keys. This is not used if the STEP value in
 * SB_KEY_WRITE_CTL is START or END.
 */
#define RSH_SB_KEY_WRITE_DATA 0x1208
#define RSH_SB_KEY_WRITE_DATA__LENGTH 0x0001

#define RSH_SB_KEY_WRITE_DATA__DATA_SHIFT 0
#define RSH_SB_KEY_WRITE_DATA__DATA_WIDTH 64
#define RSH_SB_KEY_WRITE_DATA__DATA_RESET_VAL 0
#define RSH_SB_KEY_WRITE_DATA__DATA_RMASK _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_WRITE_DATA__DATA_MASK  _64bit(0xffffffffffffffff)
#define RSH_SB_KEY_WRITE_DATA__DATA_FIELD 0,63


/*
 * Life Cycle Enable.
 * This register must be written with a special value to enable updates to
 * Life Cycle eFuses, which is done by writing to LIFE_CYCLE_UPDATE register.
 */
#define RSH_LIFE_CYCLE_ENABLE 0x1210
#define RSH_LIFE_CYCLE_ENABLE__LENGTH 0x0001

#define RSH_LIFE_CYCLE_ENABLE__VALUE_SHIFT 0
#define RSH_LIFE_CYCLE_ENABLE__VALUE_WIDTH 64
#define RSH_LIFE_CYCLE_ENABLE__VALUE_RESET_VAL 0
#define RSH_LIFE_CYCLE_ENABLE__VALUE_RMASK _64bit(0xffffffffffffffff)
#define RSH_LIFE_CYCLE_ENABLE__VALUE_MASK  _64bit(0xffffffffffffffff)
#define RSH_LIFE_CYCLE_ENABLE__VALUE_FIELD 0,63
#define RSH_LIFE_CYCLE_ENABLE__VALUE_VAL_KEY _64bit(0x65862b194ecb053d)


/*
 * Life Cycle Update.
 * Writes to this register change the life cycle state, which is stored in
 * eFuses. The proper value must be written to LIFE_CYCLE_ENABLE register to
 * enable writes to this register
 */
#define RSH_LIFE_CYCLE_UPDATE 0x1218
#define RSH_LIFE_CYCLE_UPDATE__LENGTH 0x0001

#define RSH_LIFE_CYCLE_UPDATE__GO_SHIFT 0
#define RSH_LIFE_CYCLE_UPDATE__GO_WIDTH 1
#define RSH_LIFE_CYCLE_UPDATE__GO_RESET_VAL 0
#define RSH_LIFE_CYCLE_UPDATE__GO_RMASK 0x1
#define RSH_LIFE_CYCLE_UPDATE__GO_MASK  0x1
#define RSH_LIFE_CYCLE_UPDATE__GO_FIELD 0,0

#define RSH_LIFE_CYCLE_UPDATE__NEW_STATE_SHIFT 4
#define RSH_LIFE_CYCLE_UPDATE__NEW_STATE_WIDTH 2
#define RSH_LIFE_CYCLE_UPDATE__NEW_STATE_RESET_VAL 0
#define RSH_LIFE_CYCLE_UPDATE__NEW_STATE_RMASK 0x3
#define RSH_LIFE_CYCLE_UPDATE__NEW_STATE_MASK  0x30
#define RSH_LIFE_CYCLE_UPDATE__NEW_STATE_FIELD 4,5
#define RSH_LIFE_CYCLE_UPDATE__NEW_STATE_VAL_SOFT_NON_SECURE 0x0
#define RSH_LIFE_CYCLE_UPDATE__NEW_STATE_VAL_SECURE 0x1
#define RSH_LIFE_CYCLE_UPDATE__NEW_STATE_VAL_HARD_NON_SECURE 0x2
#define RSH_LIFE_CYCLE_UPDATE__NEW_STATE_VAL_RMA 0x3

#define RSH_LIFE_CYCLE_UPDATE__STATUS_SHIFT 7
#define RSH_LIFE_CYCLE_UPDATE__STATUS_WIDTH 1
#define RSH_LIFE_CYCLE_UPDATE__STATUS_RESET_VAL 0
#define RSH_LIFE_CYCLE_UPDATE__STATUS_RMASK 0x1
#define RSH_LIFE_CYCLE_UPDATE__STATUS_MASK  0x80
#define RSH_LIFE_CYCLE_UPDATE__STATUS_FIELD 7,7
#define RSH_LIFE_CYCLE_UPDATE__STATUS_VAL_SUCCESS 0x0
#define RSH_LIFE_CYCLE_UPDATE__STATUS_VAL_FAILURE 0x1


/*
 * CoreSight System-level DebugAPB.
 * System-level access to drive R/W transactions on the DebugAPB bus. SW must
 * not alter the contents of this register after initiating a DebugAPB
 * transaction until after GO has cleared.
 */
#define RSH_CORESIGHT_SYS_DBGAPB_CTL 0x0e00
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__LENGTH 0x0001

#define RSH_CORESIGHT_SYS_DBGAPB_CTL__GO_SHIFT 0
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__GO_WIDTH 1
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__GO_RESET_VAL 0
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__GO_RMASK 0x1
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__GO_MASK  0x1
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__GO_FIELD 0,0

#define RSH_CORESIGHT_SYS_DBGAPB_CTL__ACTION_SHIFT 1
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__ACTION_WIDTH 1
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__ACTION_RESET_VAL 0
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__ACTION_RMASK 0x1
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__ACTION_MASK  0x2
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__ACTION_FIELD 1,1

#define RSH_CORESIGHT_SYS_DBGAPB_CTL__ADDR_SHIFT 2
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__ADDR_WIDTH 29
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__ADDR_RESET_VAL 0
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__ADDR_RMASK 0x1fffffff
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__ADDR_MASK  0x7ffffffc
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__ADDR_FIELD 2,30

#define RSH_CORESIGHT_SYS_DBGAPB_CTL__ERR_SHIFT 31
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__ERR_WIDTH 1
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__ERR_RESET_VAL 0
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__ERR_RMASK 0x1
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__ERR_MASK  0x80000000
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__ERR_FIELD 31,31

#define RSH_CORESIGHT_SYS_DBGAPB_CTL__DATA_SHIFT 32
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__DATA_WIDTH 32
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__DATA_RESET_VAL 0
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__DATA_RMASK 0xffffffff
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__DATA_MASK  _64bit(0xffffffff00000000)
#define RSH_CORESIGHT_SYS_DBGAPB_CTL__DATA_FIELD 32,63


/*
 * CoreSight Authentication Controls.
 * These controls enable invasive/noninvasive and secure/nonsecure debug.
 * Used in the DAP, CTI, and coresight components including those in the A72s.
 */
#define RSH_CORESIGHT_AUTH_CTL 0x0dc0
#define RSH_CORESIGHT_AUTH_CTL__LENGTH 0x0001

#define RSH_CORESIGHT_AUTH_CTL__SPNIDEN_SHIFT 0
#define RSH_CORESIGHT_AUTH_CTL__SPNIDEN_WIDTH 1
#define RSH_CORESIGHT_AUTH_CTL__SPNIDEN_RMASK 0x1
#define RSH_CORESIGHT_AUTH_CTL__SPNIDEN_MASK  0x1
#define RSH_CORESIGHT_AUTH_CTL__SPNIDEN_FIELD 0,0

#define RSH_CORESIGHT_AUTH_CTL__SPIDEN_SHIFT 1
#define RSH_CORESIGHT_AUTH_CTL__SPIDEN_WIDTH 1
#define RSH_CORESIGHT_AUTH_CTL__SPIDEN_RMASK 0x1
#define RSH_CORESIGHT_AUTH_CTL__SPIDEN_MASK  0x2
#define RSH_CORESIGHT_AUTH_CTL__SPIDEN_FIELD 1,1

#define RSH_CORESIGHT_AUTH_CTL__NIDEN_SHIFT 2
#define RSH_CORESIGHT_AUTH_CTL__NIDEN_WIDTH 1
#define RSH_CORESIGHT_AUTH_CTL__NIDEN_RMASK 0x1
#define RSH_CORESIGHT_AUTH_CTL__NIDEN_MASK  0x4
#define RSH_CORESIGHT_AUTH_CTL__NIDEN_FIELD 2,2

#define RSH_CORESIGHT_AUTH_CTL__DBGEN_SHIFT 3
#define RSH_CORESIGHT_AUTH_CTL__DBGEN_WIDTH 1
#define RSH_CORESIGHT_AUTH_CTL__DBGEN_RMASK 0x1
#define RSH_CORESIGHT_AUTH_CTL__DBGEN_MASK  0x8
#define RSH_CORESIGHT_AUTH_CTL__DBGEN_FIELD 3,3

#define RSH_CORESIGHT_AUTH_CTL__HNFDBGEN_SHIFT 4
#define RSH_CORESIGHT_AUTH_CTL__HNFDBGEN_WIDTH 1
#define RSH_CORESIGHT_AUTH_CTL__HNFDBGEN_RMASK 0x1
#define RSH_CORESIGHT_AUTH_CTL__HNFDBGEN_MASK  0x10
#define RSH_CORESIGHT_AUTH_CTL__HNFDBGEN_FIELD 4,4


/*
 * Miscellaneous Node Configuration.
 * Miscellaneous Node Configuration.
 */
#define RSH_MN_CFG 0x0f00
#define RSH_MN_CFG__LENGTH 0x0001

#define RSH_MN_CFG__DVMOP_LIMIT_SHIFT 0
#define RSH_MN_CFG__DVMOP_LIMIT_WIDTH 2
#define RSH_MN_CFG__DVMOP_LIMIT_RESET_VAL 0
#define RSH_MN_CFG__DVMOP_LIMIT_RMASK 0x3
#define RSH_MN_CFG__DVMOP_LIMIT_MASK  0x3
#define RSH_MN_CFG__DVMOP_LIMIT_FIELD 0,1


/*
 * Miscellaneous Node Debug.
 * Internal Debug information from MN.
 */
#define RSH_MN_DBG 0x0f08
#define RSH_MN_DBG__LENGTH 0x0001

#define RSH_MN_DBG__INFO_SHIFT 0
#define RSH_MN_DBG__INFO_WIDTH 64
#define RSH_MN_DBG__INFO_RESET_VAL 0
#define RSH_MN_DBG__INFO_RMASK _64bit(0xffffffffffffffff)
#define RSH_MN_DBG__INFO_MASK  _64bit(0xffffffffffffffff)
#define RSH_MN_DBG__INFO_FIELD 0,63


/*
 * Patrol Scrubber Control.
 * Define the behavior of patrol scrubber control module. Patrol scrubber
 * will periodically issue "zero byte" write requests to the message, to
 * avoid the loss the infomration in the memory
 */
#define RSH_PATRL_SCRB_CTL 0x0f10
#define RSH_PATRL_SCRB_CTL__LENGTH 0x0001

#define RSH_PATRL_SCRB_CTL__EN_SHIFT 0
#define RSH_PATRL_SCRB_CTL__EN_WIDTH 1
#define RSH_PATRL_SCRB_CTL__EN_RESET_VAL 0
#define RSH_PATRL_SCRB_CTL__EN_RMASK 0x1
#define RSH_PATRL_SCRB_CTL__EN_MASK  0x1
#define RSH_PATRL_SCRB_CTL__EN_FIELD 0,0

#define RSH_PATRL_SCRB_CTL__NUM_ADDR_RNG_SHIFT 1
#define RSH_PATRL_SCRB_CTL__NUM_ADDR_RNG_WIDTH 4
#define RSH_PATRL_SCRB_CTL__NUM_ADDR_RNG_RESET_VAL 8
#define RSH_PATRL_SCRB_CTL__NUM_ADDR_RNG_RMASK 0xf
#define RSH_PATRL_SCRB_CTL__NUM_ADDR_RNG_MASK  0x1e
#define RSH_PATRL_SCRB_CTL__NUM_ADDR_RNG_FIELD 1,4

#define RSH_PATRL_SCRB_CTL__FREQ_SHIFT 5
#define RSH_PATRL_SCRB_CTL__FREQ_WIDTH 18
#define RSH_PATRL_SCRB_CTL__FREQ_RESET_VAL 10
#define RSH_PATRL_SCRB_CTL__FREQ_RMASK 0x3ffff
#define RSH_PATRL_SCRB_CTL__FREQ_MASK  0x7fffe0
#define RSH_PATRL_SCRB_CTL__FREQ_FIELD 5,22


/*
 * Patrol Scrubber Address Range register.
 * Address range of patrol scrubber module. (Note: Patrol scrubber uses
 * physical address). NUM_ADDR_RNG in PATRL_SCRB_CTL defines the exact number
 * of address ranges used for patrol scrubber. Two PATRL_SCRB_RNG defines an
 * address range, the first one is the base address and the other one is the
 * end address.
 */
#define RSH_PATRL_SCRB_RNG__FIRST_WORD 0x0f18
#define RSH_PATRL_SCRB_RNG__LAST_WORD 0x0f90
#define RSH_PATRL_SCRB_RNG__LENGTH 0x0080
#define RSH_PATRL_SCRB_RNG__STRIDE 0x0008

#define RSH_PATRL_SCRB_RNG__VAL_SHIFT 6
#define RSH_PATRL_SCRB_RNG__VAL_WIDTH 34
#define RSH_PATRL_SCRB_RNG__VAL_RESET_VAL 0
#define RSH_PATRL_SCRB_RNG__VAL_RMASK _64bit(0x3ffffffff)
#define RSH_PATRL_SCRB_RNG__VAL_MASK  _64bit(0xffffffffc0)
#define RSH_PATRL_SCRB_RNG__VAL_FIELD 6,39


/*
 * Patrol Scrubber Address Range register.
 * Address range of patrol scrubber module. (Note: Patrol scrubber uses
 * physical address). NUM_ADDR_RNG in PATRL_SCRB_CTL defines the exact number
 * of address ranges used for patrol scrubber. Two PATRL_SCRB_RNG defines an
 * address range, the first one is the base address and the other one is the
 * end address.
 */
#define RSH_PATRL_SCRB_RNG_1__FIRST_WORD 0x0f20
#define RSH_PATRL_SCRB_RNG_1__LAST_WORD 0x0f98
#define RSH_PATRL_SCRB_RNG_1__LENGTH 0x0080
#define RSH_PATRL_SCRB_RNG_1__STRIDE 0x0008

#define RSH_PATRL_SCRB_RNG_1__VAL_SHIFT 6
#define RSH_PATRL_SCRB_RNG_1__VAL_WIDTH 34
#define RSH_PATRL_SCRB_RNG_1__VAL_RESET_VAL 0
#define RSH_PATRL_SCRB_RNG_1__VAL_RMASK _64bit(0x3ffffffff)
#define RSH_PATRL_SCRB_RNG_1__VAL_MASK  _64bit(0xffffffffc0)
#define RSH_PATRL_SCRB_RNG_1__VAL_FIELD 6,39


/*
 * Patrol Scrubber Address Range register.
 * Address range of patrol scrubber module. (Note: Patrol scrubber uses
 * physical address). NUM_ADDR_RNG in PATRL_SCRB_CTL defines the exact number
 * of address ranges used for patrol scrubber. Two PATRL_SCRB_RNG defines an
 * address range, the first one is the base address and the other one is the
 * end address.
 */
#define RSH_PATRL_SCRB_RNG_2__FIRST_WORD 0x0f28
#define RSH_PATRL_SCRB_RNG_2__LAST_WORD 0x0fa0
#define RSH_PATRL_SCRB_RNG_2__LENGTH 0x0080
#define RSH_PATRL_SCRB_RNG_2__STRIDE 0x0008

#define RSH_PATRL_SCRB_RNG_2__VAL_SHIFT 6
#define RSH_PATRL_SCRB_RNG_2__VAL_WIDTH 34
#define RSH_PATRL_SCRB_RNG_2__VAL_RESET_VAL 0
#define RSH_PATRL_SCRB_RNG_2__VAL_RMASK _64bit(0x3ffffffff)
#define RSH_PATRL_SCRB_RNG_2__VAL_MASK  _64bit(0xffffffffc0)
#define RSH_PATRL_SCRB_RNG_2__VAL_FIELD 6,39


/*
 * Patrol Scrubber Address Range register.
 * Address range of patrol scrubber module. (Note: Patrol scrubber uses
 * physical address). NUM_ADDR_RNG in PATRL_SCRB_CTL defines the exact number
 * of address ranges used for patrol scrubber. Two PATRL_SCRB_RNG defines an
 * address range, the first one is the base address and the other one is the
 * end address.
 */
#define RSH_PATRL_SCRB_RNG_3__FIRST_WORD 0x0f30
#define RSH_PATRL_SCRB_RNG_3__LAST_WORD 0x0fa8
#define RSH_PATRL_SCRB_RNG_3__LENGTH 0x0080
#define RSH_PATRL_SCRB_RNG_3__STRIDE 0x0008

#define RSH_PATRL_SCRB_RNG_3__VAL_SHIFT 6
#define RSH_PATRL_SCRB_RNG_3__VAL_WIDTH 34
#define RSH_PATRL_SCRB_RNG_3__VAL_RESET_VAL 0
#define RSH_PATRL_SCRB_RNG_3__VAL_RMASK _64bit(0x3ffffffff)
#define RSH_PATRL_SCRB_RNG_3__VAL_MASK  _64bit(0xffffffffc0)
#define RSH_PATRL_SCRB_RNG_3__VAL_FIELD 6,39


/*
 * Patrol Scrubber Address Range register.
 * Address range of patrol scrubber module. (Note: Patrol scrubber uses
 * physical address). NUM_ADDR_RNG in PATRL_SCRB_CTL defines the exact number
 * of address ranges used for patrol scrubber. Two PATRL_SCRB_RNG defines an
 * address range, the first one is the base address and the other one is the
 * end address.
 */
#define RSH_PATRL_SCRB_RNG_4__FIRST_WORD 0x0f38
#define RSH_PATRL_SCRB_RNG_4__LAST_WORD 0x0fb0
#define RSH_PATRL_SCRB_RNG_4__LENGTH 0x0080
#define RSH_PATRL_SCRB_RNG_4__STRIDE 0x0008

#define RSH_PATRL_SCRB_RNG_4__VAL_SHIFT 6
#define RSH_PATRL_SCRB_RNG_4__VAL_WIDTH 34
#define RSH_PATRL_SCRB_RNG_4__VAL_RESET_VAL 0
#define RSH_PATRL_SCRB_RNG_4__VAL_RMASK _64bit(0x3ffffffff)
#define RSH_PATRL_SCRB_RNG_4__VAL_MASK  _64bit(0xffffffffc0)
#define RSH_PATRL_SCRB_RNG_4__VAL_FIELD 6,39


/*
 * Patrol Scrubber Address Range register.
 * Address range of patrol scrubber module. (Note: Patrol scrubber uses
 * physical address). NUM_ADDR_RNG in PATRL_SCRB_CTL defines the exact number
 * of address ranges used for patrol scrubber. Two PATRL_SCRB_RNG defines an
 * address range, the first one is the base address and the other one is the
 * end address.
 */
#define RSH_PATRL_SCRB_RNG_5__FIRST_WORD 0x0f40
#define RSH_PATRL_SCRB_RNG_5__LAST_WORD 0x0fb8
#define RSH_PATRL_SCRB_RNG_5__LENGTH 0x0080
#define RSH_PATRL_SCRB_RNG_5__STRIDE 0x0008

#define RSH_PATRL_SCRB_RNG_5__VAL_SHIFT 6
#define RSH_PATRL_SCRB_RNG_5__VAL_WIDTH 34
#define RSH_PATRL_SCRB_RNG_5__VAL_RESET_VAL 0
#define RSH_PATRL_SCRB_RNG_5__VAL_RMASK _64bit(0x3ffffffff)
#define RSH_PATRL_SCRB_RNG_5__VAL_MASK  _64bit(0xffffffffc0)
#define RSH_PATRL_SCRB_RNG_5__VAL_FIELD 6,39


/*
 * Patrol Scrubber Address Range register.
 * Address range of patrol scrubber module. (Note: Patrol scrubber uses
 * physical address). NUM_ADDR_RNG in PATRL_SCRB_CTL defines the exact number
 * of address ranges used for patrol scrubber. Two PATRL_SCRB_RNG defines an
 * address range, the first one is the base address and the other one is the
 * end address.
 */
#define RSH_PATRL_SCRB_RNG_6__FIRST_WORD 0x0f48
#define RSH_PATRL_SCRB_RNG_6__LAST_WORD 0x0fc0
#define RSH_PATRL_SCRB_RNG_6__LENGTH 0x0080
#define RSH_PATRL_SCRB_RNG_6__STRIDE 0x0008

#define RSH_PATRL_SCRB_RNG_6__VAL_SHIFT 6
#define RSH_PATRL_SCRB_RNG_6__VAL_WIDTH 34
#define RSH_PATRL_SCRB_RNG_6__VAL_RESET_VAL 0
#define RSH_PATRL_SCRB_RNG_6__VAL_RMASK _64bit(0x3ffffffff)
#define RSH_PATRL_SCRB_RNG_6__VAL_MASK  _64bit(0xffffffffc0)
#define RSH_PATRL_SCRB_RNG_6__VAL_FIELD 6,39


/*
 * Patrol Scrubber Address Range register.
 * Address range of patrol scrubber module. (Note: Patrol scrubber uses
 * physical address). NUM_ADDR_RNG in PATRL_SCRB_CTL defines the exact number
 * of address ranges used for patrol scrubber. Two PATRL_SCRB_RNG defines an
 * address range, the first one is the base address and the other one is the
 * end address.
 */
#define RSH_PATRL_SCRB_RNG_7__FIRST_WORD 0x0f50
#define RSH_PATRL_SCRB_RNG_7__LAST_WORD 0x0fc8
#define RSH_PATRL_SCRB_RNG_7__LENGTH 0x0080
#define RSH_PATRL_SCRB_RNG_7__STRIDE 0x0008

#define RSH_PATRL_SCRB_RNG_7__VAL_SHIFT 6
#define RSH_PATRL_SCRB_RNG_7__VAL_WIDTH 34
#define RSH_PATRL_SCRB_RNG_7__VAL_RESET_VAL 0
#define RSH_PATRL_SCRB_RNG_7__VAL_RMASK _64bit(0x3ffffffff)
#define RSH_PATRL_SCRB_RNG_7__VAL_MASK  _64bit(0xffffffffc0)
#define RSH_PATRL_SCRB_RNG_7__VAL_FIELD 6,39


/*
 * Patrol Scrubber Address Range register.
 * Address range of patrol scrubber module. (Note: Patrol scrubber uses
 * physical address). NUM_ADDR_RNG in PATRL_SCRB_CTL defines the exact number
 * of address ranges used for patrol scrubber. Two PATRL_SCRB_RNG defines an
 * address range, the first one is the base address and the other one is the
 * end address.
 */
#define RSH_PATRL_SCRB_RNG_8__FIRST_WORD 0x0f58
#define RSH_PATRL_SCRB_RNG_8__LAST_WORD 0x0fd0
#define RSH_PATRL_SCRB_RNG_8__LENGTH 0x0080
#define RSH_PATRL_SCRB_RNG_8__STRIDE 0x0008

#define RSH_PATRL_SCRB_RNG_8__VAL_SHIFT 6
#define RSH_PATRL_SCRB_RNG_8__VAL_WIDTH 34
#define RSH_PATRL_SCRB_RNG_8__VAL_RESET_VAL 0
#define RSH_PATRL_SCRB_RNG_8__VAL_RMASK _64bit(0x3ffffffff)
#define RSH_PATRL_SCRB_RNG_8__VAL_MASK  _64bit(0xffffffffc0)
#define RSH_PATRL_SCRB_RNG_8__VAL_FIELD 6,39


/*
 * Patrol Scrubber Address Range register.
 * Address range of patrol scrubber module. (Note: Patrol scrubber uses
 * physical address). NUM_ADDR_RNG in PATRL_SCRB_CTL defines the exact number
 * of address ranges used for patrol scrubber. Two PATRL_SCRB_RNG defines an
 * address range, the first one is the base address and the other one is the
 * end address.
 */
#define RSH_PATRL_SCRB_RNG_9__FIRST_WORD 0x0f60
#define RSH_PATRL_SCRB_RNG_9__LAST_WORD 0x0fd8
#define RSH_PATRL_SCRB_RNG_9__LENGTH 0x0080
#define RSH_PATRL_SCRB_RNG_9__STRIDE 0x0008

#define RSH_PATRL_SCRB_RNG_9__VAL_SHIFT 6
#define RSH_PATRL_SCRB_RNG_9__VAL_WIDTH 34
#define RSH_PATRL_SCRB_RNG_9__VAL_RESET_VAL 0
#define RSH_PATRL_SCRB_RNG_9__VAL_RMASK _64bit(0x3ffffffff)
#define RSH_PATRL_SCRB_RNG_9__VAL_MASK  _64bit(0xffffffffc0)
#define RSH_PATRL_SCRB_RNG_9__VAL_FIELD 6,39


/*
 * Patrol Scrubber Address Range register.
 * Address range of patrol scrubber module. (Note: Patrol scrubber uses
 * physical address). NUM_ADDR_RNG in PATRL_SCRB_CTL defines the exact number
 * of address ranges used for patrol scrubber. Two PATRL_SCRB_RNG defines an
 * address range, the first one is the base address and the other one is the
 * end address.
 */
#define RSH_PATRL_SCRB_RNG_10__FIRST_WORD 0x0f68
#define RSH_PATRL_SCRB_RNG_10__LAST_WORD 0x0fe0
#define RSH_PATRL_SCRB_RNG_10__LENGTH 0x0080
#define RSH_PATRL_SCRB_RNG_10__STRIDE 0x0008

#define RSH_PATRL_SCRB_RNG_10__VAL_SHIFT 6
#define RSH_PATRL_SCRB_RNG_10__VAL_WIDTH 34
#define RSH_PATRL_SCRB_RNG_10__VAL_RESET_VAL 0
#define RSH_PATRL_SCRB_RNG_10__VAL_RMASK _64bit(0x3ffffffff)
#define RSH_PATRL_SCRB_RNG_10__VAL_MASK  _64bit(0xffffffffc0)
#define RSH_PATRL_SCRB_RNG_10__VAL_FIELD 6,39


/*
 * Patrol Scrubber Address Range register.
 * Address range of patrol scrubber module. (Note: Patrol scrubber uses
 * physical address). NUM_ADDR_RNG in PATRL_SCRB_CTL defines the exact number
 * of address ranges used for patrol scrubber. Two PATRL_SCRB_RNG defines an
 * address range, the first one is the base address and the other one is the
 * end address.
 */
#define RSH_PATRL_SCRB_RNG_11__FIRST_WORD 0x0f70
#define RSH_PATRL_SCRB_RNG_11__LAST_WORD 0x0fe8
#define RSH_PATRL_SCRB_RNG_11__LENGTH 0x0080
#define RSH_PATRL_SCRB_RNG_11__STRIDE 0x0008

#define RSH_PATRL_SCRB_RNG_11__VAL_SHIFT 6
#define RSH_PATRL_SCRB_RNG_11__VAL_WIDTH 34
#define RSH_PATRL_SCRB_RNG_11__VAL_RESET_VAL 0
#define RSH_PATRL_SCRB_RNG_11__VAL_RMASK _64bit(0x3ffffffff)
#define RSH_PATRL_SCRB_RNG_11__VAL_MASK  _64bit(0xffffffffc0)
#define RSH_PATRL_SCRB_RNG_11__VAL_FIELD 6,39


/*
 * Patrol Scrubber Address Range register.
 * Address range of patrol scrubber module. (Note: Patrol scrubber uses
 * physical address). NUM_ADDR_RNG in PATRL_SCRB_CTL defines the exact number
 * of address ranges used for patrol scrubber. Two PATRL_SCRB_RNG defines an
 * address range, the first one is the base address and the other one is the
 * end address.
 */
#define RSH_PATRL_SCRB_RNG_12__FIRST_WORD 0x0f78
#define RSH_PATRL_SCRB_RNG_12__LAST_WORD 0x0ff0
#define RSH_PATRL_SCRB_RNG_12__LENGTH 0x0080
#define RSH_PATRL_SCRB_RNG_12__STRIDE 0x0008

#define RSH_PATRL_SCRB_RNG_12__VAL_SHIFT 6
#define RSH_PATRL_SCRB_RNG_12__VAL_WIDTH 34
#define RSH_PATRL_SCRB_RNG_12__VAL_RESET_VAL 0
#define RSH_PATRL_SCRB_RNG_12__VAL_RMASK _64bit(0x3ffffffff)
#define RSH_PATRL_SCRB_RNG_12__VAL_MASK  _64bit(0xffffffffc0)
#define RSH_PATRL_SCRB_RNG_12__VAL_FIELD 6,39


/*
 * Patrol Scrubber Address Range register.
 * Address range of patrol scrubber module. (Note: Patrol scrubber uses
 * physical address). NUM_ADDR_RNG in PATRL_SCRB_CTL defines the exact number
 * of address ranges used for patrol scrubber. Two PATRL_SCRB_RNG defines an
 * address range, the first one is the base address and the other one is the
 * end address.
 */
#define RSH_PATRL_SCRB_RNG_13__FIRST_WORD 0x0f80
#define RSH_PATRL_SCRB_RNG_13__LAST_WORD 0x0ff8
#define RSH_PATRL_SCRB_RNG_13__LENGTH 0x0080
#define RSH_PATRL_SCRB_RNG_13__STRIDE 0x0008

#define RSH_PATRL_SCRB_RNG_13__VAL_SHIFT 6
#define RSH_PATRL_SCRB_RNG_13__VAL_WIDTH 34
#define RSH_PATRL_SCRB_RNG_13__VAL_RESET_VAL 0
#define RSH_PATRL_SCRB_RNG_13__VAL_RMASK _64bit(0x3ffffffff)
#define RSH_PATRL_SCRB_RNG_13__VAL_MASK  _64bit(0xffffffffc0)
#define RSH_PATRL_SCRB_RNG_13__VAL_FIELD 6,39


/*
 * Patrol Scrubber Address Range register.
 * Address range of patrol scrubber module. (Note: Patrol scrubber uses
 * physical address). NUM_ADDR_RNG in PATRL_SCRB_CTL defines the exact number
 * of address ranges used for patrol scrubber. Two PATRL_SCRB_RNG defines an
 * address range, the first one is the base address and the other one is the
 * end address.
 */
#define RSH_PATRL_SCRB_RNG_14__FIRST_WORD 0x0f88
#define RSH_PATRL_SCRB_RNG_14__LAST_WORD 0x1000
#define RSH_PATRL_SCRB_RNG_14__LENGTH 0x0080
#define RSH_PATRL_SCRB_RNG_14__STRIDE 0x0008

#define RSH_PATRL_SCRB_RNG_14__VAL_SHIFT 6
#define RSH_PATRL_SCRB_RNG_14__VAL_WIDTH 34
#define RSH_PATRL_SCRB_RNG_14__VAL_RESET_VAL 0
#define RSH_PATRL_SCRB_RNG_14__VAL_RMASK _64bit(0x3ffffffff)
#define RSH_PATRL_SCRB_RNG_14__VAL_MASK  _64bit(0xffffffffc0)
#define RSH_PATRL_SCRB_RNG_14__VAL_FIELD 6,39


/*
 * Patrol Scrubber Address Range register.
 * Address range of patrol scrubber module. (Note: Patrol scrubber uses
 * physical address). NUM_ADDR_RNG in PATRL_SCRB_CTL defines the exact number
 * of address ranges used for patrol scrubber. Two PATRL_SCRB_RNG defines an
 * address range, the first one is the base address and the other one is the
 * end address.
 */
#define RSH_PATRL_SCRB_RNG_15__FIRST_WORD 0x0f90
#define RSH_PATRL_SCRB_RNG_15__LAST_WORD 0x1008
#define RSH_PATRL_SCRB_RNG_15__LENGTH 0x0080
#define RSH_PATRL_SCRB_RNG_15__STRIDE 0x0008

#define RSH_PATRL_SCRB_RNG_15__VAL_SHIFT 6
#define RSH_PATRL_SCRB_RNG_15__VAL_WIDTH 34
#define RSH_PATRL_SCRB_RNG_15__VAL_RESET_VAL 0
#define RSH_PATRL_SCRB_RNG_15__VAL_RMASK _64bit(0x3ffffffff)
#define RSH_PATRL_SCRB_RNG_15__VAL_MASK  _64bit(0xffffffffc0)
#define RSH_PATRL_SCRB_RNG_15__VAL_FIELD 6,39


/*
 * Rom Bist Control Register.
 * Register contains control bits to specify the mode(bist, diagnostic or
 * functional), start address, number of words and read margin settings for
 * the rom bist logic.
 */
#define RSH_BIST_CTL_REG 0x0e08
#define RSH_BIST_CTL_REG__LENGTH 0x0001

#define RSH_BIST_CTL_REG__BE_SHIFT 0
#define RSH_BIST_CTL_REG__BE_WIDTH 1
#define RSH_BIST_CTL_REG__BE_RESET_VAL 0
#define RSH_BIST_CTL_REG__BE_RMASK 0x1
#define RSH_BIST_CTL_REG__BE_MASK  0x1
#define RSH_BIST_CTL_REG__BE_FIELD 0,0

#define RSH_BIST_CTL_REG__SA_SHIFT 1
#define RSH_BIST_CTL_REG__SA_WIDTH 13
#define RSH_BIST_CTL_REG__SA_RESET_VAL 0
#define RSH_BIST_CTL_REG__SA_RMASK 0x1fff
#define RSH_BIST_CTL_REG__SA_MASK  0x3ffe
#define RSH_BIST_CTL_REG__SA_FIELD 1,13

#define RSH_BIST_CTL_REG__NW_SHIFT 14
#define RSH_BIST_CTL_REG__NW_WIDTH 13
#define RSH_BIST_CTL_REG__NW_RESET_VAL 0
#define RSH_BIST_CTL_REG__NW_RMASK 0x1fff
#define RSH_BIST_CTL_REG__NW_MASK  0x7ffc000
#define RSH_BIST_CTL_REG__NW_FIELD 14,26

#define RSH_BIST_CTL_REG__RM_SHIFT 27
#define RSH_BIST_CTL_REG__RM_WIDTH 3
#define RSH_BIST_CTL_REG__RM_RESET_VAL 0
#define RSH_BIST_CTL_REG__RM_RMASK 0x7
#define RSH_BIST_CTL_REG__RM_MASK  0x38000000
#define RSH_BIST_CTL_REG__RM_FIELD 27,29

#define RSH_BIST_CTL_REG__CRC_SHIFT 30
#define RSH_BIST_CTL_REG__CRC_WIDTH 32
#define RSH_BIST_CTL_REG__CRC_RESET_VAL 0
#define RSH_BIST_CTL_REG__CRC_RMASK 0xffffffff
#define RSH_BIST_CTL_REG__CRC_MASK  _64bit(0x3fffffffc0000000)
#define RSH_BIST_CTL_REG__CRC_FIELD 30,61

#define RSH_BIST_CTL_REG__CRC_EN_SHIFT 62
#define RSH_BIST_CTL_REG__CRC_EN_WIDTH 1
#define RSH_BIST_CTL_REG__CRC_EN_RESET_VAL 0
#define RSH_BIST_CTL_REG__CRC_EN_RMASK 0x1
#define RSH_BIST_CTL_REG__CRC_EN_MASK  _64bit(0x4000000000000000)
#define RSH_BIST_CTL_REG__CRC_EN_FIELD 62,62


/*
 * Rom Bist Status Register.
 * Register contains status bits to indicate the end of crc generateion.
 */
#define RSH_BIST_STS_REG 0x0e10
#define RSH_BIST_STS_REG__LENGTH 0x0001

#define RSH_BIST_STS_REG__BUSY_SHIFT 0
#define RSH_BIST_STS_REG__BUSY_WIDTH 1
#define RSH_BIST_STS_REG__BUSY_RMASK 0x1
#define RSH_BIST_STS_REG__BUSY_MASK  0x1
#define RSH_BIST_STS_REG__BUSY_FIELD 0,0

#define RSH_BIST_STS_REG__FAIL_SHIFT 1
#define RSH_BIST_STS_REG__FAIL_WIDTH 1
#define RSH_BIST_STS_REG__FAIL_RMASK 0x1
#define RSH_BIST_STS_REG__FAIL_MASK  0x2
#define RSH_BIST_STS_REG__FAIL_FIELD 1,1

#define RSH_BIST_STS_REG__CRC_CALC_SHIFT 2
#define RSH_BIST_STS_REG__CRC_CALC_WIDTH 32
#define RSH_BIST_STS_REG__CRC_CALC_RMASK 0xffffffff
#define RSH_BIST_STS_REG__CRC_CALC_MASK  _64bit(0x3fffffffc)
#define RSH_BIST_STS_REG__CRC_CALC_FIELD 2,33


/*
 * Rom Bist Diagnostic Port Register.
 * Register contains controls for diagnostic mode.
 */
#define RSH_BIST_DIAG_PORT_REG 0x0e18
#define RSH_BIST_DIAG_PORT_REG__LENGTH 0x0001

#define RSH_BIST_DIAG_PORT_REG__DE_SHIFT 0
#define RSH_BIST_DIAG_PORT_REG__DE_WIDTH 1
#define RSH_BIST_DIAG_PORT_REG__DE_RESET_VAL 0
#define RSH_BIST_DIAG_PORT_REG__DE_RMASK 0x1
#define RSH_BIST_DIAG_PORT_REG__DE_MASK  0x1
#define RSH_BIST_DIAG_PORT_REG__DE_FIELD 0,0

#define RSH_BIST_DIAG_PORT_REG__DA_SHIFT 1
#define RSH_BIST_DIAG_PORT_REG__DA_WIDTH 13
#define RSH_BIST_DIAG_PORT_REG__DA_RESET_VAL 0
#define RSH_BIST_DIAG_PORT_REG__DA_RMASK 0x1fff
#define RSH_BIST_DIAG_PORT_REG__DA_MASK  0x3ffe
#define RSH_BIST_DIAG_PORT_REG__DA_FIELD 1,13

#define RSH_BIST_DIAG_PORT_REG__DRM_SHIFT 14
#define RSH_BIST_DIAG_PORT_REG__DRM_WIDTH 3
#define RSH_BIST_DIAG_PORT_REG__DRM_RESET_VAL 0
#define RSH_BIST_DIAG_PORT_REG__DRM_RMASK 0x7
#define RSH_BIST_DIAG_PORT_REG__DRM_MASK  0x1c000
#define RSH_BIST_DIAG_PORT_REG__DRM_FIELD 14,16


/*
 * Rom Bist Diagnostic Data Register.
 * Register contains the msb of data read from diagnostic mode.
 */
#define RSH_BIST_DIAG_DATA_MSB_REG 0x0e30
#define RSH_BIST_DIAG_DATA_MSB_REG__LENGTH 0x0001

#define RSH_BIST_DIAG_DATA_MSB_REG__DRD_SHIFT 0
#define RSH_BIST_DIAG_DATA_MSB_REG__DRD_WIDTH 64
#define RSH_BIST_DIAG_DATA_MSB_REG__DRD_RMASK _64bit(0xffffffffffffffff)
#define RSH_BIST_DIAG_DATA_MSB_REG__DRD_MASK  _64bit(0xffffffffffffffff)
#define RSH_BIST_DIAG_DATA_MSB_REG__DRD_FIELD 0,63


/*
 * Rom Bist Diagnostic Data Register.
 * Register contains the lsb of data read from diagnostic mode.
 */
#define RSH_BIST_DIAG_DATA_LSB_REG 0x0e38
#define RSH_BIST_DIAG_DATA_LSB_REG__LENGTH 0x0001

#define RSH_BIST_DIAG_DATA_LSB_REG__DRD_SHIFT 0
#define RSH_BIST_DIAG_DATA_LSB_REG__DRD_WIDTH 64
#define RSH_BIST_DIAG_DATA_LSB_REG__DRD_RMASK _64bit(0xffffffffffffffff)
#define RSH_BIST_DIAG_DATA_LSB_REG__DRD_MASK  _64bit(0xffffffffffffffff)
#define RSH_BIST_DIAG_DATA_LSB_REG__DRD_FIELD 0,63


/*
 * Power Watchdog Pulse Width Low.
 * Power Watchdog Pulse Width Low - duration.  This register can only be
 * updated when RSH_PWR_WDOG_CTL.LOCK = 0.
 */
#define RSH_PWR_WDOG_PW_LOW 0x0560
#define RSH_PWR_WDOG_PW_LOW__LENGTH 0x0001

#define RSH_PWR_WDOG_PW_LOW__DURATION_SHIFT 0
#define RSH_PWR_WDOG_PW_LOW__DURATION_WIDTH 16
#define RSH_PWR_WDOG_PW_LOW__DURATION_RESET_VAL 0
#define RSH_PWR_WDOG_PW_LOW__DURATION_RMASK 0xffff
#define RSH_PWR_WDOG_PW_LOW__DURATION_MASK  0xffff
#define RSH_PWR_WDOG_PW_LOW__DURATION_FIELD 0,15


/*
 * Power Watchdog TI Threshold.
 * Power Watchdog Threshold for Interrupt. This register can only be updated
 * when RSH_PWR_WDOG_CTL.LOCK = 0.
 */
#define RSH_PWR_WDOG_TI 0x0570
#define RSH_PWR_WDOG_TI__LENGTH 0x0001

#define RSH_PWR_WDOG_TI__THRESH_SHIFT 0
#define RSH_PWR_WDOG_TI__THRESH_WIDTH 20
#define RSH_PWR_WDOG_TI__THRESH_RESET_VAL 0
#define RSH_PWR_WDOG_TI__THRESH_RMASK 0xfffff
#define RSH_PWR_WDOG_TI__THRESH_MASK  0xfffff
#define RSH_PWR_WDOG_TI__THRESH_FIELD 0,19

#define RSH_PWR_WDOG_TI__ENABLE_SHIFT 20
#define RSH_PWR_WDOG_TI__ENABLE_WIDTH 1
#define RSH_PWR_WDOG_TI__ENABLE_RESET_VAL 0
#define RSH_PWR_WDOG_TI__ENABLE_RMASK 0x1
#define RSH_PWR_WDOG_TI__ENABLE_MASK  0x100000
#define RSH_PWR_WDOG_TI__ENABLE_FIELD 20,20


/*
 * Power Watchdog TF Threshold.
 * Power Watchdog Threshold for Flush.  This register can only be updated
 * when RSH_PWR_WDOG_CTL.LOCK = 0.
 */
#define RSH_PWR_WDOG_TF 0x0578
#define RSH_PWR_WDOG_TF__LENGTH 0x0001

#define RSH_PWR_WDOG_TF__THRESH_SHIFT 0
#define RSH_PWR_WDOG_TF__THRESH_WIDTH 20
#define RSH_PWR_WDOG_TF__THRESH_RESET_VAL 0
#define RSH_PWR_WDOG_TF__THRESH_RMASK 0xfffff
#define RSH_PWR_WDOG_TF__THRESH_MASK  0xfffff
#define RSH_PWR_WDOG_TF__THRESH_FIELD 0,19

#define RSH_PWR_WDOG_TF__ENABLE_SHIFT 20
#define RSH_PWR_WDOG_TF__ENABLE_WIDTH 1
#define RSH_PWR_WDOG_TF__ENABLE_RESET_VAL 0
#define RSH_PWR_WDOG_TF__ENABLE_RMASK 0x1
#define RSH_PWR_WDOG_TF__ENABLE_MASK  0x100000
#define RSH_PWR_WDOG_TF__ENABLE_FIELD 20,20


/*
 * Power Watchdog Control.
 * Overall control settings for the power watchdog hardware.
 */
#define RSH_PWR_WDOG_CTL 0x0580
#define RSH_PWR_WDOG_CTL__LENGTH 0x0001

#define RSH_PWR_WDOG_CTL__LOCK_SHIFT 0
#define RSH_PWR_WDOG_CTL__LOCK_WIDTH 1
#define RSH_PWR_WDOG_CTL__LOCK_RESET_VAL 0
#define RSH_PWR_WDOG_CTL__LOCK_RMASK 0x1
#define RSH_PWR_WDOG_CTL__LOCK_MASK  0x1
#define RSH_PWR_WDOG_CTL__LOCK_FIELD 0,0

#define RSH_PWR_WDOG_CTL__SW_OVERRIDE_SHIFT 1
#define RSH_PWR_WDOG_CTL__SW_OVERRIDE_WIDTH 1
#define RSH_PWR_WDOG_CTL__SW_OVERRIDE_RESET_VAL 0
#define RSH_PWR_WDOG_CTL__SW_OVERRIDE_RMASK 0x1
#define RSH_PWR_WDOG_CTL__SW_OVERRIDE_MASK  0x2
#define RSH_PWR_WDOG_CTL__SW_OVERRIDE_FIELD 1,1

#define RSH_PWR_WDOG_CTL__ARM_WDOG_DISABLE_SHIFT 2
#define RSH_PWR_WDOG_CTL__ARM_WDOG_DISABLE_WIDTH 1
#define RSH_PWR_WDOG_CTL__ARM_WDOG_DISABLE_RESET_VAL 1
#define RSH_PWR_WDOG_CTL__ARM_WDOG_DISABLE_RMASK 0x1
#define RSH_PWR_WDOG_CTL__ARM_WDOG_DISABLE_MASK  0x4
#define RSH_PWR_WDOG_CTL__ARM_WDOG_DISABLE_FIELD 2,2

#define RSH_PWR_WDOG_CTL__MSS0_DISABLED_SHIFT 3
#define RSH_PWR_WDOG_CTL__MSS0_DISABLED_WIDTH 1
#define RSH_PWR_WDOG_CTL__MSS0_DISABLED_RESET_VAL 0
#define RSH_PWR_WDOG_CTL__MSS0_DISABLED_RMASK 0x1
#define RSH_PWR_WDOG_CTL__MSS0_DISABLED_MASK  0x8
#define RSH_PWR_WDOG_CTL__MSS0_DISABLED_FIELD 3,3

#define RSH_PWR_WDOG_CTL__MSS1_DISABLED_SHIFT 4
#define RSH_PWR_WDOG_CTL__MSS1_DISABLED_WIDTH 1
#define RSH_PWR_WDOG_CTL__MSS1_DISABLED_RESET_VAL 0
#define RSH_PWR_WDOG_CTL__MSS1_DISABLED_RMASK 0x1
#define RSH_PWR_WDOG_CTL__MSS1_DISABLED_MASK  0x10
#define RSH_PWR_WDOG_CTL__MSS1_DISABLED_FIELD 4,4


/*
 * Software-Controlled ADR Sequence for MSS0.
 * Allows for software to control the Async DRAM Refresh sequence, instead of
 * the PWR_WDOG hardware.
 */
#define RSH_SW_ADR_SEQ_MSS0 0x0590
#define RSH_SW_ADR_SEQ_MSS0__LENGTH 0x0001

#define RSH_SW_ADR_SEQ_MSS0__FLUSH_L3_EMI_SHIFT 0
#define RSH_SW_ADR_SEQ_MSS0__FLUSH_L3_EMI_WIDTH 1
#define RSH_SW_ADR_SEQ_MSS0__FLUSH_L3_EMI_RESET_VAL 0
#define RSH_SW_ADR_SEQ_MSS0__FLUSH_L3_EMI_RMASK 0x1
#define RSH_SW_ADR_SEQ_MSS0__FLUSH_L3_EMI_MASK  0x1
#define RSH_SW_ADR_SEQ_MSS0__FLUSH_L3_EMI_FIELD 0,0

#define RSH_SW_ADR_SEQ_MSS0__BKP_MEMC_SHIFT 1
#define RSH_SW_ADR_SEQ_MSS0__BKP_MEMC_WIDTH 1
#define RSH_SW_ADR_SEQ_MSS0__BKP_MEMC_RESET_VAL 0
#define RSH_SW_ADR_SEQ_MSS0__BKP_MEMC_RMASK 0x1
#define RSH_SW_ADR_SEQ_MSS0__BKP_MEMC_MASK  0x2
#define RSH_SW_ADR_SEQ_MSS0__BKP_MEMC_FIELD 1,1

#define RSH_SW_ADR_SEQ_MSS0__SAVE_N_SHIFT 2
#define RSH_SW_ADR_SEQ_MSS0__SAVE_N_WIDTH 1
#define RSH_SW_ADR_SEQ_MSS0__SAVE_N_RESET_VAL 1
#define RSH_SW_ADR_SEQ_MSS0__SAVE_N_RMASK 0x1
#define RSH_SW_ADR_SEQ_MSS0__SAVE_N_MASK  0x4
#define RSH_SW_ADR_SEQ_MSS0__SAVE_N_FIELD 2,2


/*
 * Software-Controlled ADR Sequence for MSS1.
 * Allows for software to control the Async DRAM Refresh sequence, instead of
 * the PWR_WDOG hardware.
 */
#define RSH_SW_ADR_SEQ_MSS1 0x0598
#define RSH_SW_ADR_SEQ_MSS1__LENGTH 0x0001

#define RSH_SW_ADR_SEQ_MSS1__FLUSH_L3_EMI_SHIFT 0
#define RSH_SW_ADR_SEQ_MSS1__FLUSH_L3_EMI_WIDTH 1
#define RSH_SW_ADR_SEQ_MSS1__FLUSH_L3_EMI_RESET_VAL 0
#define RSH_SW_ADR_SEQ_MSS1__FLUSH_L3_EMI_RMASK 0x1
#define RSH_SW_ADR_SEQ_MSS1__FLUSH_L3_EMI_MASK  0x1
#define RSH_SW_ADR_SEQ_MSS1__FLUSH_L3_EMI_FIELD 0,0

#define RSH_SW_ADR_SEQ_MSS1__BKP_MEMC_SHIFT 1
#define RSH_SW_ADR_SEQ_MSS1__BKP_MEMC_WIDTH 1
#define RSH_SW_ADR_SEQ_MSS1__BKP_MEMC_RESET_VAL 0
#define RSH_SW_ADR_SEQ_MSS1__BKP_MEMC_RMASK 0x1
#define RSH_SW_ADR_SEQ_MSS1__BKP_MEMC_MASK  0x2
#define RSH_SW_ADR_SEQ_MSS1__BKP_MEMC_FIELD 1,1

#define RSH_SW_ADR_SEQ_MSS1__SAVE_N_SHIFT 2
#define RSH_SW_ADR_SEQ_MSS1__SAVE_N_WIDTH 1
#define RSH_SW_ADR_SEQ_MSS1__SAVE_N_RESET_VAL 1
#define RSH_SW_ADR_SEQ_MSS1__SAVE_N_RMASK 0x1
#define RSH_SW_ADR_SEQ_MSS1__SAVE_N_MASK  0x4
#define RSH_SW_ADR_SEQ_MSS1__SAVE_N_FIELD 2,2


/*
 * Power Watchdog Status.
 * Power watchdog status registers.
 */
#define RSH_PWR_WDOG_STATUS 0x0588
#define RSH_PWR_WDOG_STATUS__LENGTH 0x0001

#define RSH_PWR_WDOG_STATUS__POWER_GOOD_STATE_SHIFT 0
#define RSH_PWR_WDOG_STATUS__POWER_GOOD_STATE_WIDTH 1
#define RSH_PWR_WDOG_STATUS__POWER_GOOD_STATE_RESET_VAL 0
#define RSH_PWR_WDOG_STATUS__POWER_GOOD_STATE_RMASK 0x1
#define RSH_PWR_WDOG_STATUS__POWER_GOOD_STATE_MASK  0x1
#define RSH_PWR_WDOG_STATUS__POWER_GOOD_STATE_FIELD 0,0

#define RSH_PWR_WDOG_STATUS__ARM_WDOG_REQ_STATE_SHIFT 1
#define RSH_PWR_WDOG_STATUS__ARM_WDOG_REQ_STATE_WIDTH 1
#define RSH_PWR_WDOG_STATUS__ARM_WDOG_REQ_STATE_RESET_VAL 0
#define RSH_PWR_WDOG_STATUS__ARM_WDOG_REQ_STATE_RMASK 0x1
#define RSH_PWR_WDOG_STATUS__ARM_WDOG_REQ_STATE_MASK  0x2
#define RSH_PWR_WDOG_STATUS__ARM_WDOG_REQ_STATE_FIELD 1,1

#define RSH_PWR_WDOG_STATUS__WDOG_COUNTING_LT_TI_SHIFT 2
#define RSH_PWR_WDOG_STATUS__WDOG_COUNTING_LT_TI_WIDTH 1
#define RSH_PWR_WDOG_STATUS__WDOG_COUNTING_LT_TI_RESET_VAL 0
#define RSH_PWR_WDOG_STATUS__WDOG_COUNTING_LT_TI_RMASK 0x1
#define RSH_PWR_WDOG_STATUS__WDOG_COUNTING_LT_TI_MASK  0x4
#define RSH_PWR_WDOG_STATUS__WDOG_COUNTING_LT_TI_FIELD 2,2

#define RSH_PWR_WDOG_STATUS__WDOG_COUNTING_GT_TI_LT_TF_SHIFT 3
#define RSH_PWR_WDOG_STATUS__WDOG_COUNTING_GT_TI_LT_TF_WIDTH 1
#define RSH_PWR_WDOG_STATUS__WDOG_COUNTING_GT_TI_LT_TF_RESET_VAL 0
#define RSH_PWR_WDOG_STATUS__WDOG_COUNTING_GT_TI_LT_TF_RMASK 0x1
#define RSH_PWR_WDOG_STATUS__WDOG_COUNTING_GT_TI_LT_TF_MASK  0x8
#define RSH_PWR_WDOG_STATUS__WDOG_COUNTING_GT_TI_LT_TF_FIELD 3,3

#define RSH_PWR_WDOG_STATUS__WDOG_HW_ADR_SEQ_IN_PROG_SHIFT 4
#define RSH_PWR_WDOG_STATUS__WDOG_HW_ADR_SEQ_IN_PROG_WIDTH 1
#define RSH_PWR_WDOG_STATUS__WDOG_HW_ADR_SEQ_IN_PROG_RESET_VAL 0
#define RSH_PWR_WDOG_STATUS__WDOG_HW_ADR_SEQ_IN_PROG_RMASK 0x1
#define RSH_PWR_WDOG_STATUS__WDOG_HW_ADR_SEQ_IN_PROG_MASK  0x10
#define RSH_PWR_WDOG_STATUS__WDOG_HW_ADR_SEQ_IN_PROG_FIELD 4,4

#define RSH_PWR_WDOG_STATUS__MSS0_L3_EMI_FLUSH_REQ_SHIFT 5
#define RSH_PWR_WDOG_STATUS__MSS0_L3_EMI_FLUSH_REQ_WIDTH 1
#define RSH_PWR_WDOG_STATUS__MSS0_L3_EMI_FLUSH_REQ_RESET_VAL 0
#define RSH_PWR_WDOG_STATUS__MSS0_L3_EMI_FLUSH_REQ_RMASK 0x1
#define RSH_PWR_WDOG_STATUS__MSS0_L3_EMI_FLUSH_REQ_MASK  0x20
#define RSH_PWR_WDOG_STATUS__MSS0_L3_EMI_FLUSH_REQ_FIELD 5,5

#define RSH_PWR_WDOG_STATUS__MSS0_L3_EMI_FLUSH_DONE_SHIFT 6
#define RSH_PWR_WDOG_STATUS__MSS0_L3_EMI_FLUSH_DONE_WIDTH 1
#define RSH_PWR_WDOG_STATUS__MSS0_L3_EMI_FLUSH_DONE_RESET_VAL 0
#define RSH_PWR_WDOG_STATUS__MSS0_L3_EMI_FLUSH_DONE_RMASK 0x1
#define RSH_PWR_WDOG_STATUS__MSS0_L3_EMI_FLUSH_DONE_MASK  0x40
#define RSH_PWR_WDOG_STATUS__MSS0_L3_EMI_FLUSH_DONE_FIELD 6,6

#define RSH_PWR_WDOG_STATUS__MSS0_MEMC_BKP_REQ_SHIFT 7
#define RSH_PWR_WDOG_STATUS__MSS0_MEMC_BKP_REQ_WIDTH 1
#define RSH_PWR_WDOG_STATUS__MSS0_MEMC_BKP_REQ_RESET_VAL 0
#define RSH_PWR_WDOG_STATUS__MSS0_MEMC_BKP_REQ_RMASK 0x1
#define RSH_PWR_WDOG_STATUS__MSS0_MEMC_BKP_REQ_MASK  0x80
#define RSH_PWR_WDOG_STATUS__MSS0_MEMC_BKP_REQ_FIELD 7,7

#define RSH_PWR_WDOG_STATUS__MSS0_MEMC_BKP_DONE_SHIFT 8
#define RSH_PWR_WDOG_STATUS__MSS0_MEMC_BKP_DONE_WIDTH 1
#define RSH_PWR_WDOG_STATUS__MSS0_MEMC_BKP_DONE_RESET_VAL 0
#define RSH_PWR_WDOG_STATUS__MSS0_MEMC_BKP_DONE_RMASK 0x1
#define RSH_PWR_WDOG_STATUS__MSS0_MEMC_BKP_DONE_MASK  0x100
#define RSH_PWR_WDOG_STATUS__MSS0_MEMC_BKP_DONE_FIELD 8,8

#define RSH_PWR_WDOG_STATUS__SAVE_N_0_SHIFT 9
#define RSH_PWR_WDOG_STATUS__SAVE_N_0_WIDTH 1
#define RSH_PWR_WDOG_STATUS__SAVE_N_0_RESET_VAL 0
#define RSH_PWR_WDOG_STATUS__SAVE_N_0_RMASK 0x1
#define RSH_PWR_WDOG_STATUS__SAVE_N_0_MASK  0x200
#define RSH_PWR_WDOG_STATUS__SAVE_N_0_FIELD 9,9

#define RSH_PWR_WDOG_STATUS__ADR_SEQ0_DONE_SHIFT 10
#define RSH_PWR_WDOG_STATUS__ADR_SEQ0_DONE_WIDTH 1
#define RSH_PWR_WDOG_STATUS__ADR_SEQ0_DONE_RESET_VAL 0
#define RSH_PWR_WDOG_STATUS__ADR_SEQ0_DONE_RMASK 0x1
#define RSH_PWR_WDOG_STATUS__ADR_SEQ0_DONE_MASK  0x400
#define RSH_PWR_WDOG_STATUS__ADR_SEQ0_DONE_FIELD 10,10

#define RSH_PWR_WDOG_STATUS__MSS1_L3_EMI_FLUSH_REQ_SHIFT 11
#define RSH_PWR_WDOG_STATUS__MSS1_L3_EMI_FLUSH_REQ_WIDTH 1
#define RSH_PWR_WDOG_STATUS__MSS1_L3_EMI_FLUSH_REQ_RESET_VAL 0
#define RSH_PWR_WDOG_STATUS__MSS1_L3_EMI_FLUSH_REQ_RMASK 0x1
#define RSH_PWR_WDOG_STATUS__MSS1_L3_EMI_FLUSH_REQ_MASK  0x800
#define RSH_PWR_WDOG_STATUS__MSS1_L3_EMI_FLUSH_REQ_FIELD 11,11

#define RSH_PWR_WDOG_STATUS__MSS1_L3_EMI_FLUSH_DONE_SHIFT 12
#define RSH_PWR_WDOG_STATUS__MSS1_L3_EMI_FLUSH_DONE_WIDTH 1
#define RSH_PWR_WDOG_STATUS__MSS1_L3_EMI_FLUSH_DONE_RESET_VAL 0
#define RSH_PWR_WDOG_STATUS__MSS1_L3_EMI_FLUSH_DONE_RMASK 0x1
#define RSH_PWR_WDOG_STATUS__MSS1_L3_EMI_FLUSH_DONE_MASK  0x1000
#define RSH_PWR_WDOG_STATUS__MSS1_L3_EMI_FLUSH_DONE_FIELD 12,12

#define RSH_PWR_WDOG_STATUS__MSS1_MEMC_BKP_REQ_SHIFT 13
#define RSH_PWR_WDOG_STATUS__MSS1_MEMC_BKP_REQ_WIDTH 1
#define RSH_PWR_WDOG_STATUS__MSS1_MEMC_BKP_REQ_RESET_VAL 0
#define RSH_PWR_WDOG_STATUS__MSS1_MEMC_BKP_REQ_RMASK 0x1
#define RSH_PWR_WDOG_STATUS__MSS1_MEMC_BKP_REQ_MASK  0x2000
#define RSH_PWR_WDOG_STATUS__MSS1_MEMC_BKP_REQ_FIELD 13,13

#define RSH_PWR_WDOG_STATUS__MSS1_MEMC_BKP_DONE_SHIFT 14
#define RSH_PWR_WDOG_STATUS__MSS1_MEMC_BKP_DONE_WIDTH 1
#define RSH_PWR_WDOG_STATUS__MSS1_MEMC_BKP_DONE_RESET_VAL 0
#define RSH_PWR_WDOG_STATUS__MSS1_MEMC_BKP_DONE_RMASK 0x1
#define RSH_PWR_WDOG_STATUS__MSS1_MEMC_BKP_DONE_MASK  0x4000
#define RSH_PWR_WDOG_STATUS__MSS1_MEMC_BKP_DONE_FIELD 14,14

#define RSH_PWR_WDOG_STATUS__SAVE_N_1_SHIFT 15
#define RSH_PWR_WDOG_STATUS__SAVE_N_1_WIDTH 1
#define RSH_PWR_WDOG_STATUS__SAVE_N_1_RESET_VAL 0
#define RSH_PWR_WDOG_STATUS__SAVE_N_1_RMASK 0x1
#define RSH_PWR_WDOG_STATUS__SAVE_N_1_MASK  0x8000
#define RSH_PWR_WDOG_STATUS__SAVE_N_1_FIELD 15,15

#define RSH_PWR_WDOG_STATUS__ADR_SEQ1_DONE_SHIFT 16
#define RSH_PWR_WDOG_STATUS__ADR_SEQ1_DONE_WIDTH 1
#define RSH_PWR_WDOG_STATUS__ADR_SEQ1_DONE_RESET_VAL 0
#define RSH_PWR_WDOG_STATUS__ADR_SEQ1_DONE_RMASK 0x1
#define RSH_PWR_WDOG_STATUS__ADR_SEQ1_DONE_MASK  0x10000
#define RSH_PWR_WDOG_STATUS__ADR_SEQ1_DONE_FIELD 16,16

#define RSH_PWR_WDOG_STATUS__ARM_WDOG_ACK_SENT_SHIFT 17
#define RSH_PWR_WDOG_STATUS__ARM_WDOG_ACK_SENT_WIDTH 1
#define RSH_PWR_WDOG_STATUS__ARM_WDOG_ACK_SENT_RESET_VAL 0
#define RSH_PWR_WDOG_STATUS__ARM_WDOG_ACK_SENT_RMASK 0x1
#define RSH_PWR_WDOG_STATUS__ARM_WDOG_ACK_SENT_MASK  0x20000
#define RSH_PWR_WDOG_STATUS__ARM_WDOG_ACK_SENT_FIELD 17,17

#define RSH_PWR_WDOG_STATUS__TI_THRESH_REACHED_COUNT_SHIFT 18
#define RSH_PWR_WDOG_STATUS__TI_THRESH_REACHED_COUNT_WIDTH 12
#define RSH_PWR_WDOG_STATUS__TI_THRESH_REACHED_COUNT_RESET_VAL 0
#define RSH_PWR_WDOG_STATUS__TI_THRESH_REACHED_COUNT_RMASK 0xfff
#define RSH_PWR_WDOG_STATUS__TI_THRESH_REACHED_COUNT_MASK  0x3ffc0000
#define RSH_PWR_WDOG_STATUS__TI_THRESH_REACHED_COUNT_FIELD 18,29

#define RSH_PWR_WDOG_STATUS__LATEST_SHORT_PBAD_DURATION_SHIFT 30
#define RSH_PWR_WDOG_STATUS__LATEST_SHORT_PBAD_DURATION_WIDTH 20
#define RSH_PWR_WDOG_STATUS__LATEST_SHORT_PBAD_DURATION_RESET_VAL 0
#define RSH_PWR_WDOG_STATUS__LATEST_SHORT_PBAD_DURATION_RMASK 0xfffff
#define RSH_PWR_WDOG_STATUS__LATEST_SHORT_PBAD_DURATION_MASK  _64bit(0x3ffffc0000000)
#define RSH_PWR_WDOG_STATUS__LATEST_SHORT_PBAD_DURATION_FIELD 30,49


/*
 * Tile Enable Status.
 * This register shows the status of the tiles (does not actually
 * enable/disable tiles) and is used in functions such as coresight and the
 * pci bridge setup broadcast.
 */
#define RSH_TILE_STATUS 0x0650
#define RSH_TILE_STATUS__LENGTH 0x0001

#define RSH_TILE_STATUS__HNF_ENA_SHIFT 0
#define RSH_TILE_STATUS__HNF_ENA_WIDTH 8
#define RSH_TILE_STATUS__HNF_ENA_RMASK 0xff
#define RSH_TILE_STATUS__HNF_ENA_MASK  0xff
#define RSH_TILE_STATUS__HNF_ENA_FIELD 0,7

#define RSH_TILE_STATUS__CLUSTER_ENA_SHIFT 32
#define RSH_TILE_STATUS__CLUSTER_ENA_WIDTH 8
#define RSH_TILE_STATUS__CLUSTER_ENA_RMASK 0xff
#define RSH_TILE_STATUS__CLUSTER_ENA_MASK  _64bit(0xff00000000)
#define RSH_TILE_STATUS__CLUSTER_ENA_FIELD 32,39


/*
 * Trio Enable Status.
 * This register shows the status of the trios(does not actually
 * enable/disable trios) and is used in functions such as the pci bridge
 * setup broadcast.
 */
#define RSH_TRIO_STATUS 0x0670
#define RSH_TRIO_STATUS__LENGTH 0x0001

#define RSH_TRIO_STATUS__ENA_SHIFT 0
#define RSH_TRIO_STATUS__ENA_WIDTH 3
#define RSH_TRIO_STATUS__ENA_RESET_VAL 7
#define RSH_TRIO_STATUS__ENA_RMASK 0x7
#define RSH_TRIO_STATUS__ENA_MASK  0x7
#define RSH_TRIO_STATUS__ENA_FIELD 0,2


/*
 * PCIe Bridge Copy Bus Numbers.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_BUS_NUM__FIRST_WORD 0x2100
#define RSH_PCI_BRIDGE_COPY_BUS_NUM__LAST_WORD 0x23a8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_BUS_NUM__SEC_SHIFT 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM__SEC_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM__SEC_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM__SEC_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM__SEC_MASK  0xff00
#define RSH_PCI_BRIDGE_COPY_BUS_NUM__SEC_FIELD 8,15

#define RSH_PCI_BRIDGE_COPY_BUS_NUM__SUB_SHIFT 16
#define RSH_PCI_BRIDGE_COPY_BUS_NUM__SUB_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM__SUB_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM__SUB_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM__SUB_MASK  0xff0000
#define RSH_PCI_BRIDGE_COPY_BUS_NUM__SUB_FIELD 16,23


/*
 * PCIe Bridge Copy Bus Numbers.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_1__FIRST_WORD 0x2128
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_1__LAST_WORD 0x23d0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_1__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_1__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_1__SEC_SHIFT 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_1__SEC_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_1__SEC_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_1__SEC_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_1__SEC_MASK  0xff00
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_1__SEC_FIELD 8,15

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_1__SUB_SHIFT 16
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_1__SUB_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_1__SUB_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_1__SUB_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_1__SUB_MASK  0xff0000
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_1__SUB_FIELD 16,23


/*
 * PCIe Bridge Copy Bus Numbers.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_2__FIRST_WORD 0x2150
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_2__LAST_WORD 0x23f8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_2__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_2__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_2__SEC_SHIFT 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_2__SEC_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_2__SEC_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_2__SEC_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_2__SEC_MASK  0xff00
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_2__SEC_FIELD 8,15

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_2__SUB_SHIFT 16
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_2__SUB_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_2__SUB_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_2__SUB_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_2__SUB_MASK  0xff0000
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_2__SUB_FIELD 16,23


/*
 * PCIe Bridge Copy Bus Numbers.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_3__FIRST_WORD 0x2178
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_3__LAST_WORD 0x2420
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_3__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_3__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_3__SEC_SHIFT 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_3__SEC_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_3__SEC_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_3__SEC_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_3__SEC_MASK  0xff00
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_3__SEC_FIELD 8,15

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_3__SUB_SHIFT 16
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_3__SUB_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_3__SUB_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_3__SUB_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_3__SUB_MASK  0xff0000
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_3__SUB_FIELD 16,23


/*
 * PCIe Bridge Copy Bus Numbers.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_4__FIRST_WORD 0x21a0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_4__LAST_WORD 0x2448
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_4__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_4__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_4__SEC_SHIFT 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_4__SEC_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_4__SEC_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_4__SEC_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_4__SEC_MASK  0xff00
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_4__SEC_FIELD 8,15

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_4__SUB_SHIFT 16
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_4__SUB_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_4__SUB_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_4__SUB_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_4__SUB_MASK  0xff0000
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_4__SUB_FIELD 16,23


/*
 * PCIe Bridge Copy Bus Numbers.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_5__FIRST_WORD 0x21c8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_5__LAST_WORD 0x2470
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_5__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_5__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_5__SEC_SHIFT 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_5__SEC_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_5__SEC_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_5__SEC_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_5__SEC_MASK  0xff00
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_5__SEC_FIELD 8,15

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_5__SUB_SHIFT 16
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_5__SUB_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_5__SUB_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_5__SUB_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_5__SUB_MASK  0xff0000
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_5__SUB_FIELD 16,23


/*
 * PCIe Bridge Copy Bus Numbers.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_6__FIRST_WORD 0x21f0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_6__LAST_WORD 0x2498
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_6__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_6__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_6__SEC_SHIFT 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_6__SEC_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_6__SEC_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_6__SEC_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_6__SEC_MASK  0xff00
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_6__SEC_FIELD 8,15

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_6__SUB_SHIFT 16
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_6__SUB_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_6__SUB_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_6__SUB_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_6__SUB_MASK  0xff0000
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_6__SUB_FIELD 16,23


/*
 * PCIe Bridge Copy Bus Numbers.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_7__FIRST_WORD 0x2218
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_7__LAST_WORD 0x24c0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_7__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_7__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_7__SEC_SHIFT 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_7__SEC_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_7__SEC_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_7__SEC_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_7__SEC_MASK  0xff00
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_7__SEC_FIELD 8,15

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_7__SUB_SHIFT 16
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_7__SUB_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_7__SUB_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_7__SUB_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_7__SUB_MASK  0xff0000
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_7__SUB_FIELD 16,23


/*
 * PCIe Bridge Copy Bus Numbers.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_8__FIRST_WORD 0x2240
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_8__LAST_WORD 0x24e8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_8__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_8__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_8__SEC_SHIFT 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_8__SEC_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_8__SEC_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_8__SEC_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_8__SEC_MASK  0xff00
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_8__SEC_FIELD 8,15

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_8__SUB_SHIFT 16
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_8__SUB_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_8__SUB_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_8__SUB_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_8__SUB_MASK  0xff0000
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_8__SUB_FIELD 16,23


/*
 * PCIe Bridge Copy Bus Numbers.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_9__FIRST_WORD 0x2268
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_9__LAST_WORD 0x2510
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_9__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_9__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_9__SEC_SHIFT 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_9__SEC_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_9__SEC_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_9__SEC_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_9__SEC_MASK  0xff00
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_9__SEC_FIELD 8,15

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_9__SUB_SHIFT 16
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_9__SUB_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_9__SUB_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_9__SUB_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_9__SUB_MASK  0xff0000
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_9__SUB_FIELD 16,23


/*
 * PCIe Bridge Copy Bus Numbers.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_10__FIRST_WORD 0x2290
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_10__LAST_WORD 0x2538
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_10__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_10__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_10__SEC_SHIFT 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_10__SEC_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_10__SEC_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_10__SEC_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_10__SEC_MASK  0xff00
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_10__SEC_FIELD 8,15

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_10__SUB_SHIFT 16
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_10__SUB_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_10__SUB_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_10__SUB_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_10__SUB_MASK  0xff0000
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_10__SUB_FIELD 16,23


/*
 * PCIe Bridge Copy Bus Numbers.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_11__FIRST_WORD 0x22b8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_11__LAST_WORD 0x2560
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_11__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_11__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_11__SEC_SHIFT 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_11__SEC_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_11__SEC_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_11__SEC_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_11__SEC_MASK  0xff00
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_11__SEC_FIELD 8,15

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_11__SUB_SHIFT 16
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_11__SUB_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_11__SUB_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_11__SUB_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_11__SUB_MASK  0xff0000
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_11__SUB_FIELD 16,23


/*
 * PCIe Bridge Copy Bus Numbers.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_12__FIRST_WORD 0x22e0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_12__LAST_WORD 0x2588
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_12__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_12__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_12__SEC_SHIFT 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_12__SEC_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_12__SEC_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_12__SEC_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_12__SEC_MASK  0xff00
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_12__SEC_FIELD 8,15

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_12__SUB_SHIFT 16
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_12__SUB_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_12__SUB_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_12__SUB_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_12__SUB_MASK  0xff0000
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_12__SUB_FIELD 16,23


/*
 * PCIe Bridge Copy Bus Numbers.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_13__FIRST_WORD 0x2308
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_13__LAST_WORD 0x25b0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_13__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_13__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_13__SEC_SHIFT 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_13__SEC_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_13__SEC_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_13__SEC_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_13__SEC_MASK  0xff00
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_13__SEC_FIELD 8,15

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_13__SUB_SHIFT 16
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_13__SUB_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_13__SUB_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_13__SUB_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_13__SUB_MASK  0xff0000
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_13__SUB_FIELD 16,23


/*
 * PCIe Bridge Copy Bus Numbers.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_14__FIRST_WORD 0x2330
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_14__LAST_WORD 0x25d8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_14__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_14__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_14__SEC_SHIFT 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_14__SEC_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_14__SEC_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_14__SEC_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_14__SEC_MASK  0xff00
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_14__SEC_FIELD 8,15

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_14__SUB_SHIFT 16
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_14__SUB_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_14__SUB_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_14__SUB_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_14__SUB_MASK  0xff0000
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_14__SUB_FIELD 16,23


/*
 * PCIe Bridge Copy Bus Numbers.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_15__FIRST_WORD 0x2358
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_15__LAST_WORD 0x2600
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_15__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_15__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_15__SEC_SHIFT 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_15__SEC_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_15__SEC_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_15__SEC_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_15__SEC_MASK  0xff00
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_15__SEC_FIELD 8,15

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_15__SUB_SHIFT 16
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_15__SUB_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_15__SUB_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_15__SUB_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_15__SUB_MASK  0xff0000
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_15__SUB_FIELD 16,23


/*
 * PCIe Bridge Copy Bus Numbers.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_16__FIRST_WORD 0x2380
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_16__LAST_WORD 0x2628
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_16__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_16__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_16__SEC_SHIFT 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_16__SEC_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_16__SEC_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_16__SEC_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_16__SEC_MASK  0xff00
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_16__SEC_FIELD 8,15

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_16__SUB_SHIFT 16
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_16__SUB_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_16__SUB_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_16__SUB_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_16__SUB_MASK  0xff0000
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_16__SUB_FIELD 16,23


/*
 * PCIe Bridge Copy Bus Numbers.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_17__FIRST_WORD 0x23a8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_17__LAST_WORD 0x2650
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_17__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_17__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_17__SEC_SHIFT 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_17__SEC_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_17__SEC_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_17__SEC_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_17__SEC_MASK  0xff00
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_17__SEC_FIELD 8,15

#define RSH_PCI_BRIDGE_COPY_BUS_NUM_17__SUB_SHIFT 16
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_17__SUB_WIDTH 8
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_17__SUB_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_17__SUB_RMASK 0xff
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_17__SUB_MASK  0xff0000
#define RSH_PCI_BRIDGE_COPY_BUS_NUM_17__SUB_FIELD 16,23


/*
 * PCIe Bridge Copy for non-prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_NON_PF__FIRST_WORD 0x2108
#define RSH_PCI_BRIDGE_COPY_NON_PF__LAST_WORD 0x23b0
#define RSH_PCI_BRIDGE_COPY_NON_PF__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_NON_PF__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_NON_PF__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_NON_PF__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_NON_PF__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_NON_PF__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_NON_PF__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_NON_PF__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for non-prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_NON_PF_1__FIRST_WORD 0x2130
#define RSH_PCI_BRIDGE_COPY_NON_PF_1__LAST_WORD 0x23d8
#define RSH_PCI_BRIDGE_COPY_NON_PF_1__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_NON_PF_1__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_NON_PF_1__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_NON_PF_1__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_1__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_1__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_1__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_NON_PF_1__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_NON_PF_1__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_NON_PF_1__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_1__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_1__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_1__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_NON_PF_1__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for non-prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_NON_PF_2__FIRST_WORD 0x2158
#define RSH_PCI_BRIDGE_COPY_NON_PF_2__LAST_WORD 0x2400
#define RSH_PCI_BRIDGE_COPY_NON_PF_2__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_NON_PF_2__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_NON_PF_2__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_NON_PF_2__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_2__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_2__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_2__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_NON_PF_2__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_NON_PF_2__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_NON_PF_2__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_2__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_2__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_2__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_NON_PF_2__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for non-prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_NON_PF_3__FIRST_WORD 0x2180
#define RSH_PCI_BRIDGE_COPY_NON_PF_3__LAST_WORD 0x2428
#define RSH_PCI_BRIDGE_COPY_NON_PF_3__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_NON_PF_3__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_NON_PF_3__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_NON_PF_3__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_3__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_3__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_3__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_NON_PF_3__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_NON_PF_3__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_NON_PF_3__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_3__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_3__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_3__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_NON_PF_3__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for non-prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_NON_PF_4__FIRST_WORD 0x21a8
#define RSH_PCI_BRIDGE_COPY_NON_PF_4__LAST_WORD 0x2450
#define RSH_PCI_BRIDGE_COPY_NON_PF_4__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_NON_PF_4__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_NON_PF_4__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_NON_PF_4__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_4__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_4__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_4__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_NON_PF_4__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_NON_PF_4__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_NON_PF_4__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_4__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_4__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_4__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_NON_PF_4__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for non-prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_NON_PF_5__FIRST_WORD 0x21d0
#define RSH_PCI_BRIDGE_COPY_NON_PF_5__LAST_WORD 0x2478
#define RSH_PCI_BRIDGE_COPY_NON_PF_5__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_NON_PF_5__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_NON_PF_5__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_NON_PF_5__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_5__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_5__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_5__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_NON_PF_5__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_NON_PF_5__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_NON_PF_5__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_5__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_5__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_5__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_NON_PF_5__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for non-prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_NON_PF_6__FIRST_WORD 0x21f8
#define RSH_PCI_BRIDGE_COPY_NON_PF_6__LAST_WORD 0x24a0
#define RSH_PCI_BRIDGE_COPY_NON_PF_6__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_NON_PF_6__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_NON_PF_6__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_NON_PF_6__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_6__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_6__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_6__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_NON_PF_6__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_NON_PF_6__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_NON_PF_6__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_6__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_6__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_6__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_NON_PF_6__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for non-prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_NON_PF_7__FIRST_WORD 0x2220
#define RSH_PCI_BRIDGE_COPY_NON_PF_7__LAST_WORD 0x24c8
#define RSH_PCI_BRIDGE_COPY_NON_PF_7__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_NON_PF_7__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_NON_PF_7__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_NON_PF_7__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_7__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_7__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_7__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_NON_PF_7__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_NON_PF_7__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_NON_PF_7__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_7__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_7__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_7__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_NON_PF_7__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for non-prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_NON_PF_8__FIRST_WORD 0x2248
#define RSH_PCI_BRIDGE_COPY_NON_PF_8__LAST_WORD 0x24f0
#define RSH_PCI_BRIDGE_COPY_NON_PF_8__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_NON_PF_8__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_NON_PF_8__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_NON_PF_8__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_8__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_8__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_8__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_NON_PF_8__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_NON_PF_8__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_NON_PF_8__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_8__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_8__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_8__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_NON_PF_8__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for non-prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_NON_PF_9__FIRST_WORD 0x2270
#define RSH_PCI_BRIDGE_COPY_NON_PF_9__LAST_WORD 0x2518
#define RSH_PCI_BRIDGE_COPY_NON_PF_9__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_NON_PF_9__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_NON_PF_9__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_NON_PF_9__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_9__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_9__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_9__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_NON_PF_9__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_NON_PF_9__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_NON_PF_9__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_9__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_9__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_9__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_NON_PF_9__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for non-prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_NON_PF_10__FIRST_WORD 0x2298
#define RSH_PCI_BRIDGE_COPY_NON_PF_10__LAST_WORD 0x2540
#define RSH_PCI_BRIDGE_COPY_NON_PF_10__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_NON_PF_10__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_NON_PF_10__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_NON_PF_10__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_10__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_10__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_10__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_NON_PF_10__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_NON_PF_10__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_NON_PF_10__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_10__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_10__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_10__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_NON_PF_10__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for non-prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_NON_PF_11__FIRST_WORD 0x22c0
#define RSH_PCI_BRIDGE_COPY_NON_PF_11__LAST_WORD 0x2568
#define RSH_PCI_BRIDGE_COPY_NON_PF_11__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_NON_PF_11__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_NON_PF_11__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_NON_PF_11__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_11__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_11__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_11__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_NON_PF_11__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_NON_PF_11__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_NON_PF_11__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_11__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_11__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_11__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_NON_PF_11__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for non-prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_NON_PF_12__FIRST_WORD 0x22e8
#define RSH_PCI_BRIDGE_COPY_NON_PF_12__LAST_WORD 0x2590
#define RSH_PCI_BRIDGE_COPY_NON_PF_12__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_NON_PF_12__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_NON_PF_12__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_NON_PF_12__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_12__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_12__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_12__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_NON_PF_12__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_NON_PF_12__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_NON_PF_12__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_12__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_12__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_12__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_NON_PF_12__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for non-prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_NON_PF_13__FIRST_WORD 0x2310
#define RSH_PCI_BRIDGE_COPY_NON_PF_13__LAST_WORD 0x25b8
#define RSH_PCI_BRIDGE_COPY_NON_PF_13__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_NON_PF_13__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_NON_PF_13__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_NON_PF_13__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_13__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_13__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_13__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_NON_PF_13__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_NON_PF_13__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_NON_PF_13__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_13__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_13__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_13__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_NON_PF_13__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for non-prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_NON_PF_14__FIRST_WORD 0x2338
#define RSH_PCI_BRIDGE_COPY_NON_PF_14__LAST_WORD 0x25e0
#define RSH_PCI_BRIDGE_COPY_NON_PF_14__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_NON_PF_14__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_NON_PF_14__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_NON_PF_14__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_14__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_14__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_14__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_NON_PF_14__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_NON_PF_14__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_NON_PF_14__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_14__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_14__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_14__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_NON_PF_14__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for non-prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_NON_PF_15__FIRST_WORD 0x2360
#define RSH_PCI_BRIDGE_COPY_NON_PF_15__LAST_WORD 0x2608
#define RSH_PCI_BRIDGE_COPY_NON_PF_15__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_NON_PF_15__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_NON_PF_15__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_NON_PF_15__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_15__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_15__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_15__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_NON_PF_15__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_NON_PF_15__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_NON_PF_15__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_15__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_15__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_15__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_NON_PF_15__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for non-prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_NON_PF_16__FIRST_WORD 0x2388
#define RSH_PCI_BRIDGE_COPY_NON_PF_16__LAST_WORD 0x2630
#define RSH_PCI_BRIDGE_COPY_NON_PF_16__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_NON_PF_16__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_NON_PF_16__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_NON_PF_16__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_16__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_16__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_16__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_NON_PF_16__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_NON_PF_16__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_NON_PF_16__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_16__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_16__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_16__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_NON_PF_16__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for non-prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_NON_PF_17__FIRST_WORD 0x23b0
#define RSH_PCI_BRIDGE_COPY_NON_PF_17__LAST_WORD 0x2658
#define RSH_PCI_BRIDGE_COPY_NON_PF_17__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_NON_PF_17__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_NON_PF_17__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_NON_PF_17__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_17__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_17__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_17__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_NON_PF_17__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_NON_PF_17__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_NON_PF_17__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_NON_PF_17__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_NON_PF_17__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_NON_PF_17__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_NON_PF_17__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF__FIRST_WORD 0x2110
#define RSH_PCI_BRIDGE_COPY_PF__LAST_WORD 0x23b8
#define RSH_PCI_BRIDGE_COPY_PF__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_PF__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_PF__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_PF__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_PF__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_PF__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_1__FIRST_WORD 0x2138
#define RSH_PCI_BRIDGE_COPY_PF_1__LAST_WORD 0x23e0
#define RSH_PCI_BRIDGE_COPY_PF_1__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_1__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_1__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_PF_1__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_1__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_1__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_1__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_PF_1__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_PF_1__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_PF_1__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_1__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_1__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_1__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_PF_1__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_2__FIRST_WORD 0x2160
#define RSH_PCI_BRIDGE_COPY_PF_2__LAST_WORD 0x2408
#define RSH_PCI_BRIDGE_COPY_PF_2__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_2__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_2__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_PF_2__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_2__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_2__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_2__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_PF_2__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_PF_2__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_PF_2__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_2__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_2__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_2__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_PF_2__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_3__FIRST_WORD 0x2188
#define RSH_PCI_BRIDGE_COPY_PF_3__LAST_WORD 0x2430
#define RSH_PCI_BRIDGE_COPY_PF_3__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_3__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_3__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_PF_3__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_3__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_3__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_3__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_PF_3__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_PF_3__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_PF_3__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_3__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_3__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_3__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_PF_3__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_4__FIRST_WORD 0x21b0
#define RSH_PCI_BRIDGE_COPY_PF_4__LAST_WORD 0x2458
#define RSH_PCI_BRIDGE_COPY_PF_4__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_4__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_4__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_PF_4__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_4__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_4__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_4__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_PF_4__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_PF_4__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_PF_4__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_4__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_4__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_4__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_PF_4__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_5__FIRST_WORD 0x21d8
#define RSH_PCI_BRIDGE_COPY_PF_5__LAST_WORD 0x2480
#define RSH_PCI_BRIDGE_COPY_PF_5__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_5__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_5__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_PF_5__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_5__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_5__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_5__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_PF_5__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_PF_5__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_PF_5__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_5__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_5__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_5__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_PF_5__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_6__FIRST_WORD 0x2200
#define RSH_PCI_BRIDGE_COPY_PF_6__LAST_WORD 0x24a8
#define RSH_PCI_BRIDGE_COPY_PF_6__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_6__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_6__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_PF_6__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_6__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_6__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_6__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_PF_6__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_PF_6__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_PF_6__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_6__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_6__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_6__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_PF_6__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_7__FIRST_WORD 0x2228
#define RSH_PCI_BRIDGE_COPY_PF_7__LAST_WORD 0x24d0
#define RSH_PCI_BRIDGE_COPY_PF_7__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_7__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_7__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_PF_7__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_7__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_7__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_7__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_PF_7__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_PF_7__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_PF_7__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_7__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_7__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_7__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_PF_7__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_8__FIRST_WORD 0x2250
#define RSH_PCI_BRIDGE_COPY_PF_8__LAST_WORD 0x24f8
#define RSH_PCI_BRIDGE_COPY_PF_8__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_8__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_8__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_PF_8__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_8__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_8__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_8__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_PF_8__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_PF_8__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_PF_8__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_8__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_8__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_8__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_PF_8__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_9__FIRST_WORD 0x2278
#define RSH_PCI_BRIDGE_COPY_PF_9__LAST_WORD 0x2520
#define RSH_PCI_BRIDGE_COPY_PF_9__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_9__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_9__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_PF_9__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_9__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_9__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_9__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_PF_9__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_PF_9__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_PF_9__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_9__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_9__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_9__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_PF_9__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_10__FIRST_WORD 0x22a0
#define RSH_PCI_BRIDGE_COPY_PF_10__LAST_WORD 0x2548
#define RSH_PCI_BRIDGE_COPY_PF_10__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_10__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_10__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_PF_10__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_10__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_10__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_10__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_PF_10__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_PF_10__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_PF_10__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_10__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_10__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_10__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_PF_10__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_11__FIRST_WORD 0x22c8
#define RSH_PCI_BRIDGE_COPY_PF_11__LAST_WORD 0x2570
#define RSH_PCI_BRIDGE_COPY_PF_11__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_11__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_11__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_PF_11__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_11__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_11__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_11__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_PF_11__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_PF_11__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_PF_11__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_11__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_11__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_11__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_PF_11__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_12__FIRST_WORD 0x22f0
#define RSH_PCI_BRIDGE_COPY_PF_12__LAST_WORD 0x2598
#define RSH_PCI_BRIDGE_COPY_PF_12__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_12__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_12__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_PF_12__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_12__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_12__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_12__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_PF_12__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_PF_12__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_PF_12__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_12__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_12__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_12__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_PF_12__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_13__FIRST_WORD 0x2318
#define RSH_PCI_BRIDGE_COPY_PF_13__LAST_WORD 0x25c0
#define RSH_PCI_BRIDGE_COPY_PF_13__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_13__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_13__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_PF_13__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_13__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_13__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_13__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_PF_13__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_PF_13__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_PF_13__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_13__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_13__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_13__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_PF_13__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_14__FIRST_WORD 0x2340
#define RSH_PCI_BRIDGE_COPY_PF_14__LAST_WORD 0x25e8
#define RSH_PCI_BRIDGE_COPY_PF_14__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_14__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_14__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_PF_14__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_14__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_14__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_14__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_PF_14__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_PF_14__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_PF_14__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_14__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_14__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_14__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_PF_14__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_15__FIRST_WORD 0x2368
#define RSH_PCI_BRIDGE_COPY_PF_15__LAST_WORD 0x2610
#define RSH_PCI_BRIDGE_COPY_PF_15__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_15__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_15__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_PF_15__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_15__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_15__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_15__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_PF_15__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_PF_15__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_PF_15__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_15__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_15__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_15__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_PF_15__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_16__FIRST_WORD 0x2390
#define RSH_PCI_BRIDGE_COPY_PF_16__LAST_WORD 0x2638
#define RSH_PCI_BRIDGE_COPY_PF_16__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_16__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_16__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_PF_16__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_16__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_16__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_16__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_PF_16__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_PF_16__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_PF_16__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_16__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_16__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_16__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_PF_16__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for prefetchable base/limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_17__FIRST_WORD 0x23b8
#define RSH_PCI_BRIDGE_COPY_PF_17__LAST_WORD 0x2660
#define RSH_PCI_BRIDGE_COPY_PF_17__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_17__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_17__BASE_ADDR_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_PF_17__BASE_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_17__BASE_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_17__BASE_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_17__BASE_ADDR_MASK  0xfff0
#define RSH_PCI_BRIDGE_COPY_PF_17__BASE_ADDR_FIELD 4,15

#define RSH_PCI_BRIDGE_COPY_PF_17__LIM_ADDR_SHIFT 20
#define RSH_PCI_BRIDGE_COPY_PF_17__LIM_ADDR_WIDTH 12
#define RSH_PCI_BRIDGE_COPY_PF_17__LIM_ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_17__LIM_ADDR_RMASK 0xfff
#define RSH_PCI_BRIDGE_COPY_PF_17__LIM_ADDR_MASK  0xfff00000
#define RSH_PCI_BRIDGE_COPY_PF_17__LIM_ADDR_FIELD 20,31


/*
 * PCIe Bridge Copy for upper bits of prefetchable base.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE__FIRST_WORD 0x2118
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE__LAST_WORD 0x23c0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable base.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_1__FIRST_WORD 0x2140
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_1__LAST_WORD 0x23e8
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_1__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_1__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_1__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_1__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_1__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_1__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_1__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_1__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable base.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_2__FIRST_WORD 0x2168
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_2__LAST_WORD 0x2410
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_2__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_2__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_2__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_2__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_2__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_2__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_2__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_2__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable base.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_3__FIRST_WORD 0x2190
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_3__LAST_WORD 0x2438
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_3__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_3__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_3__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_3__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_3__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_3__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_3__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_3__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable base.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_4__FIRST_WORD 0x21b8
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_4__LAST_WORD 0x2460
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_4__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_4__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_4__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_4__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_4__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_4__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_4__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_4__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable base.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_5__FIRST_WORD 0x21e0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_5__LAST_WORD 0x2488
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_5__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_5__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_5__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_5__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_5__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_5__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_5__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_5__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable base.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_6__FIRST_WORD 0x2208
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_6__LAST_WORD 0x24b0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_6__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_6__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_6__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_6__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_6__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_6__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_6__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_6__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable base.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_7__FIRST_WORD 0x2230
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_7__LAST_WORD 0x24d8
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_7__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_7__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_7__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_7__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_7__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_7__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_7__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_7__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable base.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_8__FIRST_WORD 0x2258
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_8__LAST_WORD 0x2500
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_8__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_8__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_8__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_8__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_8__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_8__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_8__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_8__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable base.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_9__FIRST_WORD 0x2280
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_9__LAST_WORD 0x2528
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_9__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_9__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_9__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_9__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_9__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_9__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_9__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_9__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable base.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_10__FIRST_WORD 0x22a8
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_10__LAST_WORD 0x2550
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_10__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_10__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_10__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_10__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_10__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_10__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_10__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_10__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable base.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_11__FIRST_WORD 0x22d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_11__LAST_WORD 0x2578
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_11__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_11__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_11__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_11__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_11__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_11__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_11__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_11__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable base.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_12__FIRST_WORD 0x22f8
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_12__LAST_WORD 0x25a0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_12__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_12__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_12__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_12__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_12__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_12__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_12__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_12__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable base.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_13__FIRST_WORD 0x2320
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_13__LAST_WORD 0x25c8
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_13__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_13__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_13__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_13__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_13__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_13__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_13__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_13__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable base.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_14__FIRST_WORD 0x2348
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_14__LAST_WORD 0x25f0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_14__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_14__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_14__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_14__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_14__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_14__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_14__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_14__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable base.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_15__FIRST_WORD 0x2370
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_15__LAST_WORD 0x2618
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_15__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_15__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_15__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_15__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_15__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_15__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_15__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_15__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable base.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_16__FIRST_WORD 0x2398
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_16__LAST_WORD 0x2640
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_16__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_16__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_16__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_16__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_16__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_16__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_16__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_16__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable base.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_17__FIRST_WORD 0x23c0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_17__LAST_WORD 0x2668
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_17__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_17__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_17__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_17__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_17__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_17__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_17__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_BASE_17__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT__FIRST_WORD 0x2120
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT__LAST_WORD 0x23c8
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_1__FIRST_WORD 0x2148
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_1__LAST_WORD 0x23f0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_1__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_1__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_1__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_1__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_1__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_1__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_1__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_1__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_2__FIRST_WORD 0x2170
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_2__LAST_WORD 0x2418
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_2__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_2__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_2__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_2__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_2__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_2__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_2__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_2__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_3__FIRST_WORD 0x2198
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_3__LAST_WORD 0x2440
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_3__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_3__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_3__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_3__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_3__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_3__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_3__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_3__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_4__FIRST_WORD 0x21c0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_4__LAST_WORD 0x2468
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_4__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_4__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_4__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_4__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_4__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_4__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_4__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_4__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_5__FIRST_WORD 0x21e8
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_5__LAST_WORD 0x2490
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_5__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_5__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_5__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_5__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_5__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_5__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_5__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_5__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_6__FIRST_WORD 0x2210
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_6__LAST_WORD 0x24b8
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_6__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_6__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_6__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_6__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_6__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_6__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_6__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_6__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_7__FIRST_WORD 0x2238
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_7__LAST_WORD 0x24e0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_7__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_7__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_7__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_7__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_7__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_7__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_7__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_7__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_8__FIRST_WORD 0x2260
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_8__LAST_WORD 0x2508
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_8__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_8__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_8__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_8__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_8__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_8__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_8__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_8__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_9__FIRST_WORD 0x2288
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_9__LAST_WORD 0x2530
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_9__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_9__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_9__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_9__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_9__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_9__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_9__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_9__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_10__FIRST_WORD 0x22b0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_10__LAST_WORD 0x2558
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_10__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_10__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_10__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_10__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_10__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_10__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_10__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_10__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_11__FIRST_WORD 0x22d8
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_11__LAST_WORD 0x2580
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_11__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_11__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_11__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_11__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_11__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_11__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_11__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_11__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_12__FIRST_WORD 0x2300
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_12__LAST_WORD 0x25a8
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_12__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_12__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_12__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_12__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_12__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_12__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_12__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_12__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_13__FIRST_WORD 0x2328
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_13__LAST_WORD 0x25d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_13__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_13__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_13__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_13__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_13__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_13__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_13__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_13__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_14__FIRST_WORD 0x2350
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_14__LAST_WORD 0x25f8
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_14__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_14__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_14__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_14__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_14__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_14__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_14__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_14__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_15__FIRST_WORD 0x2378
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_15__LAST_WORD 0x2620
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_15__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_15__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_15__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_15__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_15__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_15__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_15__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_15__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_16__FIRST_WORD 0x23a0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_16__LAST_WORD 0x2648
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_16__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_16__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_16__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_16__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_16__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_16__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_16__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_16__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for upper bits of prefetchable limit.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. One register per bridge.
 */
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_17__FIRST_WORD 0x23c8
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_17__LAST_WORD 0x2670
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_17__LENGTH 0x02d0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_17__STRIDE 0x0028

#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_17__ADDR_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_17__ADDR_WIDTH 5
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_17__ADDR_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_17__ADDR_RMASK 0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_17__ADDR_MASK  0x1f
#define RSH_PCI_BRIDGE_COPY_PF_UPPER_LIMIT_17__ADDR_FIELD 0,4


/*
 * PCIe Bridge Copy for root control register.
 * RSHIM will copy these values to corresponding downstream bridge if
 * COPY_ENA=1. This register copied to all 3 trio instances.
 */
#define RSH_PCI_BRIDGE_COPY_ROOT_CTL 0x2400
#define RSH_PCI_BRIDGE_COPY_ROOT_CTL__LENGTH 0x0001

#define RSH_PCI_BRIDGE_COPY_ROOT_CTL__CRS_SW_VIS_EN_SHIFT 4
#define RSH_PCI_BRIDGE_COPY_ROOT_CTL__CRS_SW_VIS_EN_WIDTH 1
#define RSH_PCI_BRIDGE_COPY_ROOT_CTL__CRS_SW_VIS_EN_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_ROOT_CTL__CRS_SW_VIS_EN_RMASK 0x1
#define RSH_PCI_BRIDGE_COPY_ROOT_CTL__CRS_SW_VIS_EN_MASK  0x10
#define RSH_PCI_BRIDGE_COPY_ROOT_CTL__CRS_SW_VIS_EN_FIELD 4,4


/*
 * PCIe Bridge Copy Control Register.
 * Control bits for the RSHIM pcie bridge copy logic.
 */
#define RSH_PCI_BRIDGE_COPY_CTL 0x2000
#define RSH_PCI_BRIDGE_COPY_CTL__LENGTH 0x0001

#define RSH_PCI_BRIDGE_COPY_CTL__COPY_ENA_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_CTL__COPY_ENA_WIDTH 1
#define RSH_PCI_BRIDGE_COPY_CTL__COPY_ENA_RESET_VAL 0
#define RSH_PCI_BRIDGE_COPY_CTL__COPY_ENA_RMASK 0x1
#define RSH_PCI_BRIDGE_COPY_CTL__COPY_ENA_MASK  0x1
#define RSH_PCI_BRIDGE_COPY_CTL__COPY_ENA_FIELD 0,0


/*
 * PCIe Bridge Copy Status Register.
 * Status bits for the RSHIM pcie bridge copy logic.
 */
#define RSH_PCI_BRIDGE_COPY_STAT 0x2008
#define RSH_PCI_BRIDGE_COPY_STAT__LENGTH 0x0001

#define RSH_PCI_BRIDGE_COPY_STAT__COPY_IDLE_SHIFT 0
#define RSH_PCI_BRIDGE_COPY_STAT__COPY_IDLE_WIDTH 1
#define RSH_PCI_BRIDGE_COPY_STAT__COPY_IDLE_RESET_VAL 1
#define RSH_PCI_BRIDGE_COPY_STAT__COPY_IDLE_RMASK 0x1
#define RSH_PCI_BRIDGE_COPY_STAT__COPY_IDLE_MASK  0x1
#define RSH_PCI_BRIDGE_COPY_STAT__COPY_IDLE_FIELD 0,0


/*
 * Voltage Droop Control.
 * Control basic functionality of voltage droop monitor.
 */
#define RSH_VDROOP_CTL 0x0b00
#define RSH_VDROOP_CTL__LENGTH 0x0001

#define RSH_VDROOP_CTL__RESET_OVD_SHIFT 0
#define RSH_VDROOP_CTL__RESET_OVD_WIDTH 1
#define RSH_VDROOP_CTL__RESET_OVD_RESET_VAL 0
#define RSH_VDROOP_CTL__RESET_OVD_RMASK 0x1
#define RSH_VDROOP_CTL__RESET_OVD_MASK  0x1
#define RSH_VDROOP_CTL__RESET_OVD_FIELD 0,0

#define RSH_VDROOP_CTL__CLKEN_SHIFT 1
#define RSH_VDROOP_CTL__CLKEN_WIDTH 1
#define RSH_VDROOP_CTL__CLKEN_RESET_VAL 0
#define RSH_VDROOP_CTL__CLKEN_RMASK 0x1
#define RSH_VDROOP_CTL__CLKEN_MASK  0x2
#define RSH_VDROOP_CTL__CLKEN_FIELD 1,1

#define RSH_VDROOP_CTL__CPMEN_SHIFT 2
#define RSH_VDROOP_CTL__CPMEN_WIDTH 1
#define RSH_VDROOP_CTL__CPMEN_RESET_VAL 0
#define RSH_VDROOP_CTL__CPMEN_RMASK 0x1
#define RSH_VDROOP_CTL__CPMEN_MASK  0x4
#define RSH_VDROOP_CTL__CPMEN_FIELD 2,2

#define RSH_VDROOP_CTL__CAPTURE_TIME_SHIFT 3
#define RSH_VDROOP_CTL__CAPTURE_TIME_WIDTH 5
#define RSH_VDROOP_CTL__CAPTURE_TIME_RESET_VAL 0
#define RSH_VDROOP_CTL__CAPTURE_TIME_RMASK 0x1f
#define RSH_VDROOP_CTL__CAPTURE_TIME_MASK  0xf8
#define RSH_VDROOP_CTL__CAPTURE_TIME_FIELD 3,7

#define RSH_VDROOP_CTL__DELTA_T_SHIFT 8
#define RSH_VDROOP_CTL__DELTA_T_WIDTH 2
#define RSH_VDROOP_CTL__DELTA_T_RESET_VAL 0
#define RSH_VDROOP_CTL__DELTA_T_RMASK 0x3
#define RSH_VDROOP_CTL__DELTA_T_MASK  0x300
#define RSH_VDROOP_CTL__DELTA_T_FIELD 8,9

#define RSH_VDROOP_CTL__FILTER_Q_SHIFT 10
#define RSH_VDROOP_CTL__FILTER_Q_WIDTH 5
#define RSH_VDROOP_CTL__FILTER_Q_RESET_VAL 0
#define RSH_VDROOP_CTL__FILTER_Q_RMASK 0x1f
#define RSH_VDROOP_CTL__FILTER_Q_MASK  0x7c00
#define RSH_VDROOP_CTL__FILTER_Q_FIELD 10,14

#define RSH_VDROOP_CTL__FILTER_L_SHIFT 15
#define RSH_VDROOP_CTL__FILTER_L_WIDTH 3
#define RSH_VDROOP_CTL__FILTER_L_RESET_VAL 0
#define RSH_VDROOP_CTL__FILTER_L_RMASK 0x7
#define RSH_VDROOP_CTL__FILTER_L_MASK  0x38000
#define RSH_VDROOP_CTL__FILTER_L_FIELD 15,17

#define RSH_VDROOP_CTL__FILTER_E_SHIFT 18
#define RSH_VDROOP_CTL__FILTER_E_WIDTH 3
#define RSH_VDROOP_CTL__FILTER_E_RESET_VAL 0
#define RSH_VDROOP_CTL__FILTER_E_RMASK 0x7
#define RSH_VDROOP_CTL__FILTER_E_MASK  0x1c0000
#define RSH_VDROOP_CTL__FILTER_E_FIELD 18,20

#define RSH_VDROOP_CTL__FILTER_HIGH_PK_SHIFT 21
#define RSH_VDROOP_CTL__FILTER_HIGH_PK_WIDTH 4
#define RSH_VDROOP_CTL__FILTER_HIGH_PK_RESET_VAL 0
#define RSH_VDROOP_CTL__FILTER_HIGH_PK_RMASK 0xf
#define RSH_VDROOP_CTL__FILTER_HIGH_PK_MASK  0x1e00000
#define RSH_VDROOP_CTL__FILTER_HIGH_PK_FIELD 21,24

#define RSH_VDROOP_CTL__LOW_THRESH_MARGIN_SHIFT 25
#define RSH_VDROOP_CTL__LOW_THRESH_MARGIN_WIDTH 3
#define RSH_VDROOP_CTL__LOW_THRESH_MARGIN_RESET_VAL 0
#define RSH_VDROOP_CTL__LOW_THRESH_MARGIN_RMASK 0x7
#define RSH_VDROOP_CTL__LOW_THRESH_MARGIN_MASK  0xe000000
#define RSH_VDROOP_CTL__LOW_THRESH_MARGIN_FIELD 25,27

#define RSH_VDROOP_CTL__HIGH_THRESH_MARGIN_SHIFT 28
#define RSH_VDROOP_CTL__HIGH_THRESH_MARGIN_WIDTH 3
#define RSH_VDROOP_CTL__HIGH_THRESH_MARGIN_RESET_VAL 0
#define RSH_VDROOP_CTL__HIGH_THRESH_MARGIN_RMASK 0x7
#define RSH_VDROOP_CTL__HIGH_THRESH_MARGIN_MASK  0x70000000
#define RSH_VDROOP_CTL__HIGH_THRESH_MARGIN_FIELD 28,30

#define RSH_VDROOP_CTL__HIGH_PK_MARGIN_SHIFT 31
#define RSH_VDROOP_CTL__HIGH_PK_MARGIN_WIDTH 4
#define RSH_VDROOP_CTL__HIGH_PK_MARGIN_RESET_VAL 0
#define RSH_VDROOP_CTL__HIGH_PK_MARGIN_RMASK 0xf
#define RSH_VDROOP_CTL__HIGH_PK_MARGIN_MASK  _64bit(0x780000000)
#define RSH_VDROOP_CTL__HIGH_PK_MARGIN_FIELD 31,34

#define RSH_VDROOP_CTL__MAX_TGT_OVD_SHIFT 35
#define RSH_VDROOP_CTL__MAX_TGT_OVD_WIDTH 7
#define RSH_VDROOP_CTL__MAX_TGT_OVD_RESET_VAL 0
#define RSH_VDROOP_CTL__MAX_TGT_OVD_RMASK 0x7f
#define RSH_VDROOP_CTL__MAX_TGT_OVD_MASK  _64bit(0x3f800000000)
#define RSH_VDROOP_CTL__MAX_TGT_OVD_FIELD 35,41

#define RSH_VDROOP_CTL__CTL_STEP_SIZE_SHIFT 42
#define RSH_VDROOP_CTL__CTL_STEP_SIZE_WIDTH 3
#define RSH_VDROOP_CTL__CTL_STEP_SIZE_RESET_VAL 0
#define RSH_VDROOP_CTL__CTL_STEP_SIZE_RMASK 0x7
#define RSH_VDROOP_CTL__CTL_STEP_SIZE_MASK  _64bit(0x1c0000000000)
#define RSH_VDROOP_CTL__CTL_STEP_SIZE_FIELD 42,44

#define RSH_VDROOP_CTL__FREQ_SEL_SHIFT 45
#define RSH_VDROOP_CTL__FREQ_SEL_WIDTH 2
#define RSH_VDROOP_CTL__FREQ_SEL_RESET_VAL 0
#define RSH_VDROOP_CTL__FREQ_SEL_RMASK 0x3
#define RSH_VDROOP_CTL__FREQ_SEL_MASK  _64bit(0x600000000000)
#define RSH_VDROOP_CTL__FREQ_SEL_FIELD 45,46

#define RSH_VDROOP_CTL__PIPE_BYPASS_SHIFT 47
#define RSH_VDROOP_CTL__PIPE_BYPASS_WIDTH 2
#define RSH_VDROOP_CTL__PIPE_BYPASS_RESET_VAL 0
#define RSH_VDROOP_CTL__PIPE_BYPASS_RMASK 0x3
#define RSH_VDROOP_CTL__PIPE_BYPASS_MASK  _64bit(0x1800000000000)
#define RSH_VDROOP_CTL__PIPE_BYPASS_FIELD 47,48

#define RSH_VDROOP_CTL__CALIBRATE_ENA_SHIFT 49
#define RSH_VDROOP_CTL__CALIBRATE_ENA_WIDTH 1
#define RSH_VDROOP_CTL__CALIBRATE_ENA_RESET_VAL 0
#define RSH_VDROOP_CTL__CALIBRATE_ENA_RMASK 0x1
#define RSH_VDROOP_CTL__CALIBRATE_ENA_MASK  _64bit(0x2000000000000)
#define RSH_VDROOP_CTL__CALIBRATE_ENA_FIELD 49,49

#define RSH_VDROOP_CTL__CALIBRATE_CYCLES_SHIFT 50
#define RSH_VDROOP_CTL__CALIBRATE_CYCLES_WIDTH 10
#define RSH_VDROOP_CTL__CALIBRATE_CYCLES_RESET_VAL 0
#define RSH_VDROOP_CTL__CALIBRATE_CYCLES_RMASK 0x3ff
#define RSH_VDROOP_CTL__CALIBRATE_CYCLES_MASK  _64bit(0xffc000000000000)
#define RSH_VDROOP_CTL__CALIBRATE_CYCLES_FIELD 50,59

#define RSH_VDROOP_CTL__SYNC_CHAINS_SHIFT 60
#define RSH_VDROOP_CTL__SYNC_CHAINS_WIDTH 1
#define RSH_VDROOP_CTL__SYNC_CHAINS_RESET_VAL 0
#define RSH_VDROOP_CTL__SYNC_CHAINS_RMASK 0x1
#define RSH_VDROOP_CTL__SYNC_CHAINS_MASK  _64bit(0x1000000000000000)
#define RSH_VDROOP_CTL__SYNC_CHAINS_FIELD 60,60

#define RSH_VDROOP_CTL__CPM_TYPE_SHIFT 61
#define RSH_VDROOP_CTL__CPM_TYPE_WIDTH 1
#define RSH_VDROOP_CTL__CPM_TYPE_RESET_VAL 0
#define RSH_VDROOP_CTL__CPM_TYPE_RMASK 0x1
#define RSH_VDROOP_CTL__CPM_TYPE_MASK  _64bit(0x2000000000000000)
#define RSH_VDROOP_CTL__CPM_TYPE_FIELD 61,61

#define RSH_VDROOP_CTL__ENA_SHIFT 62
#define RSH_VDROOP_CTL__ENA_WIDTH 1
#define RSH_VDROOP_CTL__ENA_RESET_VAL 0
#define RSH_VDROOP_CTL__ENA_RMASK 0x1
#define RSH_VDROOP_CTL__ENA_MASK  _64bit(0x4000000000000000)
#define RSH_VDROOP_CTL__ENA_FIELD 62,62

#define RSH_VDROOP_CTL__UPDATE_SHIFT 63
#define RSH_VDROOP_CTL__UPDATE_WIDTH 1
#define RSH_VDROOP_CTL__UPDATE_RESET_VAL 0
#define RSH_VDROOP_CTL__UPDATE_RMASK 0x1
#define RSH_VDROOP_CTL__UPDATE_MASK  _64bit(0x8000000000000000)
#define RSH_VDROOP_CTL__UPDATE_FIELD 63,63


/*
 * Voltage Droop Trace Control.
 * Control the trace buffer and triggers.
 */
#define RSH_VDROOP_TRACE_CTL 0x0b08
#define RSH_VDROOP_TRACE_CTL__LENGTH 0x0001

#define RSH_VDROOP_TRACE_CTL__ENABLE_SHIFT 0
#define RSH_VDROOP_TRACE_CTL__ENABLE_WIDTH 1
#define RSH_VDROOP_TRACE_CTL__ENABLE_RESET_VAL 0
#define RSH_VDROOP_TRACE_CTL__ENABLE_RMASK 0x1
#define RSH_VDROOP_TRACE_CTL__ENABLE_MASK  0x1
#define RSH_VDROOP_TRACE_CTL__ENABLE_FIELD 0,0

#define RSH_VDROOP_TRACE_CTL__TRIGGER_VAL_SHIFT 1
#define RSH_VDROOP_TRACE_CTL__TRIGGER_VAL_WIDTH 7
#define RSH_VDROOP_TRACE_CTL__TRIGGER_VAL_RESET_VAL 0
#define RSH_VDROOP_TRACE_CTL__TRIGGER_VAL_RMASK 0x7f
#define RSH_VDROOP_TRACE_CTL__TRIGGER_VAL_MASK  0xfe
#define RSH_VDROOP_TRACE_CTL__TRIGGER_VAL_FIELD 1,7

#define RSH_VDROOP_TRACE_CTL__TRIGGER_SEL_SHIFT 8
#define RSH_VDROOP_TRACE_CTL__TRIGGER_SEL_WIDTH 2
#define RSH_VDROOP_TRACE_CTL__TRIGGER_SEL_RESET_VAL 0
#define RSH_VDROOP_TRACE_CTL__TRIGGER_SEL_RMASK 0x3
#define RSH_VDROOP_TRACE_CTL__TRIGGER_SEL_MASK  0x300
#define RSH_VDROOP_TRACE_CTL__TRIGGER_SEL_FIELD 8,9

#define RSH_VDROOP_TRACE_CTL__TRIGGER_TYPE_SHIFT 10
#define RSH_VDROOP_TRACE_CTL__TRIGGER_TYPE_WIDTH 1
#define RSH_VDROOP_TRACE_CTL__TRIGGER_TYPE_RESET_VAL 0
#define RSH_VDROOP_TRACE_CTL__TRIGGER_TYPE_RMASK 0x1
#define RSH_VDROOP_TRACE_CTL__TRIGGER_TYPE_MASK  0x400
#define RSH_VDROOP_TRACE_CTL__TRIGGER_TYPE_FIELD 10,10

#define RSH_VDROOP_TRACE_CTL__TRACE_WINDOW_POST_CNT_SHIFT 11
#define RSH_VDROOP_TRACE_CTL__TRACE_WINDOW_POST_CNT_WIDTH 10
#define RSH_VDROOP_TRACE_CTL__TRACE_WINDOW_POST_CNT_RESET_VAL 0
#define RSH_VDROOP_TRACE_CTL__TRACE_WINDOW_POST_CNT_RMASK 0x3ff
#define RSH_VDROOP_TRACE_CTL__TRACE_WINDOW_POST_CNT_MASK  0x1ff800
#define RSH_VDROOP_TRACE_CTL__TRACE_WINDOW_POST_CNT_FIELD 11,20

#define RSH_VDROOP_TRACE_CTL__SKIP_SAMPLES_SHIFT 21
#define RSH_VDROOP_TRACE_CTL__SKIP_SAMPLES_WIDTH 10
#define RSH_VDROOP_TRACE_CTL__SKIP_SAMPLES_RESET_VAL 0
#define RSH_VDROOP_TRACE_CTL__SKIP_SAMPLES_RMASK 0x3ff
#define RSH_VDROOP_TRACE_CTL__SKIP_SAMPLES_MASK  0x7fe00000
#define RSH_VDROOP_TRACE_CTL__SKIP_SAMPLES_FIELD 21,30


/*
 * Voltage Droop Trace Status.
 * Used to extract trace data from the voltage droop monitor
 */
#define RSH_VDROOP_TRACE_STS 0x0b10
#define RSH_VDROOP_TRACE_STS__LENGTH 0x0001

#define RSH_VDROOP_TRACE_STS__TRACE_COMPLETE_SHIFT 0
#define RSH_VDROOP_TRACE_STS__TRACE_COMPLETE_WIDTH 1
#define RSH_VDROOP_TRACE_STS__TRACE_COMPLETE_RESET_VAL 0
#define RSH_VDROOP_TRACE_STS__TRACE_COMPLETE_RMASK 0x1
#define RSH_VDROOP_TRACE_STS__TRACE_COMPLETE_MASK  0x1
#define RSH_VDROOP_TRACE_STS__TRACE_COMPLETE_FIELD 0,0

#define RSH_VDROOP_TRACE_STS__SAMPLE_VLD_SHIFT 1
#define RSH_VDROOP_TRACE_STS__SAMPLE_VLD_WIDTH 1
#define RSH_VDROOP_TRACE_STS__SAMPLE_VLD_RESET_VAL 0
#define RSH_VDROOP_TRACE_STS__SAMPLE_VLD_RMASK 0x1
#define RSH_VDROOP_TRACE_STS__SAMPLE_VLD_MASK  0x2
#define RSH_VDROOP_TRACE_STS__SAMPLE_VLD_FIELD 1,1

#define RSH_VDROOP_TRACE_STS__VEC_SHIFT 2
#define RSH_VDROOP_TRACE_STS__VEC_WIDTH 40
#define RSH_VDROOP_TRACE_STS__VEC_RESET_VAL 0
#define RSH_VDROOP_TRACE_STS__VEC_RMASK _64bit(0xffffffffff)
#define RSH_VDROOP_TRACE_STS__VEC_MASK  _64bit(0x3fffffffffc)
#define RSH_VDROOP_TRACE_STS__VEC_FIELD 2,41


/*
 * Voltage Droop Stats.
 * Used to extract stats data from the voltage droop monitor
 */
#define RSH_VDROOP_STAT_STS 0x0b18
#define RSH_VDROOP_STAT_STS__LENGTH 0x0001

#define RSH_VDROOP_STAT_STS__MODE_SHIFT 0
#define RSH_VDROOP_STAT_STS__MODE_WIDTH 1
#define RSH_VDROOP_STAT_STS__MODE_RESET_VAL 0
#define RSH_VDROOP_STAT_STS__MODE_RMASK 0x1
#define RSH_VDROOP_STAT_STS__MODE_MASK  0x1
#define RSH_VDROOP_STAT_STS__MODE_FIELD 0,0

#define RSH_VDROOP_STAT_STS__RST_SHIFT 1
#define RSH_VDROOP_STAT_STS__RST_WIDTH 1
#define RSH_VDROOP_STAT_STS__RST_RESET_VAL 0
#define RSH_VDROOP_STAT_STS__RST_RMASK 0x1
#define RSH_VDROOP_STAT_STS__RST_MASK  0x2
#define RSH_VDROOP_STAT_STS__RST_FIELD 1,1

#define RSH_VDROOP_STAT_STS__SAMPLE_VLD_SHIFT 2
#define RSH_VDROOP_STAT_STS__SAMPLE_VLD_WIDTH 1
#define RSH_VDROOP_STAT_STS__SAMPLE_VLD_RESET_VAL 0
#define RSH_VDROOP_STAT_STS__SAMPLE_VLD_RMASK 0x1
#define RSH_VDROOP_STAT_STS__SAMPLE_VLD_MASK  0x4
#define RSH_VDROOP_STAT_STS__SAMPLE_VLD_FIELD 2,2

#define RSH_VDROOP_STAT_STS__VEC_SHIFT 3
#define RSH_VDROOP_STAT_STS__VEC_WIDTH 50
#define RSH_VDROOP_STAT_STS__VEC_RESET_VAL 0
#define RSH_VDROOP_STAT_STS__VEC_RMASK _64bit(0x3ffffffffffff)
#define RSH_VDROOP_STAT_STS__VEC_MASK  _64bit(0x1ffffffffffff8)
#define RSH_VDROOP_STAT_STS__VEC_FIELD 3,52


/*
 * Clock Count.
 * Count cclks in relation to rclk.
 */
#define RSH_CCLK_CLOCK_COUNT 0x0118
#define RSH_CCLK_CLOCK_COUNT__LENGTH 0x0001

#define RSH_CCLK_CLOCK_COUNT__RUN_SHIFT 0
#define RSH_CCLK_CLOCK_COUNT__RUN_WIDTH 1
#define RSH_CCLK_CLOCK_COUNT__RUN_RESET_VAL 0
#define RSH_CCLK_CLOCK_COUNT__RUN_RMASK 0x1
#define RSH_CCLK_CLOCK_COUNT__RUN_MASK  0x1
#define RSH_CCLK_CLOCK_COUNT__RUN_FIELD 0,0

#define RSH_CCLK_CLOCK_COUNT__COUNT_SHIFT 1
#define RSH_CCLK_CLOCK_COUNT__COUNT_WIDTH 15
#define RSH_CCLK_CLOCK_COUNT__COUNT_RMASK 0x7fff
#define RSH_CCLK_CLOCK_COUNT__COUNT_MASK  0xfffe
#define RSH_CCLK_CLOCK_COUNT__COUNT_FIELD 1,15

#endif /* !defined(__DOXYGEN__) */

#endif /* !defined(__REGS_RSH_DEF_H__) */
